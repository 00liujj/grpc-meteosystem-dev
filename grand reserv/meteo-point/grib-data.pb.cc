// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grib-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GribData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GribData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GribData_lat_long_gauss_grid_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GribData_lat_long_gauss_grid_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_grib_2ddata_2eproto() {
  protobuf_AddDesc_grib_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grib-data.proto");
  GOOGLE_CHECK(file != NULL);
  GribData_descriptor_ = file->message_type(0);
  static const int GribData_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, uid_transmet_raw_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, identification_of_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, data_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, grid_identification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, indicator_of_parameter_and_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, indicator_of_type_of_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, parameters_of_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, decimal_scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, grib_edition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, forecast_time_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, time_period_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, time_period_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, time_range_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, forecast_delta_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, number_of_vertical_coordinate_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, pv_or_pl_octet_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, data_representation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, lat_long_gauss_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, bit_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, binary_scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, reference_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, bits_per_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, pack_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, grid_point_data_),
  };
  GribData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GribData_descriptor_,
      GribData::default_instance_,
      GribData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GribData));
  GribData_lat_long_gauss_grid_t_descriptor_ = GribData_descriptor_->nested_type(0);
  static const int GribData_lat_long_gauss_grid_t_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, points_along_latitude_circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, points_along_longitude_meridian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, first_point_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, first_point_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, last_point_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, last_point_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, longitude_direction_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, latitude_direction_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, scan_i_positive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, scan_j_positive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, adjacent_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, points_along_parallel_),
  };
  GribData_lat_long_gauss_grid_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GribData_lat_long_gauss_grid_t_descriptor_,
      GribData_lat_long_gauss_grid_t::default_instance_,
      GribData_lat_long_gauss_grid_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GribData_lat_long_gauss_grid_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GribData_lat_long_gauss_grid_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grib_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GribData_descriptor_, &GribData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GribData_lat_long_gauss_grid_t_descriptor_, &GribData_lat_long_gauss_grid_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_grib_2ddata_2eproto() {
  delete GribData::default_instance_;
  delete GribData_reflection_;
  delete GribData_lat_long_gauss_grid_t::default_instance_;
  delete GribData_lat_long_gauss_grid_t_reflection_;
}

void protobuf_AddDesc_grib_2ddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017grib-data.proto\"\231\t\n\010GribData\022\036\n\026uid_tr"
    "ansmet_raw_datum\030\001 \002(\r\022 \n\030identification"
    "_of_center\030\002 \002(\r\022\022\n\ndata_model\030\003 \001(\r\022\033\n\023"
    "grid_identification\030\004 \002(\r\022(\n indicator_o"
    "f_parameter_and_units\030\005 \002(\r\022\"\n\032indicator"
    "_of_type_of_level\030\006 \002(\r\022\033\n\023parameters_of"
    "_level\030\007 \001(\r\022\013\n\003day\030\010 \002(\t\022\014\n\004hour\030\t \002(\r\022"
    "\016\n\006minute\030\n \002(\r\022\034\n\024decimal_scale_factor\030"
    "\013 \001(\021\022\024\n\014grib_edition\030\014 \001(\r\022\033\n\023forecast_"
    "time_units\030\r \001(\r\022\025\n\rtime_period_1\030\016 \001(\r\022"
    "\025\n\rtime_period_2\030\017 \001(\r\022\034\n\024time_range_ind"
    "icator\030\020 \001(\r\022\033\n\023forecast_delta_time\030\021 \001("
    "\r\022+\n#number_of_vertical_coordinate_param"
    "\030\036 \001(\r\022\035\n\025pv_or_pl_octet_number\030\037 \001(\r\022 \n"
    "\030data_representation_type\030  \001(\r\022<\n\023lat_l"
    "ong_gauss_grid\030! \001(\0132\037.GribData.lat_long"
    "_gauss_grid_t\022\017\n\007bit_map\0302 \003(\010\022\033\n\023binary"
    "_scale_factor\030G \001(\021\022\027\n\017reference_value\030H"
    " \001(\002\022\026\n\016bits_per_point\030I \001(\r\022\023\n\013pack_met"
    "hod\030J \001(\r\022\027\n\017grid_point_data\030K \003(\002\032\220\003\n\025l"
    "at_long_gauss_grid_t\022$\n\034points_along_lat"
    "itude_circle\030! \001(\r\022\'\n\037points_along_longi"
    "tude_meridian\030\" \001(\r\022\034\n\024first_point_latit"
    "ude\030# \001(\021\022\035\n\025first_point_longitude\030$ \001(\021"
    "\022\033\n\023last_point_latitude\030% \001(\021\022\034\n\024last_po"
    "int_longitude\030& \001(\021\022%\n\035longitude_directi"
    "on_increment\030\' \001(\021\022$\n\034latitude_direction"
    "_increment\030( \001(\021\022\027\n\017scan_i_positive\030) \001("
    "\010\022\027\n\017scan_j_positive\030* \001(\010\022\022\n\nadjacent_i"
    "\030+ \001(\010\022\035\n\025points_along_parallel\0302 \003(\r", 1197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grib-data.proto", &protobuf_RegisterTypes);
  GribData::default_instance_ = new GribData();
  GribData_lat_long_gauss_grid_t::default_instance_ = new GribData_lat_long_gauss_grid_t();
  GribData::default_instance_->InitAsDefaultInstance();
  GribData_lat_long_gauss_grid_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grib_2ddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grib_2ddata_2eproto {
  StaticDescriptorInitializer_grib_2ddata_2eproto() {
    protobuf_AddDesc_grib_2ddata_2eproto();
  }
} static_descriptor_initializer_grib_2ddata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GribData_lat_long_gauss_grid_t::kPointsAlongLatitudeCircleFieldNumber;
const int GribData_lat_long_gauss_grid_t::kPointsAlongLongitudeMeridianFieldNumber;
const int GribData_lat_long_gauss_grid_t::kFirstPointLatitudeFieldNumber;
const int GribData_lat_long_gauss_grid_t::kFirstPointLongitudeFieldNumber;
const int GribData_lat_long_gauss_grid_t::kLastPointLatitudeFieldNumber;
const int GribData_lat_long_gauss_grid_t::kLastPointLongitudeFieldNumber;
const int GribData_lat_long_gauss_grid_t::kLongitudeDirectionIncrementFieldNumber;
const int GribData_lat_long_gauss_grid_t::kLatitudeDirectionIncrementFieldNumber;
const int GribData_lat_long_gauss_grid_t::kScanIPositiveFieldNumber;
const int GribData_lat_long_gauss_grid_t::kScanJPositiveFieldNumber;
const int GribData_lat_long_gauss_grid_t::kAdjacentIFieldNumber;
const int GribData_lat_long_gauss_grid_t::kPointsAlongParallelFieldNumber;
#endif  // !_MSC_VER

GribData_lat_long_gauss_grid_t::GribData_lat_long_gauss_grid_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GribData_lat_long_gauss_grid_t::InitAsDefaultInstance() {
}

GribData_lat_long_gauss_grid_t::GribData_lat_long_gauss_grid_t(const GribData_lat_long_gauss_grid_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GribData_lat_long_gauss_grid_t::SharedCtor() {
  _cached_size_ = 0;
  points_along_latitude_circle_ = 0u;
  points_along_longitude_meridian_ = 0u;
  first_point_latitude_ = 0;
  first_point_longitude_ = 0;
  last_point_latitude_ = 0;
  last_point_longitude_ = 0;
  longitude_direction_increment_ = 0;
  latitude_direction_increment_ = 0;
  scan_i_positive_ = false;
  scan_j_positive_ = false;
  adjacent_i_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GribData_lat_long_gauss_grid_t::~GribData_lat_long_gauss_grid_t() {
  SharedDtor();
}

void GribData_lat_long_gauss_grid_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GribData_lat_long_gauss_grid_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GribData_lat_long_gauss_grid_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GribData_lat_long_gauss_grid_t_descriptor_;
}

const GribData_lat_long_gauss_grid_t& GribData_lat_long_gauss_grid_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grib_2ddata_2eproto();  return *default_instance_;
}

GribData_lat_long_gauss_grid_t* GribData_lat_long_gauss_grid_t::default_instance_ = NULL;

GribData_lat_long_gauss_grid_t* GribData_lat_long_gauss_grid_t::New() const {
  return new GribData_lat_long_gauss_grid_t;
}

void GribData_lat_long_gauss_grid_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    points_along_latitude_circle_ = 0u;
    points_along_longitude_meridian_ = 0u;
    first_point_latitude_ = 0;
    first_point_longitude_ = 0;
    last_point_latitude_ = 0;
    last_point_longitude_ = 0;
    longitude_direction_increment_ = 0;
    latitude_direction_increment_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scan_i_positive_ = false;
    scan_j_positive_ = false;
    adjacent_i_ = false;
  }
  points_along_parallel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GribData_lat_long_gauss_grid_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 points_along_latitude_circle = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_along_latitude_circle_)));
          set_has_points_along_latitude_circle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_points_along_longitude_meridian;
        break;
      }
      
      // optional uint32 points_along_longitude_meridian = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_along_longitude_meridian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_along_longitude_meridian_)));
          set_has_points_along_longitude_meridian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_first_point_latitude;
        break;
      }
      
      // optional sint32 first_point_latitude = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_point_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &first_point_latitude_)));
          set_has_first_point_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_first_point_longitude;
        break;
      }
      
      // optional sint32 first_point_longitude = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_point_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &first_point_longitude_)));
          set_has_first_point_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_last_point_latitude;
        break;
      }
      
      // optional sint32 last_point_latitude = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_point_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &last_point_latitude_)));
          set_has_last_point_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_last_point_longitude;
        break;
      }
      
      // optional sint32 last_point_longitude = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_point_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &last_point_longitude_)));
          set_has_last_point_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_longitude_direction_increment;
        break;
      }
      
      // optional sint32 longitude_direction_increment = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitude_direction_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &longitude_direction_increment_)));
          set_has_longitude_direction_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_latitude_direction_increment;
        break;
      }
      
      // optional sint32 latitude_direction_increment = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude_direction_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &latitude_direction_increment_)));
          set_has_latitude_direction_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_scan_i_positive;
        break;
      }
      
      // optional bool scan_i_positive = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_i_positive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_i_positive_)));
          set_has_scan_i_positive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_scan_j_positive;
        break;
      }
      
      // optional bool scan_j_positive = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_j_positive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_j_positive_)));
          set_has_scan_j_positive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_adjacent_i;
        break;
      }
      
      // optional bool adjacent_i = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjacent_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjacent_i_)));
          set_has_adjacent_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_points_along_parallel;
        break;
      }
      
      // repeated uint32 points_along_parallel = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_along_parallel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 400, input, this->mutable_points_along_parallel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_points_along_parallel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_points_along_parallel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GribData_lat_long_gauss_grid_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 points_along_latitude_circle = 33;
  if (has_points_along_latitude_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->points_along_latitude_circle(), output);
  }
  
  // optional uint32 points_along_longitude_meridian = 34;
  if (has_points_along_longitude_meridian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->points_along_longitude_meridian(), output);
  }
  
  // optional sint32 first_point_latitude = 35;
  if (has_first_point_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(35, this->first_point_latitude(), output);
  }
  
  // optional sint32 first_point_longitude = 36;
  if (has_first_point_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(36, this->first_point_longitude(), output);
  }
  
  // optional sint32 last_point_latitude = 37;
  if (has_last_point_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(37, this->last_point_latitude(), output);
  }
  
  // optional sint32 last_point_longitude = 38;
  if (has_last_point_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(38, this->last_point_longitude(), output);
  }
  
  // optional sint32 longitude_direction_increment = 39;
  if (has_longitude_direction_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(39, this->longitude_direction_increment(), output);
  }
  
  // optional sint32 latitude_direction_increment = 40;
  if (has_latitude_direction_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->latitude_direction_increment(), output);
  }
  
  // optional bool scan_i_positive = 41;
  if (has_scan_i_positive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->scan_i_positive(), output);
  }
  
  // optional bool scan_j_positive = 42;
  if (has_scan_j_positive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->scan_j_positive(), output);
  }
  
  // optional bool adjacent_i = 43;
  if (has_adjacent_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->adjacent_i(), output);
  }
  
  // repeated uint32 points_along_parallel = 50;
  for (int i = 0; i < this->points_along_parallel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      50, this->points_along_parallel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GribData_lat_long_gauss_grid_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 points_along_latitude_circle = 33;
  if (has_points_along_latitude_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->points_along_latitude_circle(), target);
  }
  
  // optional uint32 points_along_longitude_meridian = 34;
  if (has_points_along_longitude_meridian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->points_along_longitude_meridian(), target);
  }
  
  // optional sint32 first_point_latitude = 35;
  if (has_first_point_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(35, this->first_point_latitude(), target);
  }
  
  // optional sint32 first_point_longitude = 36;
  if (has_first_point_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(36, this->first_point_longitude(), target);
  }
  
  // optional sint32 last_point_latitude = 37;
  if (has_last_point_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(37, this->last_point_latitude(), target);
  }
  
  // optional sint32 last_point_longitude = 38;
  if (has_last_point_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(38, this->last_point_longitude(), target);
  }
  
  // optional sint32 longitude_direction_increment = 39;
  if (has_longitude_direction_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(39, this->longitude_direction_increment(), target);
  }
  
  // optional sint32 latitude_direction_increment = 40;
  if (has_latitude_direction_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->latitude_direction_increment(), target);
  }
  
  // optional bool scan_i_positive = 41;
  if (has_scan_i_positive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->scan_i_positive(), target);
  }
  
  // optional bool scan_j_positive = 42;
  if (has_scan_j_positive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->scan_j_positive(), target);
  }
  
  // optional bool adjacent_i = 43;
  if (has_adjacent_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->adjacent_i(), target);
  }
  
  // repeated uint32 points_along_parallel = 50;
  for (int i = 0; i < this->points_along_parallel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(50, this->points_along_parallel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GribData_lat_long_gauss_grid_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 points_along_latitude_circle = 33;
    if (has_points_along_latitude_circle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_along_latitude_circle());
    }
    
    // optional uint32 points_along_longitude_meridian = 34;
    if (has_points_along_longitude_meridian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_along_longitude_meridian());
    }
    
    // optional sint32 first_point_latitude = 35;
    if (has_first_point_latitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->first_point_latitude());
    }
    
    // optional sint32 first_point_longitude = 36;
    if (has_first_point_longitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->first_point_longitude());
    }
    
    // optional sint32 last_point_latitude = 37;
    if (has_last_point_latitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->last_point_latitude());
    }
    
    // optional sint32 last_point_longitude = 38;
    if (has_last_point_longitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->last_point_longitude());
    }
    
    // optional sint32 longitude_direction_increment = 39;
    if (has_longitude_direction_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->longitude_direction_increment());
    }
    
    // optional sint32 latitude_direction_increment = 40;
    if (has_latitude_direction_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->latitude_direction_increment());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool scan_i_positive = 41;
    if (has_scan_i_positive()) {
      total_size += 2 + 1;
    }
    
    // optional bool scan_j_positive = 42;
    if (has_scan_j_positive()) {
      total_size += 2 + 1;
    }
    
    // optional bool adjacent_i = 43;
    if (has_adjacent_i()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated uint32 points_along_parallel = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->points_along_parallel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->points_along_parallel(i));
    }
    total_size += 2 * this->points_along_parallel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GribData_lat_long_gauss_grid_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GribData_lat_long_gauss_grid_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GribData_lat_long_gauss_grid_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GribData_lat_long_gauss_grid_t::MergeFrom(const GribData_lat_long_gauss_grid_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_along_parallel_.MergeFrom(from.points_along_parallel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_points_along_latitude_circle()) {
      set_points_along_latitude_circle(from.points_along_latitude_circle());
    }
    if (from.has_points_along_longitude_meridian()) {
      set_points_along_longitude_meridian(from.points_along_longitude_meridian());
    }
    if (from.has_first_point_latitude()) {
      set_first_point_latitude(from.first_point_latitude());
    }
    if (from.has_first_point_longitude()) {
      set_first_point_longitude(from.first_point_longitude());
    }
    if (from.has_last_point_latitude()) {
      set_last_point_latitude(from.last_point_latitude());
    }
    if (from.has_last_point_longitude()) {
      set_last_point_longitude(from.last_point_longitude());
    }
    if (from.has_longitude_direction_increment()) {
      set_longitude_direction_increment(from.longitude_direction_increment());
    }
    if (from.has_latitude_direction_increment()) {
      set_latitude_direction_increment(from.latitude_direction_increment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scan_i_positive()) {
      set_scan_i_positive(from.scan_i_positive());
    }
    if (from.has_scan_j_positive()) {
      set_scan_j_positive(from.scan_j_positive());
    }
    if (from.has_adjacent_i()) {
      set_adjacent_i(from.adjacent_i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GribData_lat_long_gauss_grid_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GribData_lat_long_gauss_grid_t::CopyFrom(const GribData_lat_long_gauss_grid_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GribData_lat_long_gauss_grid_t::IsInitialized() const {
  
  return true;
}

void GribData_lat_long_gauss_grid_t::Swap(GribData_lat_long_gauss_grid_t* other) {
  if (other != this) {
    std::swap(points_along_latitude_circle_, other->points_along_latitude_circle_);
    std::swap(points_along_longitude_meridian_, other->points_along_longitude_meridian_);
    std::swap(first_point_latitude_, other->first_point_latitude_);
    std::swap(first_point_longitude_, other->first_point_longitude_);
    std::swap(last_point_latitude_, other->last_point_latitude_);
    std::swap(last_point_longitude_, other->last_point_longitude_);
    std::swap(longitude_direction_increment_, other->longitude_direction_increment_);
    std::swap(latitude_direction_increment_, other->latitude_direction_increment_);
    std::swap(scan_i_positive_, other->scan_i_positive_);
    std::swap(scan_j_positive_, other->scan_j_positive_);
    std::swap(adjacent_i_, other->adjacent_i_);
    points_along_parallel_.Swap(&other->points_along_parallel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GribData_lat_long_gauss_grid_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GribData_lat_long_gauss_grid_t_descriptor_;
  metadata.reflection = GribData_lat_long_gauss_grid_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GribData::kUidTransmetRawDatumFieldNumber;
const int GribData::kIdentificationOfCenterFieldNumber;
const int GribData::kDataModelFieldNumber;
const int GribData::kGridIdentificationFieldNumber;
const int GribData::kIndicatorOfParameterAndUnitsFieldNumber;
const int GribData::kIndicatorOfTypeOfLevelFieldNumber;
const int GribData::kParametersOfLevelFieldNumber;
const int GribData::kDayFieldNumber;
const int GribData::kHourFieldNumber;
const int GribData::kMinuteFieldNumber;
const int GribData::kDecimalScaleFactorFieldNumber;
const int GribData::kGribEditionFieldNumber;
const int GribData::kForecastTimeUnitsFieldNumber;
const int GribData::kTimePeriod1FieldNumber;
const int GribData::kTimePeriod2FieldNumber;
const int GribData::kTimeRangeIndicatorFieldNumber;
const int GribData::kForecastDeltaTimeFieldNumber;
const int GribData::kNumberOfVerticalCoordinateParamFieldNumber;
const int GribData::kPvOrPlOctetNumberFieldNumber;
const int GribData::kDataRepresentationTypeFieldNumber;
const int GribData::kLatLongGaussGridFieldNumber;
const int GribData::kBitMapFieldNumber;
const int GribData::kBinaryScaleFactorFieldNumber;
const int GribData::kReferenceValueFieldNumber;
const int GribData::kBitsPerPointFieldNumber;
const int GribData::kPackMethodFieldNumber;
const int GribData::kGridPointDataFieldNumber;
#endif  // !_MSC_VER

GribData::GribData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GribData::InitAsDefaultInstance() {
  lat_long_gauss_grid_ = const_cast< ::GribData_lat_long_gauss_grid_t*>(&::GribData_lat_long_gauss_grid_t::default_instance());
}

GribData::GribData(const GribData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GribData::SharedCtor() {
  _cached_size_ = 0;
  uid_transmet_raw_datum_ = 0u;
  identification_of_center_ = 0u;
  data_model_ = 0u;
  grid_identification_ = 0u;
  indicator_of_parameter_and_units_ = 0u;
  indicator_of_type_of_level_ = 0u;
  parameters_of_level_ = 0u;
  day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hour_ = 0u;
  minute_ = 0u;
  decimal_scale_factor_ = 0;
  grib_edition_ = 0u;
  forecast_time_units_ = 0u;
  time_period_1_ = 0u;
  time_period_2_ = 0u;
  time_range_indicator_ = 0u;
  forecast_delta_time_ = 0u;
  number_of_vertical_coordinate_param_ = 0u;
  pv_or_pl_octet_number_ = 0u;
  data_representation_type_ = 0u;
  lat_long_gauss_grid_ = NULL;
  binary_scale_factor_ = 0;
  reference_value_ = 0;
  bits_per_point_ = 0u;
  pack_method_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GribData::~GribData() {
  SharedDtor();
}

void GribData::SharedDtor() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    delete day_;
  }
  if (this != default_instance_) {
    delete lat_long_gauss_grid_;
  }
}

void GribData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GribData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GribData_descriptor_;
}

const GribData& GribData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grib_2ddata_2eproto();  return *default_instance_;
}

GribData* GribData::default_instance_ = NULL;

GribData* GribData::New() const {
  return new GribData;
}

void GribData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_transmet_raw_datum_ = 0u;
    identification_of_center_ = 0u;
    data_model_ = 0u;
    grid_identification_ = 0u;
    indicator_of_parameter_and_units_ = 0u;
    indicator_of_type_of_level_ = 0u;
    parameters_of_level_ = 0u;
    if (has_day()) {
      if (day_ != &::google::protobuf::internal::kEmptyString) {
        day_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hour_ = 0u;
    minute_ = 0u;
    decimal_scale_factor_ = 0;
    grib_edition_ = 0u;
    forecast_time_units_ = 0u;
    time_period_1_ = 0u;
    time_period_2_ = 0u;
    time_range_indicator_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    forecast_delta_time_ = 0u;
    number_of_vertical_coordinate_param_ = 0u;
    pv_or_pl_octet_number_ = 0u;
    data_representation_type_ = 0u;
    if (has_lat_long_gauss_grid()) {
      if (lat_long_gauss_grid_ != NULL) lat_long_gauss_grid_->::GribData_lat_long_gauss_grid_t::Clear();
    }
    binary_scale_factor_ = 0;
    reference_value_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bits_per_point_ = 0u;
    pack_method_ = 0u;
  }
  bit_map_.Clear();
  grid_point_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GribData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid_transmet_raw_datum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_transmet_raw_datum_)));
          set_has_uid_transmet_raw_datum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identification_of_center;
        break;
      }
      
      // required uint32 identification_of_center = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identification_of_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identification_of_center_)));
          set_has_identification_of_center();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_model;
        break;
      }
      
      // optional uint32 data_model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_model_)));
          set_has_data_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grid_identification;
        break;
      }
      
      // required uint32 grid_identification = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_identification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_identification_)));
          set_has_grid_identification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_indicator_of_parameter_and_units;
        break;
      }
      
      // required uint32 indicator_of_parameter_and_units = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indicator_of_parameter_and_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indicator_of_parameter_and_units_)));
          set_has_indicator_of_parameter_and_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_indicator_of_type_of_level;
        break;
      }
      
      // required uint32 indicator_of_type_of_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indicator_of_type_of_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indicator_of_type_of_level_)));
          set_has_indicator_of_type_of_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parameters_of_level;
        break;
      }
      
      // optional uint32 parameters_of_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameters_of_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameters_of_level_)));
          set_has_parameters_of_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_day;
        break;
      }
      
      // required string day = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hour;
        break;
      }
      
      // required uint32 hour = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_minute;
        break;
      }
      
      // required uint32 minute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_decimal_scale_factor;
        break;
      }
      
      // optional sint32 decimal_scale_factor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &decimal_scale_factor_)));
          set_has_decimal_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_grib_edition;
        break;
      }
      
      // optional uint32 grib_edition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grib_edition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grib_edition_)));
          set_has_grib_edition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_forecast_time_units;
        break;
      }
      
      // optional uint32 forecast_time_units = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forecast_time_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forecast_time_units_)));
          set_has_forecast_time_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_time_period_1;
        break;
      }
      
      // optional uint32 time_period_1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_period_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_period_1_)));
          set_has_time_period_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_time_period_2;
        break;
      }
      
      // optional uint32 time_period_2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_period_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_period_2_)));
          set_has_time_period_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_time_range_indicator;
        break;
      }
      
      // optional uint32 time_range_indicator = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_range_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_range_indicator_)));
          set_has_time_range_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_forecast_delta_time;
        break;
      }
      
      // optional uint32 forecast_delta_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forecast_delta_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forecast_delta_time_)));
          set_has_forecast_delta_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_number_of_vertical_coordinate_param;
        break;
      }
      
      // optional uint32 number_of_vertical_coordinate_param = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_vertical_coordinate_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_vertical_coordinate_param_)));
          set_has_number_of_vertical_coordinate_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_pv_or_pl_octet_number;
        break;
      }
      
      // optional uint32 pv_or_pl_octet_number = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pv_or_pl_octet_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pv_or_pl_octet_number_)));
          set_has_pv_or_pl_octet_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_data_representation_type;
        break;
      }
      
      // optional uint32 data_representation_type = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_representation_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_representation_type_)));
          set_has_data_representation_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_lat_long_gauss_grid;
        break;
      }
      
      // optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lat_long_gauss_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lat_long_gauss_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_bit_map;
        break;
      }
      
      // repeated bool bit_map = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 400, input, this->mutable_bit_map())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bit_map())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_bit_map;
        if (input->ExpectTag(568)) goto parse_binary_scale_factor;
        break;
      }
      
      // optional sint32 binary_scale_factor = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binary_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &binary_scale_factor_)));
          set_has_binary_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_reference_value;
        break;
      }
      
      // optional float reference_value = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reference_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reference_value_)));
          set_has_reference_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_bits_per_point;
        break;
      }
      
      // optional uint32 bits_per_point = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits_per_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_per_point_)));
          set_has_bits_per_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_pack_method;
        break;
      }
      
      // optional uint32 pack_method = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_method_)));
          set_has_pack_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(605)) goto parse_grid_point_data;
        break;
      }
      
      // repeated float grid_point_data = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_grid_point_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 605, input, this->mutable_grid_point_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_grid_point_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(605)) goto parse_grid_point_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GribData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid_transmet_raw_datum = 1;
  if (has_uid_transmet_raw_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid_transmet_raw_datum(), output);
  }
  
  // required uint32 identification_of_center = 2;
  if (has_identification_of_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identification_of_center(), output);
  }
  
  // optional uint32 data_model = 3;
  if (has_data_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_model(), output);
  }
  
  // required uint32 grid_identification = 4;
  if (has_grid_identification()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->grid_identification(), output);
  }
  
  // required uint32 indicator_of_parameter_and_units = 5;
  if (has_indicator_of_parameter_and_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->indicator_of_parameter_and_units(), output);
  }
  
  // required uint32 indicator_of_type_of_level = 6;
  if (has_indicator_of_type_of_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->indicator_of_type_of_level(), output);
  }
  
  // optional uint32 parameters_of_level = 7;
  if (has_parameters_of_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->parameters_of_level(), output);
  }
  
  // required string day = 8;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->day(), output);
  }
  
  // required uint32 hour = 9;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hour(), output);
  }
  
  // required uint32 minute = 10;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->minute(), output);
  }
  
  // optional sint32 decimal_scale_factor = 11;
  if (has_decimal_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->decimal_scale_factor(), output);
  }
  
  // optional uint32 grib_edition = 12;
  if (has_grib_edition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->grib_edition(), output);
  }
  
  // optional uint32 forecast_time_units = 13;
  if (has_forecast_time_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->forecast_time_units(), output);
  }
  
  // optional uint32 time_period_1 = 14;
  if (has_time_period_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time_period_1(), output);
  }
  
  // optional uint32 time_period_2 = 15;
  if (has_time_period_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->time_period_2(), output);
  }
  
  // optional uint32 time_range_indicator = 16;
  if (has_time_range_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->time_range_indicator(), output);
  }
  
  // optional uint32 forecast_delta_time = 17;
  if (has_forecast_delta_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->forecast_delta_time(), output);
  }
  
  // optional uint32 number_of_vertical_coordinate_param = 30;
  if (has_number_of_vertical_coordinate_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->number_of_vertical_coordinate_param(), output);
  }
  
  // optional uint32 pv_or_pl_octet_number = 31;
  if (has_pv_or_pl_octet_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->pv_or_pl_octet_number(), output);
  }
  
  // optional uint32 data_representation_type = 32;
  if (has_data_representation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->data_representation_type(), output);
  }
  
  // optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
  if (has_lat_long_gauss_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->lat_long_gauss_grid(), output);
  }
  
  // repeated bool bit_map = 50;
  for (int i = 0; i < this->bit_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      50, this->bit_map(i), output);
  }
  
  // optional sint32 binary_scale_factor = 71;
  if (has_binary_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(71, this->binary_scale_factor(), output);
  }
  
  // optional float reference_value = 72;
  if (has_reference_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->reference_value(), output);
  }
  
  // optional uint32 bits_per_point = 73;
  if (has_bits_per_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->bits_per_point(), output);
  }
  
  // optional uint32 pack_method = 74;
  if (has_pack_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->pack_method(), output);
  }
  
  // repeated float grid_point_data = 75;
  for (int i = 0; i < this->grid_point_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      75, this->grid_point_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GribData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid_transmet_raw_datum = 1;
  if (has_uid_transmet_raw_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid_transmet_raw_datum(), target);
  }
  
  // required uint32 identification_of_center = 2;
  if (has_identification_of_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identification_of_center(), target);
  }
  
  // optional uint32 data_model = 3;
  if (has_data_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_model(), target);
  }
  
  // required uint32 grid_identification = 4;
  if (has_grid_identification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->grid_identification(), target);
  }
  
  // required uint32 indicator_of_parameter_and_units = 5;
  if (has_indicator_of_parameter_and_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->indicator_of_parameter_and_units(), target);
  }
  
  // required uint32 indicator_of_type_of_level = 6;
  if (has_indicator_of_type_of_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->indicator_of_type_of_level(), target);
  }
  
  // optional uint32 parameters_of_level = 7;
  if (has_parameters_of_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->parameters_of_level(), target);
  }
  
  // required string day = 8;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->day(), target);
  }
  
  // required uint32 hour = 9;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hour(), target);
  }
  
  // required uint32 minute = 10;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->minute(), target);
  }
  
  // optional sint32 decimal_scale_factor = 11;
  if (has_decimal_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->decimal_scale_factor(), target);
  }
  
  // optional uint32 grib_edition = 12;
  if (has_grib_edition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->grib_edition(), target);
  }
  
  // optional uint32 forecast_time_units = 13;
  if (has_forecast_time_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->forecast_time_units(), target);
  }
  
  // optional uint32 time_period_1 = 14;
  if (has_time_period_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->time_period_1(), target);
  }
  
  // optional uint32 time_period_2 = 15;
  if (has_time_period_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->time_period_2(), target);
  }
  
  // optional uint32 time_range_indicator = 16;
  if (has_time_range_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->time_range_indicator(), target);
  }
  
  // optional uint32 forecast_delta_time = 17;
  if (has_forecast_delta_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->forecast_delta_time(), target);
  }
  
  // optional uint32 number_of_vertical_coordinate_param = 30;
  if (has_number_of_vertical_coordinate_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->number_of_vertical_coordinate_param(), target);
  }
  
  // optional uint32 pv_or_pl_octet_number = 31;
  if (has_pv_or_pl_octet_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->pv_or_pl_octet_number(), target);
  }
  
  // optional uint32 data_representation_type = 32;
  if (has_data_representation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->data_representation_type(), target);
  }
  
  // optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
  if (has_lat_long_gauss_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->lat_long_gauss_grid(), target);
  }
  
  // repeated bool bit_map = 50;
  for (int i = 0; i < this->bit_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(50, this->bit_map(i), target);
  }
  
  // optional sint32 binary_scale_factor = 71;
  if (has_binary_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(71, this->binary_scale_factor(), target);
  }
  
  // optional float reference_value = 72;
  if (has_reference_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->reference_value(), target);
  }
  
  // optional uint32 bits_per_point = 73;
  if (has_bits_per_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->bits_per_point(), target);
  }
  
  // optional uint32 pack_method = 74;
  if (has_pack_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->pack_method(), target);
  }
  
  // repeated float grid_point_data = 75;
  for (int i = 0; i < this->grid_point_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(75, this->grid_point_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GribData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid_transmet_raw_datum = 1;
    if (has_uid_transmet_raw_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid_transmet_raw_datum());
    }
    
    // required uint32 identification_of_center = 2;
    if (has_identification_of_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identification_of_center());
    }
    
    // optional uint32 data_model = 3;
    if (has_data_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_model());
    }
    
    // required uint32 grid_identification = 4;
    if (has_grid_identification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_identification());
    }
    
    // required uint32 indicator_of_parameter_and_units = 5;
    if (has_indicator_of_parameter_and_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indicator_of_parameter_and_units());
    }
    
    // required uint32 indicator_of_type_of_level = 6;
    if (has_indicator_of_type_of_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indicator_of_type_of_level());
    }
    
    // optional uint32 parameters_of_level = 7;
    if (has_parameters_of_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parameters_of_level());
    }
    
    // required string day = 8;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 hour = 9;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }
    
    // required uint32 minute = 10;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }
    
    // optional sint32 decimal_scale_factor = 11;
    if (has_decimal_scale_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->decimal_scale_factor());
    }
    
    // optional uint32 grib_edition = 12;
    if (has_grib_edition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grib_edition());
    }
    
    // optional uint32 forecast_time_units = 13;
    if (has_forecast_time_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forecast_time_units());
    }
    
    // optional uint32 time_period_1 = 14;
    if (has_time_period_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_period_1());
    }
    
    // optional uint32 time_period_2 = 15;
    if (has_time_period_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_period_2());
    }
    
    // optional uint32 time_range_indicator = 16;
    if (has_time_range_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_range_indicator());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 forecast_delta_time = 17;
    if (has_forecast_delta_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forecast_delta_time());
    }
    
    // optional uint32 number_of_vertical_coordinate_param = 30;
    if (has_number_of_vertical_coordinate_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_vertical_coordinate_param());
    }
    
    // optional uint32 pv_or_pl_octet_number = 31;
    if (has_pv_or_pl_octet_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pv_or_pl_octet_number());
    }
    
    // optional uint32 data_representation_type = 32;
    if (has_data_representation_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_representation_type());
    }
    
    // optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
    if (has_lat_long_gauss_grid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lat_long_gauss_grid());
    }
    
    // optional sint32 binary_scale_factor = 71;
    if (has_binary_scale_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->binary_scale_factor());
    }
    
    // optional float reference_value = 72;
    if (has_reference_value()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 bits_per_point = 73;
    if (has_bits_per_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits_per_point());
    }
    
    // optional uint32 pack_method = 74;
    if (has_pack_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_method());
    }
    
  }
  // repeated bool bit_map = 50;
  {
    int data_size = 0;
    data_size = 1 * this->bit_map_size();
    total_size += 2 * this->bit_map_size() + data_size;
  }
  
  // repeated float grid_point_data = 75;
  {
    int data_size = 0;
    data_size = 4 * this->grid_point_data_size();
    total_size += 2 * this->grid_point_data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GribData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GribData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GribData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GribData::MergeFrom(const GribData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_map_.MergeFrom(from.bit_map_);
  grid_point_data_.MergeFrom(from.grid_point_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid_transmet_raw_datum()) {
      set_uid_transmet_raw_datum(from.uid_transmet_raw_datum());
    }
    if (from.has_identification_of_center()) {
      set_identification_of_center(from.identification_of_center());
    }
    if (from.has_data_model()) {
      set_data_model(from.data_model());
    }
    if (from.has_grid_identification()) {
      set_grid_identification(from.grid_identification());
    }
    if (from.has_indicator_of_parameter_and_units()) {
      set_indicator_of_parameter_and_units(from.indicator_of_parameter_and_units());
    }
    if (from.has_indicator_of_type_of_level()) {
      set_indicator_of_type_of_level(from.indicator_of_type_of_level());
    }
    if (from.has_parameters_of_level()) {
      set_parameters_of_level(from.parameters_of_level());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_decimal_scale_factor()) {
      set_decimal_scale_factor(from.decimal_scale_factor());
    }
    if (from.has_grib_edition()) {
      set_grib_edition(from.grib_edition());
    }
    if (from.has_forecast_time_units()) {
      set_forecast_time_units(from.forecast_time_units());
    }
    if (from.has_time_period_1()) {
      set_time_period_1(from.time_period_1());
    }
    if (from.has_time_period_2()) {
      set_time_period_2(from.time_period_2());
    }
    if (from.has_time_range_indicator()) {
      set_time_range_indicator(from.time_range_indicator());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_forecast_delta_time()) {
      set_forecast_delta_time(from.forecast_delta_time());
    }
    if (from.has_number_of_vertical_coordinate_param()) {
      set_number_of_vertical_coordinate_param(from.number_of_vertical_coordinate_param());
    }
    if (from.has_pv_or_pl_octet_number()) {
      set_pv_or_pl_octet_number(from.pv_or_pl_octet_number());
    }
    if (from.has_data_representation_type()) {
      set_data_representation_type(from.data_representation_type());
    }
    if (from.has_lat_long_gauss_grid()) {
      mutable_lat_long_gauss_grid()->::GribData_lat_long_gauss_grid_t::MergeFrom(from.lat_long_gauss_grid());
    }
    if (from.has_binary_scale_factor()) {
      set_binary_scale_factor(from.binary_scale_factor());
    }
    if (from.has_reference_value()) {
      set_reference_value(from.reference_value());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bits_per_point()) {
      set_bits_per_point(from.bits_per_point());
    }
    if (from.has_pack_method()) {
      set_pack_method(from.pack_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GribData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GribData::CopyFrom(const GribData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GribData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003bb) != 0x000003bb) return false;
  
  return true;
}

void GribData::Swap(GribData* other) {
  if (other != this) {
    std::swap(uid_transmet_raw_datum_, other->uid_transmet_raw_datum_);
    std::swap(identification_of_center_, other->identification_of_center_);
    std::swap(data_model_, other->data_model_);
    std::swap(grid_identification_, other->grid_identification_);
    std::swap(indicator_of_parameter_and_units_, other->indicator_of_parameter_and_units_);
    std::swap(indicator_of_type_of_level_, other->indicator_of_type_of_level_);
    std::swap(parameters_of_level_, other->parameters_of_level_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(decimal_scale_factor_, other->decimal_scale_factor_);
    std::swap(grib_edition_, other->grib_edition_);
    std::swap(forecast_time_units_, other->forecast_time_units_);
    std::swap(time_period_1_, other->time_period_1_);
    std::swap(time_period_2_, other->time_period_2_);
    std::swap(time_range_indicator_, other->time_range_indicator_);
    std::swap(forecast_delta_time_, other->forecast_delta_time_);
    std::swap(number_of_vertical_coordinate_param_, other->number_of_vertical_coordinate_param_);
    std::swap(pv_or_pl_octet_number_, other->pv_or_pl_octet_number_);
    std::swap(data_representation_type_, other->data_representation_type_);
    std::swap(lat_long_gauss_grid_, other->lat_long_gauss_grid_);
    bit_map_.Swap(&other->bit_map_);
    std::swap(binary_scale_factor_, other->binary_scale_factor_);
    std::swap(reference_value_, other->reference_value_);
    std::swap(bits_per_point_, other->bits_per_point_);
    std::swap(pack_method_, other->pack_method_);
    grid_point_data_.Swap(&other->grid_point_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GribData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GribData_descriptor_;
  metadata.reflection = GribData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
