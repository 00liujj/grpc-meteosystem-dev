// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "synop-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SynopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynopData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_synop_2ddata_2eproto() {
  protobuf_AddDesc_synop_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "synop-data.proto");
  GOOGLE_CHECK(file != NULL);
  SynopData_descriptor_ = file->message_type(0);
  static const int SynopData_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wmo_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_amount_low_or_middle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_middle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, cloud_vertical_or_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, dew_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_amount_last_24_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_is_auto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_stat_1_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_stat_1_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_stat_3_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, precipitation_stat_3_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, pressure_on_sea_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, pressure_tendency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, pressure_tendency_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, relative_humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, standart_isobar_geo_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, standart_isobar_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, temperature_maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, temperature_mean_last_24h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, temperature_minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, temperature_on_2cm_above_ground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, uid_station_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, uid_transmet_raw_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, visibility_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, weather_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, weather_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, weather_past_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, weather_past_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wind_auto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wind_direction_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wind_speed_mean_last_24h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, station_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, station_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, station_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, confidence_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, wind_type_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, mobile_land_station_elevation_),
  };
  SynopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynopData_descriptor_,
      SynopData::default_instance_,
      SynopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynopData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_synop_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynopData_descriptor_, &SynopData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_synop_2ddata_2eproto() {
  delete SynopData::default_instance_;
  delete SynopData_reflection_;
}

void protobuf_AddDesc_synop_2ddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020synop-data.proto\"\226\n\n\tSynopData\022\022\n\nstat"
    "ion_id\030\001 \001(\r\022\013\n\003day\030\002 \002(\t\022\014\n\004hour\030\003 \002(\r\022"
    "\020\n\010wmo_code\030\004 \001(\r\022\024\n\014cloud_amount\030\n \001(\005\022"
    "\"\n\032cloud_amount_low_or_middle\030\013 \001(\005\022\022\n\nc"
    "loud_high\030\014 \001(\005\022\031\n\021cloud_lower_bound\030\r \001"
    "(\005\022\024\n\014cloud_middle\030\016 \001(\005\022\035\n\025cloud_vertic"
    "al_or_low\030\017 \001(\005\022\021\n\tdew_point\030\020 \001(\001\022$\n\034pr"
    "ecipitation_amount_last_24\030\021 \001(\001\022\032\n\022prec"
    "ipitation_code\030\022 \001(\005\022\035\n\025precipitation_is"
    "_auto\030\023 \001(\010\022#\n\033precipitation_stat_1_peri"
    "od\030\024 \001(\005\022\"\n\032precipitation_stat_1_value\030\025"
    " \001(\001\022#\n\033precipitation_stat_3_period\030\026 \001("
    "\005\022\"\n\032precipitation_stat_3_value\030\027 \001(\001\022\020\n"
    "\010pressure\030\030 \001(\001\022\035\n\025pressure_on_sea_level"
    "\030\031 \001(\001\022\031\n\021pressure_tendency\030\032 \001(\005\022\037\n\027pre"
    "ssure_tendency_value\030\033 \001(\001\022\031\n\021relative_h"
    "umidity\030\034 \001(\001\022\"\n\032standart_isobar_geo_hei"
    "ght\030\035 \001(\001\022\035\n\025standart_isobar_value\030\036 \001(\005"
    "\022\023\n\013temperature\030\037 \001(\001\022\033\n\023temperature_max"
    "imum\030  \001(\001\022!\n\031temperature_mean_last_24h\030"
    "! \001(\001\022\033\n\023temperature_minimum\030\" \001(\001\022\'\n\037te"
    "mperature_on_2cm_above_ground\030# \001(\001\022\023\n\013u"
    "id_station\030$ \001(\005\022\036\n\026uid_transmet_raw_dat"
    "um\030% \001(\005\022\030\n\020visibility_range\030& \001(\005\022\024\n\014we"
    "ather_code\030\' \001(\005\022\027\n\017weather_current\030( \001("
    "\005\022\026\n\016weather_past_1\030) \001(\005\022\026\n\016weather_pas"
    "t_2\030* \001(\005\022\021\n\twind_auto\030+ \001(\010\022\033\n\023wind_dir"
    "ection_code\030, \001(\005\022\022\n\nwind_speed\030- \001(\001\022 \n"
    "\030wind_speed_mean_last_24h\030. \001(\001\022\030\n\020stati"
    "on_latitude\030/ \002(\001\022\031\n\021station_longitude\0300"
    " \002(\001\022\026\n\016station_height\0301 \001(\001\022\031\n\021confiden"
    "ce_factor\0302 \001(\005\022\033\n\023wind_type_indicator\0303"
    " \002(\005\022%\n\035mobile_land_station_elevation\0305 "
    "\001(\001", 1323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "synop-data.proto", &protobuf_RegisterTypes);
  SynopData::default_instance_ = new SynopData();
  SynopData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_synop_2ddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_synop_2ddata_2eproto {
  StaticDescriptorInitializer_synop_2ddata_2eproto() {
    protobuf_AddDesc_synop_2ddata_2eproto();
  }
} static_descriptor_initializer_synop_2ddata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SynopData::kStationIdFieldNumber;
const int SynopData::kDayFieldNumber;
const int SynopData::kHourFieldNumber;
const int SynopData::kWmoCodeFieldNumber;
const int SynopData::kCloudAmountFieldNumber;
const int SynopData::kCloudAmountLowOrMiddleFieldNumber;
const int SynopData::kCloudHighFieldNumber;
const int SynopData::kCloudLowerBoundFieldNumber;
const int SynopData::kCloudMiddleFieldNumber;
const int SynopData::kCloudVerticalOrLowFieldNumber;
const int SynopData::kDewPointFieldNumber;
const int SynopData::kPrecipitationAmountLast24FieldNumber;
const int SynopData::kPrecipitationCodeFieldNumber;
const int SynopData::kPrecipitationIsAutoFieldNumber;
const int SynopData::kPrecipitationStat1PeriodFieldNumber;
const int SynopData::kPrecipitationStat1ValueFieldNumber;
const int SynopData::kPrecipitationStat3PeriodFieldNumber;
const int SynopData::kPrecipitationStat3ValueFieldNumber;
const int SynopData::kPressureFieldNumber;
const int SynopData::kPressureOnSeaLevelFieldNumber;
const int SynopData::kPressureTendencyFieldNumber;
const int SynopData::kPressureTendencyValueFieldNumber;
const int SynopData::kRelativeHumidityFieldNumber;
const int SynopData::kStandartIsobarGeoHeightFieldNumber;
const int SynopData::kStandartIsobarValueFieldNumber;
const int SynopData::kTemperatureFieldNumber;
const int SynopData::kTemperatureMaximumFieldNumber;
const int SynopData::kTemperatureMeanLast24HFieldNumber;
const int SynopData::kTemperatureMinimumFieldNumber;
const int SynopData::kTemperatureOn2CmAboveGroundFieldNumber;
const int SynopData::kUidStationFieldNumber;
const int SynopData::kUidTransmetRawDatumFieldNumber;
const int SynopData::kVisibilityRangeFieldNumber;
const int SynopData::kWeatherCodeFieldNumber;
const int SynopData::kWeatherCurrentFieldNumber;
const int SynopData::kWeatherPast1FieldNumber;
const int SynopData::kWeatherPast2FieldNumber;
const int SynopData::kWindAutoFieldNumber;
const int SynopData::kWindDirectionCodeFieldNumber;
const int SynopData::kWindSpeedFieldNumber;
const int SynopData::kWindSpeedMeanLast24HFieldNumber;
const int SynopData::kStationLatitudeFieldNumber;
const int SynopData::kStationLongitudeFieldNumber;
const int SynopData::kStationHeightFieldNumber;
const int SynopData::kConfidenceFactorFieldNumber;
const int SynopData::kWindTypeIndicatorFieldNumber;
const int SynopData::kMobileLandStationElevationFieldNumber;
#endif  // !_MSC_VER

SynopData::SynopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynopData::InitAsDefaultInstance() {
}

SynopData::SynopData(const SynopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynopData::SharedCtor() {
  _cached_size_ = 0;
  station_id_ = 0u;
  day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hour_ = 0u;
  wmo_code_ = 0u;
  cloud_amount_ = 0;
  cloud_amount_low_or_middle_ = 0;
  cloud_high_ = 0;
  cloud_lower_bound_ = 0;
  cloud_middle_ = 0;
  cloud_vertical_or_low_ = 0;
  dew_point_ = 0;
  precipitation_amount_last_24_ = 0;
  precipitation_code_ = 0;
  precipitation_is_auto_ = false;
  precipitation_stat_1_period_ = 0;
  precipitation_stat_1_value_ = 0;
  precipitation_stat_3_period_ = 0;
  precipitation_stat_3_value_ = 0;
  pressure_ = 0;
  pressure_on_sea_level_ = 0;
  pressure_tendency_ = 0;
  pressure_tendency_value_ = 0;
  relative_humidity_ = 0;
  standart_isobar_geo_height_ = 0;
  standart_isobar_value_ = 0;
  temperature_ = 0;
  temperature_maximum_ = 0;
  temperature_mean_last_24h_ = 0;
  temperature_minimum_ = 0;
  temperature_on_2cm_above_ground_ = 0;
  uid_station_ = 0;
  uid_transmet_raw_datum_ = 0;
  visibility_range_ = 0;
  weather_code_ = 0;
  weather_current_ = 0;
  weather_past_1_ = 0;
  weather_past_2_ = 0;
  wind_auto_ = false;
  wind_direction_code_ = 0;
  wind_speed_ = 0;
  wind_speed_mean_last_24h_ = 0;
  station_latitude_ = 0;
  station_longitude_ = 0;
  station_height_ = 0;
  confidence_factor_ = 0;
  wind_type_indicator_ = 0;
  mobile_land_station_elevation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynopData::~SynopData() {
  SharedDtor();
}

void SynopData::SharedDtor() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    delete day_;
  }
  if (this != default_instance_) {
  }
}

void SynopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynopData_descriptor_;
}

const SynopData& SynopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_synop_2ddata_2eproto();  return *default_instance_;
}

SynopData* SynopData::default_instance_ = NULL;

SynopData* SynopData::New() const {
  return new SynopData;
}

void SynopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    station_id_ = 0u;
    if (has_day()) {
      if (day_ != &::google::protobuf::internal::kEmptyString) {
        day_->clear();
      }
    }
    hour_ = 0u;
    wmo_code_ = 0u;
    cloud_amount_ = 0;
    cloud_amount_low_or_middle_ = 0;
    cloud_high_ = 0;
    cloud_lower_bound_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cloud_middle_ = 0;
    cloud_vertical_or_low_ = 0;
    dew_point_ = 0;
    precipitation_amount_last_24_ = 0;
    precipitation_code_ = 0;
    precipitation_is_auto_ = false;
    precipitation_stat_1_period_ = 0;
    precipitation_stat_1_value_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    precipitation_stat_3_period_ = 0;
    precipitation_stat_3_value_ = 0;
    pressure_ = 0;
    pressure_on_sea_level_ = 0;
    pressure_tendency_ = 0;
    pressure_tendency_value_ = 0;
    relative_humidity_ = 0;
    standart_isobar_geo_height_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    standart_isobar_value_ = 0;
    temperature_ = 0;
    temperature_maximum_ = 0;
    temperature_mean_last_24h_ = 0;
    temperature_minimum_ = 0;
    temperature_on_2cm_above_ground_ = 0;
    uid_station_ = 0;
    uid_transmet_raw_datum_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    visibility_range_ = 0;
    weather_code_ = 0;
    weather_current_ = 0;
    weather_past_1_ = 0;
    weather_past_2_ = 0;
    wind_auto_ = false;
    wind_direction_code_ = 0;
    wind_speed_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    wind_speed_mean_last_24h_ = 0;
    station_latitude_ = 0;
    station_longitude_ = 0;
    station_height_ = 0;
    confidence_factor_ = 0;
    wind_type_indicator_ = 0;
    mobile_land_station_elevation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 station_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &station_id_)));
          set_has_station_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_day;
        break;
      }
      
      // required string day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hour;
        break;
      }
      
      // required uint32 hour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wmo_code;
        break;
      }
      
      // optional uint32 wmo_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wmo_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wmo_code_)));
          set_has_wmo_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cloud_amount;
        break;
      }
      
      // optional int32 cloud_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_amount_)));
          set_has_cloud_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cloud_amount_low_or_middle;
        break;
      }
      
      // optional int32 cloud_amount_low_or_middle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_amount_low_or_middle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_amount_low_or_middle_)));
          set_has_cloud_amount_low_or_middle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cloud_high;
        break;
      }
      
      // optional int32 cloud_high = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_high_)));
          set_has_cloud_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cloud_lower_bound;
        break;
      }
      
      // optional int32 cloud_lower_bound = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_lower_bound_)));
          set_has_cloud_lower_bound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cloud_middle;
        break;
      }
      
      // optional int32 cloud_middle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_middle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_middle_)));
          set_has_cloud_middle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cloud_vertical_or_low;
        break;
      }
      
      // optional int32 cloud_vertical_or_low = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_vertical_or_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloud_vertical_or_low_)));
          set_has_cloud_vertical_or_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_dew_point;
        break;
      }
      
      // optional double dew_point = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dew_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dew_point_)));
          set_has_dew_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_precipitation_amount_last_24;
        break;
      }
      
      // optional double precipitation_amount_last_24 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precipitation_amount_last_24:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precipitation_amount_last_24_)));
          set_has_precipitation_amount_last_24();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_precipitation_code;
        break;
      }
      
      // optional int32 precipitation_code = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precipitation_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precipitation_code_)));
          set_has_precipitation_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_precipitation_is_auto;
        break;
      }
      
      // optional bool precipitation_is_auto = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precipitation_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &precipitation_is_auto_)));
          set_has_precipitation_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_precipitation_stat_1_period;
        break;
      }
      
      // optional int32 precipitation_stat_1_period = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precipitation_stat_1_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precipitation_stat_1_period_)));
          set_has_precipitation_stat_1_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_precipitation_stat_1_value;
        break;
      }
      
      // optional double precipitation_stat_1_value = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precipitation_stat_1_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precipitation_stat_1_value_)));
          set_has_precipitation_stat_1_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_precipitation_stat_3_period;
        break;
      }
      
      // optional int32 precipitation_stat_3_period = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precipitation_stat_3_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precipitation_stat_3_period_)));
          set_has_precipitation_stat_3_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_precipitation_stat_3_value;
        break;
      }
      
      // optional double precipitation_stat_3_value = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precipitation_stat_3_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precipitation_stat_3_value_)));
          set_has_precipitation_stat_3_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_pressure;
        break;
      }
      
      // optional double pressure = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_pressure_on_sea_level;
        break;
      }
      
      // optional double pressure_on_sea_level = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure_on_sea_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_on_sea_level_)));
          set_has_pressure_on_sea_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_pressure_tendency;
        break;
      }
      
      // optional int32 pressure_tendency = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pressure_tendency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pressure_tendency_)));
          set_has_pressure_tendency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_pressure_tendency_value;
        break;
      }
      
      // optional double pressure_tendency_value = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure_tendency_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_tendency_value_)));
          set_has_pressure_tendency_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_relative_humidity;
        break;
      }
      
      // optional double relative_humidity = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relative_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_humidity_)));
          set_has_relative_humidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_standart_isobar_geo_height;
        break;
      }
      
      // optional double standart_isobar_geo_height = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_standart_isobar_geo_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standart_isobar_geo_height_)));
          set_has_standart_isobar_geo_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_standart_isobar_value;
        break;
      }
      
      // optional int32 standart_isobar_value = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standart_isobar_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standart_isobar_value_)));
          set_has_standart_isobar_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_temperature;
        break;
      }
      
      // optional double temperature = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_temperature_maximum;
        break;
      }
      
      // optional double temperature_maximum = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_maximum_)));
          set_has_temperature_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_temperature_mean_last_24h;
        break;
      }
      
      // optional double temperature_mean_last_24h = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature_mean_last_24h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_mean_last_24h_)));
          set_has_temperature_mean_last_24h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_temperature_minimum;
        break;
      }
      
      // optional double temperature_minimum = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_minimum_)));
          set_has_temperature_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_temperature_on_2cm_above_ground;
        break;
      }
      
      // optional double temperature_on_2cm_above_ground = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature_on_2cm_above_ground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_on_2cm_above_ground_)));
          set_has_temperature_on_2cm_above_ground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_uid_station;
        break;
      }
      
      // optional int32 uid_station = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid_station:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_station_)));
          set_has_uid_station();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_uid_transmet_raw_datum;
        break;
      }
      
      // optional int32 uid_transmet_raw_datum = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid_transmet_raw_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_transmet_raw_datum_)));
          set_has_uid_transmet_raw_datum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_visibility_range;
        break;
      }
      
      // optional int32 visibility_range = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visibility_range_)));
          set_has_visibility_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_weather_code;
        break;
      }
      
      // optional int32 weather_code = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_code_)));
          set_has_weather_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_weather_current;
        break;
      }
      
      // optional int32 weather_current = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_current_)));
          set_has_weather_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_weather_past_1;
        break;
      }
      
      // optional int32 weather_past_1 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather_past_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_past_1_)));
          set_has_weather_past_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_weather_past_2;
        break;
      }
      
      // optional int32 weather_past_2 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather_past_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_past_2_)));
          set_has_weather_past_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_wind_auto;
        break;
      }
      
      // optional bool wind_auto = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wind_auto_)));
          set_has_wind_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_wind_direction_code;
        break;
      }
      
      // optional int32 wind_direction_code = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_direction_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_direction_code_)));
          set_has_wind_direction_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_wind_speed;
        break;
      }
      
      // optional double wind_speed = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wind_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_)));
          set_has_wind_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_wind_speed_mean_last_24h;
        break;
      }
      
      // optional double wind_speed_mean_last_24h = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wind_speed_mean_last_24h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_mean_last_24h_)));
          set_has_wind_speed_mean_last_24h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(377)) goto parse_station_latitude;
        break;
      }
      
      // required double station_latitude = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_station_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_latitude_)));
          set_has_station_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(385)) goto parse_station_longitude;
        break;
      }
      
      // required double station_longitude = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_station_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_longitude_)));
          set_has_station_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(393)) goto parse_station_height;
        break;
      }
      
      // optional double station_height = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_station_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_height_)));
          set_has_station_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_confidence_factor;
        break;
      }
      
      // optional int32 confidence_factor = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confidence_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_factor_)));
          set_has_confidence_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_wind_type_indicator;
        break;
      }
      
      // required int32 wind_type_indicator = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_type_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_type_indicator_)));
          set_has_wind_type_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(425)) goto parse_mobile_land_station_elevation;
        break;
      }
      
      // optional double mobile_land_station_elevation = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mobile_land_station_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mobile_land_station_elevation_)));
          set_has_mobile_land_station_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 station_id = 1;
  if (has_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->station_id(), output);
  }
  
  // required string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->day(), output);
  }
  
  // required uint32 hour = 3;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hour(), output);
  }
  
  // optional uint32 wmo_code = 4;
  if (has_wmo_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wmo_code(), output);
  }
  
  // optional int32 cloud_amount = 10;
  if (has_cloud_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cloud_amount(), output);
  }
  
  // optional int32 cloud_amount_low_or_middle = 11;
  if (has_cloud_amount_low_or_middle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cloud_amount_low_or_middle(), output);
  }
  
  // optional int32 cloud_high = 12;
  if (has_cloud_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cloud_high(), output);
  }
  
  // optional int32 cloud_lower_bound = 13;
  if (has_cloud_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cloud_lower_bound(), output);
  }
  
  // optional int32 cloud_middle = 14;
  if (has_cloud_middle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cloud_middle(), output);
  }
  
  // optional int32 cloud_vertical_or_low = 15;
  if (has_cloud_vertical_or_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cloud_vertical_or_low(), output);
  }
  
  // optional double dew_point = 16;
  if (has_dew_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->dew_point(), output);
  }
  
  // optional double precipitation_amount_last_24 = 17;
  if (has_precipitation_amount_last_24()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->precipitation_amount_last_24(), output);
  }
  
  // optional int32 precipitation_code = 18;
  if (has_precipitation_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->precipitation_code(), output);
  }
  
  // optional bool precipitation_is_auto = 19;
  if (has_precipitation_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->precipitation_is_auto(), output);
  }
  
  // optional int32 precipitation_stat_1_period = 20;
  if (has_precipitation_stat_1_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->precipitation_stat_1_period(), output);
  }
  
  // optional double precipitation_stat_1_value = 21;
  if (has_precipitation_stat_1_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->precipitation_stat_1_value(), output);
  }
  
  // optional int32 precipitation_stat_3_period = 22;
  if (has_precipitation_stat_3_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->precipitation_stat_3_period(), output);
  }
  
  // optional double precipitation_stat_3_value = 23;
  if (has_precipitation_stat_3_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->precipitation_stat_3_value(), output);
  }
  
  // optional double pressure = 24;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->pressure(), output);
  }
  
  // optional double pressure_on_sea_level = 25;
  if (has_pressure_on_sea_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->pressure_on_sea_level(), output);
  }
  
  // optional int32 pressure_tendency = 26;
  if (has_pressure_tendency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->pressure_tendency(), output);
  }
  
  // optional double pressure_tendency_value = 27;
  if (has_pressure_tendency_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->pressure_tendency_value(), output);
  }
  
  // optional double relative_humidity = 28;
  if (has_relative_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->relative_humidity(), output);
  }
  
  // optional double standart_isobar_geo_height = 29;
  if (has_standart_isobar_geo_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->standart_isobar_geo_height(), output);
  }
  
  // optional int32 standart_isobar_value = 30;
  if (has_standart_isobar_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->standart_isobar_value(), output);
  }
  
  // optional double temperature = 31;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->temperature(), output);
  }
  
  // optional double temperature_maximum = 32;
  if (has_temperature_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->temperature_maximum(), output);
  }
  
  // optional double temperature_mean_last_24h = 33;
  if (has_temperature_mean_last_24h()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->temperature_mean_last_24h(), output);
  }
  
  // optional double temperature_minimum = 34;
  if (has_temperature_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->temperature_minimum(), output);
  }
  
  // optional double temperature_on_2cm_above_ground = 35;
  if (has_temperature_on_2cm_above_ground()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->temperature_on_2cm_above_ground(), output);
  }
  
  // optional int32 uid_station = 36;
  if (has_uid_station()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->uid_station(), output);
  }
  
  // optional int32 uid_transmet_raw_datum = 37;
  if (has_uid_transmet_raw_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->uid_transmet_raw_datum(), output);
  }
  
  // optional int32 visibility_range = 38;
  if (has_visibility_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->visibility_range(), output);
  }
  
  // optional int32 weather_code = 39;
  if (has_weather_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->weather_code(), output);
  }
  
  // optional int32 weather_current = 40;
  if (has_weather_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->weather_current(), output);
  }
  
  // optional int32 weather_past_1 = 41;
  if (has_weather_past_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->weather_past_1(), output);
  }
  
  // optional int32 weather_past_2 = 42;
  if (has_weather_past_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->weather_past_2(), output);
  }
  
  // optional bool wind_auto = 43;
  if (has_wind_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->wind_auto(), output);
  }
  
  // optional int32 wind_direction_code = 44;
  if (has_wind_direction_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->wind_direction_code(), output);
  }
  
  // optional double wind_speed = 45;
  if (has_wind_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->wind_speed(), output);
  }
  
  // optional double wind_speed_mean_last_24h = 46;
  if (has_wind_speed_mean_last_24h()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->wind_speed_mean_last_24h(), output);
  }
  
  // required double station_latitude = 47;
  if (has_station_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->station_latitude(), output);
  }
  
  // required double station_longitude = 48;
  if (has_station_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->station_longitude(), output);
  }
  
  // optional double station_height = 49;
  if (has_station_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->station_height(), output);
  }
  
  // optional int32 confidence_factor = 50;
  if (has_confidence_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->confidence_factor(), output);
  }
  
  // required int32 wind_type_indicator = 51;
  if (has_wind_type_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->wind_type_indicator(), output);
  }
  
  // optional double mobile_land_station_elevation = 53;
  if (has_mobile_land_station_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->mobile_land_station_elevation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 station_id = 1;
  if (has_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->station_id(), target);
  }
  
  // required string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->day(), target);
  }
  
  // required uint32 hour = 3;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hour(), target);
  }
  
  // optional uint32 wmo_code = 4;
  if (has_wmo_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wmo_code(), target);
  }
  
  // optional int32 cloud_amount = 10;
  if (has_cloud_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cloud_amount(), target);
  }
  
  // optional int32 cloud_amount_low_or_middle = 11;
  if (has_cloud_amount_low_or_middle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cloud_amount_low_or_middle(), target);
  }
  
  // optional int32 cloud_high = 12;
  if (has_cloud_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cloud_high(), target);
  }
  
  // optional int32 cloud_lower_bound = 13;
  if (has_cloud_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cloud_lower_bound(), target);
  }
  
  // optional int32 cloud_middle = 14;
  if (has_cloud_middle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cloud_middle(), target);
  }
  
  // optional int32 cloud_vertical_or_low = 15;
  if (has_cloud_vertical_or_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cloud_vertical_or_low(), target);
  }
  
  // optional double dew_point = 16;
  if (has_dew_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->dew_point(), target);
  }
  
  // optional double precipitation_amount_last_24 = 17;
  if (has_precipitation_amount_last_24()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->precipitation_amount_last_24(), target);
  }
  
  // optional int32 precipitation_code = 18;
  if (has_precipitation_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->precipitation_code(), target);
  }
  
  // optional bool precipitation_is_auto = 19;
  if (has_precipitation_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->precipitation_is_auto(), target);
  }
  
  // optional int32 precipitation_stat_1_period = 20;
  if (has_precipitation_stat_1_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->precipitation_stat_1_period(), target);
  }
  
  // optional double precipitation_stat_1_value = 21;
  if (has_precipitation_stat_1_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->precipitation_stat_1_value(), target);
  }
  
  // optional int32 precipitation_stat_3_period = 22;
  if (has_precipitation_stat_3_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->precipitation_stat_3_period(), target);
  }
  
  // optional double precipitation_stat_3_value = 23;
  if (has_precipitation_stat_3_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->precipitation_stat_3_value(), target);
  }
  
  // optional double pressure = 24;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->pressure(), target);
  }
  
  // optional double pressure_on_sea_level = 25;
  if (has_pressure_on_sea_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->pressure_on_sea_level(), target);
  }
  
  // optional int32 pressure_tendency = 26;
  if (has_pressure_tendency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->pressure_tendency(), target);
  }
  
  // optional double pressure_tendency_value = 27;
  if (has_pressure_tendency_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->pressure_tendency_value(), target);
  }
  
  // optional double relative_humidity = 28;
  if (has_relative_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->relative_humidity(), target);
  }
  
  // optional double standart_isobar_geo_height = 29;
  if (has_standart_isobar_geo_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->standart_isobar_geo_height(), target);
  }
  
  // optional int32 standart_isobar_value = 30;
  if (has_standart_isobar_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->standart_isobar_value(), target);
  }
  
  // optional double temperature = 31;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->temperature(), target);
  }
  
  // optional double temperature_maximum = 32;
  if (has_temperature_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->temperature_maximum(), target);
  }
  
  // optional double temperature_mean_last_24h = 33;
  if (has_temperature_mean_last_24h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->temperature_mean_last_24h(), target);
  }
  
  // optional double temperature_minimum = 34;
  if (has_temperature_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->temperature_minimum(), target);
  }
  
  // optional double temperature_on_2cm_above_ground = 35;
  if (has_temperature_on_2cm_above_ground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->temperature_on_2cm_above_ground(), target);
  }
  
  // optional int32 uid_station = 36;
  if (has_uid_station()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->uid_station(), target);
  }
  
  // optional int32 uid_transmet_raw_datum = 37;
  if (has_uid_transmet_raw_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->uid_transmet_raw_datum(), target);
  }
  
  // optional int32 visibility_range = 38;
  if (has_visibility_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->visibility_range(), target);
  }
  
  // optional int32 weather_code = 39;
  if (has_weather_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->weather_code(), target);
  }
  
  // optional int32 weather_current = 40;
  if (has_weather_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->weather_current(), target);
  }
  
  // optional int32 weather_past_1 = 41;
  if (has_weather_past_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->weather_past_1(), target);
  }
  
  // optional int32 weather_past_2 = 42;
  if (has_weather_past_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->weather_past_2(), target);
  }
  
  // optional bool wind_auto = 43;
  if (has_wind_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->wind_auto(), target);
  }
  
  // optional int32 wind_direction_code = 44;
  if (has_wind_direction_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->wind_direction_code(), target);
  }
  
  // optional double wind_speed = 45;
  if (has_wind_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->wind_speed(), target);
  }
  
  // optional double wind_speed_mean_last_24h = 46;
  if (has_wind_speed_mean_last_24h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->wind_speed_mean_last_24h(), target);
  }
  
  // required double station_latitude = 47;
  if (has_station_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->station_latitude(), target);
  }
  
  // required double station_longitude = 48;
  if (has_station_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->station_longitude(), target);
  }
  
  // optional double station_height = 49;
  if (has_station_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->station_height(), target);
  }
  
  // optional int32 confidence_factor = 50;
  if (has_confidence_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->confidence_factor(), target);
  }
  
  // required int32 wind_type_indicator = 51;
  if (has_wind_type_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->wind_type_indicator(), target);
  }
  
  // optional double mobile_land_station_elevation = 53;
  if (has_mobile_land_station_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->mobile_land_station_elevation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynopData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 station_id = 1;
    if (has_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->station_id());
    }
    
    // required string day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }
    
    // required uint32 hour = 3;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }
    
    // optional uint32 wmo_code = 4;
    if (has_wmo_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wmo_code());
    }
    
    // optional int32 cloud_amount = 10;
    if (has_cloud_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_amount());
    }
    
    // optional int32 cloud_amount_low_or_middle = 11;
    if (has_cloud_amount_low_or_middle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_amount_low_or_middle());
    }
    
    // optional int32 cloud_high = 12;
    if (has_cloud_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_high());
    }
    
    // optional int32 cloud_lower_bound = 13;
    if (has_cloud_lower_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_lower_bound());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cloud_middle = 14;
    if (has_cloud_middle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_middle());
    }
    
    // optional int32 cloud_vertical_or_low = 15;
    if (has_cloud_vertical_or_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_vertical_or_low());
    }
    
    // optional double dew_point = 16;
    if (has_dew_point()) {
      total_size += 2 + 8;
    }
    
    // optional double precipitation_amount_last_24 = 17;
    if (has_precipitation_amount_last_24()) {
      total_size += 2 + 8;
    }
    
    // optional int32 precipitation_code = 18;
    if (has_precipitation_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precipitation_code());
    }
    
    // optional bool precipitation_is_auto = 19;
    if (has_precipitation_is_auto()) {
      total_size += 2 + 1;
    }
    
    // optional int32 precipitation_stat_1_period = 20;
    if (has_precipitation_stat_1_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precipitation_stat_1_period());
    }
    
    // optional double precipitation_stat_1_value = 21;
    if (has_precipitation_stat_1_value()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 precipitation_stat_3_period = 22;
    if (has_precipitation_stat_3_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precipitation_stat_3_period());
    }
    
    // optional double precipitation_stat_3_value = 23;
    if (has_precipitation_stat_3_value()) {
      total_size += 2 + 8;
    }
    
    // optional double pressure = 24;
    if (has_pressure()) {
      total_size += 2 + 8;
    }
    
    // optional double pressure_on_sea_level = 25;
    if (has_pressure_on_sea_level()) {
      total_size += 2 + 8;
    }
    
    // optional int32 pressure_tendency = 26;
    if (has_pressure_tendency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pressure_tendency());
    }
    
    // optional double pressure_tendency_value = 27;
    if (has_pressure_tendency_value()) {
      total_size += 2 + 8;
    }
    
    // optional double relative_humidity = 28;
    if (has_relative_humidity()) {
      total_size += 2 + 8;
    }
    
    // optional double standart_isobar_geo_height = 29;
    if (has_standart_isobar_geo_height()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 standart_isobar_value = 30;
    if (has_standart_isobar_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->standart_isobar_value());
    }
    
    // optional double temperature = 31;
    if (has_temperature()) {
      total_size += 2 + 8;
    }
    
    // optional double temperature_maximum = 32;
    if (has_temperature_maximum()) {
      total_size += 2 + 8;
    }
    
    // optional double temperature_mean_last_24h = 33;
    if (has_temperature_mean_last_24h()) {
      total_size += 2 + 8;
    }
    
    // optional double temperature_minimum = 34;
    if (has_temperature_minimum()) {
      total_size += 2 + 8;
    }
    
    // optional double temperature_on_2cm_above_ground = 35;
    if (has_temperature_on_2cm_above_ground()) {
      total_size += 2 + 8;
    }
    
    // optional int32 uid_station = 36;
    if (has_uid_station()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid_station());
    }
    
    // optional int32 uid_transmet_raw_datum = 37;
    if (has_uid_transmet_raw_datum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid_transmet_raw_datum());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 visibility_range = 38;
    if (has_visibility_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visibility_range());
    }
    
    // optional int32 weather_code = 39;
    if (has_weather_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather_code());
    }
    
    // optional int32 weather_current = 40;
    if (has_weather_current()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather_current());
    }
    
    // optional int32 weather_past_1 = 41;
    if (has_weather_past_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather_past_1());
    }
    
    // optional int32 weather_past_2 = 42;
    if (has_weather_past_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather_past_2());
    }
    
    // optional bool wind_auto = 43;
    if (has_wind_auto()) {
      total_size += 2 + 1;
    }
    
    // optional int32 wind_direction_code = 44;
    if (has_wind_direction_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_direction_code());
    }
    
    // optional double wind_speed = 45;
    if (has_wind_speed()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double wind_speed_mean_last_24h = 46;
    if (has_wind_speed_mean_last_24h()) {
      total_size += 2 + 8;
    }
    
    // required double station_latitude = 47;
    if (has_station_latitude()) {
      total_size += 2 + 8;
    }
    
    // required double station_longitude = 48;
    if (has_station_longitude()) {
      total_size += 2 + 8;
    }
    
    // optional double station_height = 49;
    if (has_station_height()) {
      total_size += 2 + 8;
    }
    
    // optional int32 confidence_factor = 50;
    if (has_confidence_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence_factor());
    }
    
    // required int32 wind_type_indicator = 51;
    if (has_wind_type_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_type_indicator());
    }
    
    // optional double mobile_land_station_elevation = 53;
    if (has_mobile_land_station_elevation()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynopData::MergeFrom(const SynopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_station_id()) {
      set_station_id(from.station_id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_wmo_code()) {
      set_wmo_code(from.wmo_code());
    }
    if (from.has_cloud_amount()) {
      set_cloud_amount(from.cloud_amount());
    }
    if (from.has_cloud_amount_low_or_middle()) {
      set_cloud_amount_low_or_middle(from.cloud_amount_low_or_middle());
    }
    if (from.has_cloud_high()) {
      set_cloud_high(from.cloud_high());
    }
    if (from.has_cloud_lower_bound()) {
      set_cloud_lower_bound(from.cloud_lower_bound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cloud_middle()) {
      set_cloud_middle(from.cloud_middle());
    }
    if (from.has_cloud_vertical_or_low()) {
      set_cloud_vertical_or_low(from.cloud_vertical_or_low());
    }
    if (from.has_dew_point()) {
      set_dew_point(from.dew_point());
    }
    if (from.has_precipitation_amount_last_24()) {
      set_precipitation_amount_last_24(from.precipitation_amount_last_24());
    }
    if (from.has_precipitation_code()) {
      set_precipitation_code(from.precipitation_code());
    }
    if (from.has_precipitation_is_auto()) {
      set_precipitation_is_auto(from.precipitation_is_auto());
    }
    if (from.has_precipitation_stat_1_period()) {
      set_precipitation_stat_1_period(from.precipitation_stat_1_period());
    }
    if (from.has_precipitation_stat_1_value()) {
      set_precipitation_stat_1_value(from.precipitation_stat_1_value());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_precipitation_stat_3_period()) {
      set_precipitation_stat_3_period(from.precipitation_stat_3_period());
    }
    if (from.has_precipitation_stat_3_value()) {
      set_precipitation_stat_3_value(from.precipitation_stat_3_value());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_pressure_on_sea_level()) {
      set_pressure_on_sea_level(from.pressure_on_sea_level());
    }
    if (from.has_pressure_tendency()) {
      set_pressure_tendency(from.pressure_tendency());
    }
    if (from.has_pressure_tendency_value()) {
      set_pressure_tendency_value(from.pressure_tendency_value());
    }
    if (from.has_relative_humidity()) {
      set_relative_humidity(from.relative_humidity());
    }
    if (from.has_standart_isobar_geo_height()) {
      set_standart_isobar_geo_height(from.standart_isobar_geo_height());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_standart_isobar_value()) {
      set_standart_isobar_value(from.standart_isobar_value());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_temperature_maximum()) {
      set_temperature_maximum(from.temperature_maximum());
    }
    if (from.has_temperature_mean_last_24h()) {
      set_temperature_mean_last_24h(from.temperature_mean_last_24h());
    }
    if (from.has_temperature_minimum()) {
      set_temperature_minimum(from.temperature_minimum());
    }
    if (from.has_temperature_on_2cm_above_ground()) {
      set_temperature_on_2cm_above_ground(from.temperature_on_2cm_above_ground());
    }
    if (from.has_uid_station()) {
      set_uid_station(from.uid_station());
    }
    if (from.has_uid_transmet_raw_datum()) {
      set_uid_transmet_raw_datum(from.uid_transmet_raw_datum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_visibility_range()) {
      set_visibility_range(from.visibility_range());
    }
    if (from.has_weather_code()) {
      set_weather_code(from.weather_code());
    }
    if (from.has_weather_current()) {
      set_weather_current(from.weather_current());
    }
    if (from.has_weather_past_1()) {
      set_weather_past_1(from.weather_past_1());
    }
    if (from.has_weather_past_2()) {
      set_weather_past_2(from.weather_past_2());
    }
    if (from.has_wind_auto()) {
      set_wind_auto(from.wind_auto());
    }
    if (from.has_wind_direction_code()) {
      set_wind_direction_code(from.wind_direction_code());
    }
    if (from.has_wind_speed()) {
      set_wind_speed(from.wind_speed());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_wind_speed_mean_last_24h()) {
      set_wind_speed_mean_last_24h(from.wind_speed_mean_last_24h());
    }
    if (from.has_station_latitude()) {
      set_station_latitude(from.station_latitude());
    }
    if (from.has_station_longitude()) {
      set_station_longitude(from.station_longitude());
    }
    if (from.has_station_height()) {
      set_station_height(from.station_height());
    }
    if (from.has_confidence_factor()) {
      set_confidence_factor(from.confidence_factor());
    }
    if (from.has_wind_type_indicator()) {
      set_wind_type_indicator(from.wind_type_indicator());
    }
    if (from.has_mobile_land_station_elevation()) {
      set_mobile_land_station_elevation(from.mobile_land_station_elevation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynopData::CopyFrom(const SynopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if ((_has_bits_[1] & 0x00002600) != 0x00002600) return false;
  
  return true;
}

void SynopData::Swap(SynopData* other) {
  if (other != this) {
    std::swap(station_id_, other->station_id_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(wmo_code_, other->wmo_code_);
    std::swap(cloud_amount_, other->cloud_amount_);
    std::swap(cloud_amount_low_or_middle_, other->cloud_amount_low_or_middle_);
    std::swap(cloud_high_, other->cloud_high_);
    std::swap(cloud_lower_bound_, other->cloud_lower_bound_);
    std::swap(cloud_middle_, other->cloud_middle_);
    std::swap(cloud_vertical_or_low_, other->cloud_vertical_or_low_);
    std::swap(dew_point_, other->dew_point_);
    std::swap(precipitation_amount_last_24_, other->precipitation_amount_last_24_);
    std::swap(precipitation_code_, other->precipitation_code_);
    std::swap(precipitation_is_auto_, other->precipitation_is_auto_);
    std::swap(precipitation_stat_1_period_, other->precipitation_stat_1_period_);
    std::swap(precipitation_stat_1_value_, other->precipitation_stat_1_value_);
    std::swap(precipitation_stat_3_period_, other->precipitation_stat_3_period_);
    std::swap(precipitation_stat_3_value_, other->precipitation_stat_3_value_);
    std::swap(pressure_, other->pressure_);
    std::swap(pressure_on_sea_level_, other->pressure_on_sea_level_);
    std::swap(pressure_tendency_, other->pressure_tendency_);
    std::swap(pressure_tendency_value_, other->pressure_tendency_value_);
    std::swap(relative_humidity_, other->relative_humidity_);
    std::swap(standart_isobar_geo_height_, other->standart_isobar_geo_height_);
    std::swap(standart_isobar_value_, other->standart_isobar_value_);
    std::swap(temperature_, other->temperature_);
    std::swap(temperature_maximum_, other->temperature_maximum_);
    std::swap(temperature_mean_last_24h_, other->temperature_mean_last_24h_);
    std::swap(temperature_minimum_, other->temperature_minimum_);
    std::swap(temperature_on_2cm_above_ground_, other->temperature_on_2cm_above_ground_);
    std::swap(uid_station_, other->uid_station_);
    std::swap(uid_transmet_raw_datum_, other->uid_transmet_raw_datum_);
    std::swap(visibility_range_, other->visibility_range_);
    std::swap(weather_code_, other->weather_code_);
    std::swap(weather_current_, other->weather_current_);
    std::swap(weather_past_1_, other->weather_past_1_);
    std::swap(weather_past_2_, other->weather_past_2_);
    std::swap(wind_auto_, other->wind_auto_);
    std::swap(wind_direction_code_, other->wind_direction_code_);
    std::swap(wind_speed_, other->wind_speed_);
    std::swap(wind_speed_mean_last_24h_, other->wind_speed_mean_last_24h_);
    std::swap(station_latitude_, other->station_latitude_);
    std::swap(station_longitude_, other->station_longitude_);
    std::swap(station_height_, other->station_height_);
    std::swap(confidence_factor_, other->confidence_factor_);
    std::swap(wind_type_indicator_, other->wind_type_indicator_);
    std::swap(mobile_land_station_elevation_, other->mobile_land_station_elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynopData_descriptor_;
  metadata.reflection = SynopData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
