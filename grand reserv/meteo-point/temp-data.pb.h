// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: temp-data.proto

#ifndef PROTOBUF_temp_2ddata_2eproto__INCLUDED
#define PROTOBUF_temp_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_temp_2ddata_2eproto();
void protobuf_AssignDesc_temp_2ddata_2eproto();
void protobuf_ShutdownFile_temp_2ddata_2eproto();

class TempData;
class TempData_LevelData;

// ===================================================================

class TempData_LevelData : public ::google::protobuf::Message {
 public:
  TempData_LevelData();
  virtual ~TempData_LevelData();
  
  TempData_LevelData(const TempData_LevelData& from);
  
  inline TempData_LevelData& operator=(const TempData_LevelData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TempData_LevelData& default_instance();
  
  void Swap(TempData_LevelData* other);
  
  // implements Message ----------------------------------------------
  
  TempData_LevelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TempData_LevelData& from);
  void MergeFrom(const TempData_LevelData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 geoheight = 1;
  inline bool has_geoheight() const;
  inline void clear_geoheight();
  static const int kGeoheightFieldNumber = 1;
  inline ::google::protobuf::int32 geoheight() const;
  inline void set_geoheight(::google::protobuf::int32 value);
  
  // optional double temperature = 2;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline double temperature() const;
  inline void set_temperature(double value);
  
  // optional int32 temperature_sign = 6;
  inline bool has_temperature_sign() const;
  inline void clear_temperature_sign();
  static const int kTemperatureSignFieldNumber = 6;
  inline ::google::protobuf::int32 temperature_sign() const;
  inline void set_temperature_sign(::google::protobuf::int32 value);
  
  // optional double dew_point = 3;
  inline bool has_dew_point() const;
  inline void clear_dew_point();
  static const int kDewPointFieldNumber = 3;
  inline double dew_point() const;
  inline void set_dew_point(double value);
  
  // optional int32 wind_direction = 4;
  inline bool has_wind_direction() const;
  inline void clear_wind_direction();
  static const int kWindDirectionFieldNumber = 4;
  inline ::google::protobuf::int32 wind_direction() const;
  inline void set_wind_direction(::google::protobuf::int32 value);
  
  // optional int32 wind_speed = 5;
  inline bool has_wind_speed() const;
  inline void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 5;
  inline ::google::protobuf::int32 wind_speed() const;
  inline void set_wind_speed(::google::protobuf::int32 value);
  
  // optional bool is_relative_topography_map = 8;
  inline bool has_is_relative_topography_map() const;
  inline void clear_is_relative_topography_map();
  static const int kIsRelativeTopographyMapFieldNumber = 8;
  inline bool is_relative_topography_map() const;
  inline void set_is_relative_topography_map(bool value);
  
  // optional int32 isobaric_height_500 = 9;
  inline bool has_isobaric_height_500() const;
  inline void clear_isobaric_height_500();
  static const int kIsobaricHeight500FieldNumber = 9;
  inline ::google::protobuf::int32 isobaric_height_500() const;
  inline void set_isobaric_height_500(::google::protobuf::int32 value);
  
  // optional int32 isobaric_height_1000 = 10;
  inline bool has_isobaric_height_1000() const;
  inline void clear_isobaric_height_1000();
  static const int kIsobaricHeight1000FieldNumber = 10;
  inline ::google::protobuf::int32 isobaric_height_1000() const;
  inline void set_isobaric_height_1000(::google::protobuf::int32 value);
  
  // optional int32 abs_geoheight_changing_12 = 11;
  inline bool has_abs_geoheight_changing_12() const;
  inline void clear_abs_geoheight_changing_12();
  static const int kAbsGeoheightChanging12FieldNumber = 11;
  inline ::google::protobuf::int32 abs_geoheight_changing_12() const;
  inline void set_abs_geoheight_changing_12(::google::protobuf::int32 value);
  
  // optional int32 abs_geoheight_changing_24 = 12;
  inline bool has_abs_geoheight_changing_24() const;
  inline void clear_abs_geoheight_changing_24();
  static const int kAbsGeoheightChanging24FieldNumber = 12;
  inline ::google::protobuf::int32 abs_geoheight_changing_24() const;
  inline void set_abs_geoheight_changing_24(::google::protobuf::int32 value);
  
  // optional int32 pressure = 13;
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 13;
  inline ::google::protobuf::int32 pressure() const;
  inline void set_pressure(::google::protobuf::int32 value);
  
  // optional int32 vector_difference_above = 14;
  inline bool has_vector_difference_above() const;
  inline void clear_vector_difference_above();
  static const int kVectorDifferenceAboveFieldNumber = 14;
  inline ::google::protobuf::int32 vector_difference_above() const;
  inline void set_vector_difference_above(::google::protobuf::int32 value);
  
  // optional int32 vector_difference_below = 15;
  inline bool has_vector_difference_below() const;
  inline void clear_vector_difference_below();
  static const int kVectorDifferenceBelowFieldNumber = 15;
  inline ::google::protobuf::int32 vector_difference_below() const;
  inline void set_vector_difference_below(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TempData.LevelData)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_geoheight();
  inline void clear_has_geoheight();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_temperature_sign();
  inline void clear_has_temperature_sign();
  inline void set_has_dew_point();
  inline void clear_has_dew_point();
  inline void set_has_wind_direction();
  inline void clear_has_wind_direction();
  inline void set_has_wind_speed();
  inline void clear_has_wind_speed();
  inline void set_has_is_relative_topography_map();
  inline void clear_has_is_relative_topography_map();
  inline void set_has_isobaric_height_500();
  inline void clear_has_isobaric_height_500();
  inline void set_has_isobaric_height_1000();
  inline void clear_has_isobaric_height_1000();
  inline void set_has_abs_geoheight_changing_12();
  inline void clear_has_abs_geoheight_changing_12();
  inline void set_has_abs_geoheight_changing_24();
  inline void clear_has_abs_geoheight_changing_24();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_vector_difference_above();
  inline void clear_has_vector_difference_above();
  inline void set_has_vector_difference_below();
  inline void clear_has_vector_difference_below();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 geoheight_;
  double temperature_;
  double dew_point_;
  ::google::protobuf::int32 temperature_sign_;
  ::google::protobuf::int32 wind_direction_;
  ::google::protobuf::int32 wind_speed_;
  bool is_relative_topography_map_;
  ::google::protobuf::int32 isobaric_height_500_;
  ::google::protobuf::int32 isobaric_height_1000_;
  ::google::protobuf::int32 abs_geoheight_changing_12_;
  ::google::protobuf::int32 abs_geoheight_changing_24_;
  ::google::protobuf::int32 pressure_;
  ::google::protobuf::int32 vector_difference_above_;
  ::google::protobuf::int32 vector_difference_below_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_temp_2ddata_2eproto();
  friend void protobuf_AssignDesc_temp_2ddata_2eproto();
  friend void protobuf_ShutdownFile_temp_2ddata_2eproto();
  
  void InitAsDefaultInstance();
  static TempData_LevelData* default_instance_;
};
// -------------------------------------------------------------------

class TempData : public ::google::protobuf::Message {
 public:
  TempData();
  virtual ~TempData();
  
  TempData(const TempData& from);
  
  inline TempData& operator=(const TempData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TempData& default_instance();
  
  void Swap(TempData* other);
  
  // implements Message ----------------------------------------------
  
  TempData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TempData& from);
  void MergeFrom(const TempData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TempData_LevelData LevelData;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uid_station = 1;
  inline bool has_uid_station() const;
  inline void clear_uid_station();
  static const int kUidStationFieldNumber = 1;
  inline ::google::protobuf::uint32 uid_station() const;
  inline void set_uid_station(::google::protobuf::uint32 value);
  
  // required string day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline const ::std::string& day() const;
  inline void set_day(const ::std::string& value);
  inline void set_day(const char* value);
  inline void set_day(const char* value, size_t size);
  inline ::std::string* mutable_day();
  inline ::std::string* release_day();
  
  // required uint32 hour = 3;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 3;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);
  
  // required double station_latitude = 4;
  inline bool has_station_latitude() const;
  inline void clear_station_latitude();
  static const int kStationLatitudeFieldNumber = 4;
  inline double station_latitude() const;
  inline void set_station_latitude(double value);
  
  // required double station_longitude = 5;
  inline bool has_station_longitude() const;
  inline void clear_station_longitude();
  static const int kStationLongitudeFieldNumber = 5;
  inline double station_longitude() const;
  inline void set_station_longitude(double value);
  
  // optional bool wind_speed_in_knots = 6;
  inline bool has_wind_speed_in_knots() const;
  inline void clear_wind_speed_in_knots();
  static const int kWindSpeedInKnotsFieldNumber = 6;
  inline bool wind_speed_in_knots() const;
  inline void set_wind_speed_in_knots(bool value);
  
  // optional int32 marsden_square_number = 7;
  inline bool has_marsden_square_number() const;
  inline void clear_marsden_square_number();
  static const int kMarsdenSquareNumberFieldNumber = 7;
  inline ::google::protobuf::int32 marsden_square_number() const;
  inline void set_marsden_square_number(::google::protobuf::int32 value);
  
  // optional double mobile_land_station_elevation = 8;
  inline bool has_mobile_land_station_elevation() const;
  inline void clear_mobile_land_station_elevation();
  static const int kMobileLandStationElevationFieldNumber = 8;
  inline double mobile_land_station_elevation() const;
  inline void set_mobile_land_station_elevation(double value);
  
  // optional int32 confidence_factor = 9;
  inline bool has_confidence_factor() const;
  inline void clear_confidence_factor();
  static const int kConfidenceFactorFieldNumber = 9;
  inline ::google::protobuf::int32 confidence_factor() const;
  inline void set_confidence_factor(::google::protobuf::int32 value);
  
  // required uint32 uid_transmet_raw_datum = 38;
  inline bool has_uid_transmet_raw_datum() const;
  inline void clear_uid_transmet_raw_datum();
  static const int kUidTransmetRawDatumFieldNumber = 38;
  inline ::google::protobuf::uint32 uid_transmet_raw_datum() const;
  inline void set_uid_transmet_raw_datum(::google::protobuf::uint32 value);
  
  // optional uint32 cloud_amount_low_or_middle = 10;
  inline bool has_cloud_amount_low_or_middle() const;
  inline void clear_cloud_amount_low_or_middle();
  static const int kCloudAmountLowOrMiddleFieldNumber = 10;
  inline ::google::protobuf::uint32 cloud_amount_low_or_middle() const;
  inline void set_cloud_amount_low_or_middle(::google::protobuf::uint32 value);
  
  // optional string cloud_high_type = 11;
  inline bool has_cloud_high_type() const;
  inline void clear_cloud_high_type();
  static const int kCloudHighTypeFieldNumber = 11;
  inline const ::std::string& cloud_high_type() const;
  inline void set_cloud_high_type(const ::std::string& value);
  inline void set_cloud_high_type(const char* value);
  inline void set_cloud_high_type(const char* value, size_t size);
  inline ::std::string* mutable_cloud_high_type();
  inline ::std::string* release_cloud_high_type();
  
  // optional string cloud_lower_type = 12;
  inline bool has_cloud_lower_type() const;
  inline void clear_cloud_lower_type();
  static const int kCloudLowerTypeFieldNumber = 12;
  inline const ::std::string& cloud_lower_type() const;
  inline void set_cloud_lower_type(const ::std::string& value);
  inline void set_cloud_lower_type(const char* value);
  inline void set_cloud_lower_type(const char* value, size_t size);
  inline ::std::string* mutable_cloud_lower_type();
  inline ::std::string* release_cloud_lower_type();
  
  // optional string cloud_middle_type = 13;
  inline bool has_cloud_middle_type() const;
  inline void clear_cloud_middle_type();
  static const int kCloudMiddleTypeFieldNumber = 13;
  inline const ::std::string& cloud_middle_type() const;
  inline void set_cloud_middle_type(const ::std::string& value);
  inline void set_cloud_middle_type(const char* value);
  inline void set_cloud_middle_type(const char* value, size_t size);
  inline ::std::string* mutable_cloud_middle_type();
  inline ::std::string* release_cloud_middle_type();
  
  // optional string launch_or_release_sonde_time = 14;
  inline bool has_launch_or_release_sonde_time() const;
  inline void clear_launch_or_release_sonde_time();
  static const int kLaunchOrReleaseSondeTimeFieldNumber = 14;
  inline const ::std::string& launch_or_release_sonde_time() const;
  inline void set_launch_or_release_sonde_time(const ::std::string& value);
  inline void set_launch_or_release_sonde_time(const char* value);
  inline void set_launch_or_release_sonde_time(const char* value, size_t size);
  inline ::std::string* mutable_launch_or_release_sonde_time();
  inline ::std::string* release_launch_or_release_sonde_time();
  
  // optional int32 lowest_clouds_height = 16;
  inline bool has_lowest_clouds_height() const;
  inline void clear_lowest_clouds_height();
  static const int kLowestCloudsHeightFieldNumber = 16;
  inline ::google::protobuf::int32 lowest_clouds_height() const;
  inline void set_lowest_clouds_height(::google::protobuf::int32 value);
  
  // optional double max_wind_level_pressure = 17;
  inline bool has_max_wind_level_pressure() const;
  inline void clear_max_wind_level_pressure();
  static const int kMaxWindLevelPressureFieldNumber = 17;
  inline double max_wind_level_pressure() const;
  inline void set_max_wind_level_pressure(double value);
  
  // optional int32 max_wind_level_wind_direction = 18;
  inline bool has_max_wind_level_wind_direction() const;
  inline void clear_max_wind_level_wind_direction();
  static const int kMaxWindLevelWindDirectionFieldNumber = 18;
  inline ::google::protobuf::int32 max_wind_level_wind_direction() const;
  inline void set_max_wind_level_wind_direction(::google::protobuf::int32 value);
  
  // optional double max_wind_level_wind_speed = 19;
  inline bool has_max_wind_level_wind_speed() const;
  inline void clear_max_wind_level_wind_speed();
  static const int kMaxWindLevelWindSpeedFieldNumber = 19;
  inline double max_wind_level_wind_speed() const;
  inline void set_max_wind_level_wind_speed(double value);
  
  // optional uint32 radiation_correction = 20;
  inline bool has_radiation_correction() const;
  inline void clear_radiation_correction();
  static const int kRadiationCorrectionFieldNumber = 20;
  inline ::google::protobuf::uint32 radiation_correction() const;
  inline void set_radiation_correction(::google::protobuf::uint32 value);
  
  // optional double sea_surface_temperature = 21;
  inline bool has_sea_surface_temperature() const;
  inline void clear_sea_surface_temperature();
  static const int kSeaSurfaceTemperatureFieldNumber = 21;
  inline double sea_surface_temperature() const;
  inline void set_sea_surface_temperature(double value);
  
  // repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
  inline int significant_levels_respect_to_temperature_size() const;
  inline void clear_significant_levels_respect_to_temperature();
  static const int kSignificantLevelsRespectToTemperatureFieldNumber = 22;
  inline const ::TempData_LevelData& significant_levels_respect_to_temperature(int index) const;
  inline ::TempData_LevelData* mutable_significant_levels_respect_to_temperature(int index);
  inline ::TempData_LevelData* add_significant_levels_respect_to_temperature();
  inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
      significant_levels_respect_to_temperature() const;
  inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
      mutable_significant_levels_respect_to_temperature();
  
  // repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
  inline int significant_levels_respect_to_wind_size() const;
  inline void clear_significant_levels_respect_to_wind();
  static const int kSignificantLevelsRespectToWindFieldNumber = 23;
  inline const ::TempData_LevelData& significant_levels_respect_to_wind(int index) const;
  inline ::TempData_LevelData* mutable_significant_levels_respect_to_wind(int index);
  inline ::TempData_LevelData* add_significant_levels_respect_to_wind();
  inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
      significant_levels_respect_to_wind() const;
  inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
      mutable_significant_levels_respect_to_wind();
  
  // optional int32 sonde_system = 24;
  inline bool has_sonde_system() const;
  inline void clear_sonde_system();
  static const int kSondeSystemFieldNumber = 24;
  inline ::google::protobuf::int32 sonde_system() const;
  inline void set_sonde_system(::google::protobuf::int32 value);
  
  // optional int32 sonde_tracking = 25;
  inline bool has_sonde_tracking() const;
  inline void clear_sonde_tracking();
  static const int kSondeTrackingFieldNumber = 25;
  inline ::google::protobuf::int32 sonde_tracking() const;
  inline void set_sonde_tracking(::google::protobuf::int32 value);
  
  // optional .TempData.LevelData surface_data = 26;
  inline bool has_surface_data() const;
  inline void clear_surface_data();
  static const int kSurfaceDataFieldNumber = 26;
  inline const ::TempData_LevelData& surface_data() const;
  inline ::TempData_LevelData* mutable_surface_data();
  inline ::TempData_LevelData* release_surface_data();
  
  // repeated .TempData.LevelData standard_isobaric_surfaces = 27;
  inline int standard_isobaric_surfaces_size() const;
  inline void clear_standard_isobaric_surfaces();
  static const int kStandardIsobaricSurfacesFieldNumber = 27;
  inline const ::TempData_LevelData& standard_isobaric_surfaces(int index) const;
  inline ::TempData_LevelData* mutable_standard_isobaric_surfaces(int index);
  inline ::TempData_LevelData* add_standard_isobaric_surfaces();
  inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
      standard_isobaric_surfaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
      mutable_standard_isobaric_surfaces();
  
  // repeated .TempData.LevelData tropopause_data = 28;
  inline int tropopause_data_size() const;
  inline void clear_tropopause_data();
  static const int kTropopauseDataFieldNumber = 28;
  inline const ::TempData_LevelData& tropopause_data(int index) const;
  inline ::TempData_LevelData* mutable_tropopause_data(int index);
  inline ::TempData_LevelData* add_tropopause_data();
  inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
      tropopause_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
      mutable_tropopause_data();
  
  // repeated .TempData.LevelData maximum_wind_data = 29;
  inline int maximum_wind_data_size() const;
  inline void clear_maximum_wind_data();
  static const int kMaximumWindDataFieldNumber = 29;
  inline const ::TempData_LevelData& maximum_wind_data(int index) const;
  inline ::TempData_LevelData* mutable_maximum_wind_data(int index);
  inline ::TempData_LevelData* add_maximum_wind_data();
  inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
      maximum_wind_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
      mutable_maximum_wind_data();
  
  // optional bool level_wind_speed_is_greatest = 30;
  inline bool has_level_wind_speed_is_greatest() const;
  inline void clear_level_wind_speed_is_greatest();
  static const int kLevelWindSpeedIsGreatestFieldNumber = 30;
  inline bool level_wind_speed_is_greatest() const;
  inline void set_level_wind_speed_is_greatest(bool value);
  
  // optional uint32 wmo_code = 31;
  inline bool has_wmo_code() const;
  inline void clear_wmo_code();
  static const int kWmoCodeFieldNumber = 31;
  inline ::google::protobuf::uint32 wmo_code() const;
  inline void set_wmo_code(::google::protobuf::uint32 value);
  
  // required int32 part_type = 41;
  inline bool has_part_type() const;
  inline void clear_part_type();
  static const int kPartTypeFieldNumber = 41;
  inline ::google::protobuf::int32 part_type() const;
  inline void set_part_type(::google::protobuf::int32 value);
  
  // optional .TempData.LevelData leveldata = 42;
  inline bool has_leveldata() const;
  inline void clear_leveldata();
  static const int kLeveldataFieldNumber = 42;
  inline const ::TempData_LevelData& leveldata() const;
  inline ::TempData_LevelData* mutable_leveldata();
  inline ::TempData_LevelData* release_leveldata();
  
  // @@protoc_insertion_point(class_scope:TempData)
 private:
  inline void set_has_uid_station();
  inline void clear_has_uid_station();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_station_latitude();
  inline void clear_has_station_latitude();
  inline void set_has_station_longitude();
  inline void clear_has_station_longitude();
  inline void set_has_wind_speed_in_knots();
  inline void clear_has_wind_speed_in_knots();
  inline void set_has_marsden_square_number();
  inline void clear_has_marsden_square_number();
  inline void set_has_mobile_land_station_elevation();
  inline void clear_has_mobile_land_station_elevation();
  inline void set_has_confidence_factor();
  inline void clear_has_confidence_factor();
  inline void set_has_uid_transmet_raw_datum();
  inline void clear_has_uid_transmet_raw_datum();
  inline void set_has_cloud_amount_low_or_middle();
  inline void clear_has_cloud_amount_low_or_middle();
  inline void set_has_cloud_high_type();
  inline void clear_has_cloud_high_type();
  inline void set_has_cloud_lower_type();
  inline void clear_has_cloud_lower_type();
  inline void set_has_cloud_middle_type();
  inline void clear_has_cloud_middle_type();
  inline void set_has_launch_or_release_sonde_time();
  inline void clear_has_launch_or_release_sonde_time();
  inline void set_has_lowest_clouds_height();
  inline void clear_has_lowest_clouds_height();
  inline void set_has_max_wind_level_pressure();
  inline void clear_has_max_wind_level_pressure();
  inline void set_has_max_wind_level_wind_direction();
  inline void clear_has_max_wind_level_wind_direction();
  inline void set_has_max_wind_level_wind_speed();
  inline void clear_has_max_wind_level_wind_speed();
  inline void set_has_radiation_correction();
  inline void clear_has_radiation_correction();
  inline void set_has_sea_surface_temperature();
  inline void clear_has_sea_surface_temperature();
  inline void set_has_sonde_system();
  inline void clear_has_sonde_system();
  inline void set_has_sonde_tracking();
  inline void clear_has_sonde_tracking();
  inline void set_has_surface_data();
  inline void clear_has_surface_data();
  inline void set_has_level_wind_speed_is_greatest();
  inline void clear_has_level_wind_speed_is_greatest();
  inline void set_has_wmo_code();
  inline void clear_has_wmo_code();
  inline void set_has_part_type();
  inline void clear_has_part_type();
  inline void set_has_leveldata();
  inline void clear_has_leveldata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_station_;
  ::google::protobuf::uint32 hour_;
  ::std::string* day_;
  double station_latitude_;
  double station_longitude_;
  double mobile_land_station_elevation_;
  ::google::protobuf::int32 marsden_square_number_;
  ::google::protobuf::int32 confidence_factor_;
  ::google::protobuf::uint32 uid_transmet_raw_datum_;
  ::google::protobuf::uint32 cloud_amount_low_or_middle_;
  ::std::string* cloud_high_type_;
  ::std::string* cloud_lower_type_;
  ::std::string* cloud_middle_type_;
  ::std::string* launch_or_release_sonde_time_;
  double max_wind_level_pressure_;
  ::google::protobuf::int32 lowest_clouds_height_;
  ::google::protobuf::int32 max_wind_level_wind_direction_;
  bool wind_speed_in_knots_;
  bool level_wind_speed_is_greatest_;
  ::google::protobuf::uint32 radiation_correction_;
  double max_wind_level_wind_speed_;
  double sea_surface_temperature_;
  ::google::protobuf::RepeatedPtrField< ::TempData_LevelData > significant_levels_respect_to_temperature_;
  ::google::protobuf::RepeatedPtrField< ::TempData_LevelData > significant_levels_respect_to_wind_;
  ::google::protobuf::int32 sonde_system_;
  ::google::protobuf::int32 sonde_tracking_;
  ::TempData_LevelData* surface_data_;
  ::google::protobuf::RepeatedPtrField< ::TempData_LevelData > standard_isobaric_surfaces_;
  ::google::protobuf::RepeatedPtrField< ::TempData_LevelData > tropopause_data_;
  ::google::protobuf::RepeatedPtrField< ::TempData_LevelData > maximum_wind_data_;
  ::google::protobuf::uint32 wmo_code_;
  ::google::protobuf::int32 part_type_;
  ::TempData_LevelData* leveldata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  friend void  protobuf_AddDesc_temp_2ddata_2eproto();
  friend void protobuf_AssignDesc_temp_2ddata_2eproto();
  friend void protobuf_ShutdownFile_temp_2ddata_2eproto();
  
  void InitAsDefaultInstance();
  static TempData* default_instance_;
};
// ===================================================================


// ===================================================================

// TempData_LevelData

// optional int32 level = 7;
inline bool TempData_LevelData::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TempData_LevelData::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TempData_LevelData::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TempData_LevelData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TempData_LevelData::level() const {
  return level_;
}
inline void TempData_LevelData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 geoheight = 1;
inline bool TempData_LevelData::has_geoheight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TempData_LevelData::set_has_geoheight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TempData_LevelData::clear_has_geoheight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TempData_LevelData::clear_geoheight() {
  geoheight_ = 0;
  clear_has_geoheight();
}
inline ::google::protobuf::int32 TempData_LevelData::geoheight() const {
  return geoheight_;
}
inline void TempData_LevelData::set_geoheight(::google::protobuf::int32 value) {
  set_has_geoheight();
  geoheight_ = value;
}

// optional double temperature = 2;
inline bool TempData_LevelData::has_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TempData_LevelData::set_has_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TempData_LevelData::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TempData_LevelData::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline double TempData_LevelData::temperature() const {
  return temperature_;
}
inline void TempData_LevelData::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
}

// optional int32 temperature_sign = 6;
inline bool TempData_LevelData::has_temperature_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TempData_LevelData::set_has_temperature_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TempData_LevelData::clear_has_temperature_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TempData_LevelData::clear_temperature_sign() {
  temperature_sign_ = 0;
  clear_has_temperature_sign();
}
inline ::google::protobuf::int32 TempData_LevelData::temperature_sign() const {
  return temperature_sign_;
}
inline void TempData_LevelData::set_temperature_sign(::google::protobuf::int32 value) {
  set_has_temperature_sign();
  temperature_sign_ = value;
}

// optional double dew_point = 3;
inline bool TempData_LevelData::has_dew_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TempData_LevelData::set_has_dew_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TempData_LevelData::clear_has_dew_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TempData_LevelData::clear_dew_point() {
  dew_point_ = 0;
  clear_has_dew_point();
}
inline double TempData_LevelData::dew_point() const {
  return dew_point_;
}
inline void TempData_LevelData::set_dew_point(double value) {
  set_has_dew_point();
  dew_point_ = value;
}

// optional int32 wind_direction = 4;
inline bool TempData_LevelData::has_wind_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TempData_LevelData::set_has_wind_direction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TempData_LevelData::clear_has_wind_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TempData_LevelData::clear_wind_direction() {
  wind_direction_ = 0;
  clear_has_wind_direction();
}
inline ::google::protobuf::int32 TempData_LevelData::wind_direction() const {
  return wind_direction_;
}
inline void TempData_LevelData::set_wind_direction(::google::protobuf::int32 value) {
  set_has_wind_direction();
  wind_direction_ = value;
}

// optional int32 wind_speed = 5;
inline bool TempData_LevelData::has_wind_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TempData_LevelData::set_has_wind_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TempData_LevelData::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TempData_LevelData::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline ::google::protobuf::int32 TempData_LevelData::wind_speed() const {
  return wind_speed_;
}
inline void TempData_LevelData::set_wind_speed(::google::protobuf::int32 value) {
  set_has_wind_speed();
  wind_speed_ = value;
}

// optional bool is_relative_topography_map = 8;
inline bool TempData_LevelData::has_is_relative_topography_map() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TempData_LevelData::set_has_is_relative_topography_map() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TempData_LevelData::clear_has_is_relative_topography_map() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TempData_LevelData::clear_is_relative_topography_map() {
  is_relative_topography_map_ = false;
  clear_has_is_relative_topography_map();
}
inline bool TempData_LevelData::is_relative_topography_map() const {
  return is_relative_topography_map_;
}
inline void TempData_LevelData::set_is_relative_topography_map(bool value) {
  set_has_is_relative_topography_map();
  is_relative_topography_map_ = value;
}

// optional int32 isobaric_height_500 = 9;
inline bool TempData_LevelData::has_isobaric_height_500() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TempData_LevelData::set_has_isobaric_height_500() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TempData_LevelData::clear_has_isobaric_height_500() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TempData_LevelData::clear_isobaric_height_500() {
  isobaric_height_500_ = 0;
  clear_has_isobaric_height_500();
}
inline ::google::protobuf::int32 TempData_LevelData::isobaric_height_500() const {
  return isobaric_height_500_;
}
inline void TempData_LevelData::set_isobaric_height_500(::google::protobuf::int32 value) {
  set_has_isobaric_height_500();
  isobaric_height_500_ = value;
}

// optional int32 isobaric_height_1000 = 10;
inline bool TempData_LevelData::has_isobaric_height_1000() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TempData_LevelData::set_has_isobaric_height_1000() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TempData_LevelData::clear_has_isobaric_height_1000() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TempData_LevelData::clear_isobaric_height_1000() {
  isobaric_height_1000_ = 0;
  clear_has_isobaric_height_1000();
}
inline ::google::protobuf::int32 TempData_LevelData::isobaric_height_1000() const {
  return isobaric_height_1000_;
}
inline void TempData_LevelData::set_isobaric_height_1000(::google::protobuf::int32 value) {
  set_has_isobaric_height_1000();
  isobaric_height_1000_ = value;
}

// optional int32 abs_geoheight_changing_12 = 11;
inline bool TempData_LevelData::has_abs_geoheight_changing_12() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TempData_LevelData::set_has_abs_geoheight_changing_12() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TempData_LevelData::clear_has_abs_geoheight_changing_12() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TempData_LevelData::clear_abs_geoheight_changing_12() {
  abs_geoheight_changing_12_ = 0;
  clear_has_abs_geoheight_changing_12();
}
inline ::google::protobuf::int32 TempData_LevelData::abs_geoheight_changing_12() const {
  return abs_geoheight_changing_12_;
}
inline void TempData_LevelData::set_abs_geoheight_changing_12(::google::protobuf::int32 value) {
  set_has_abs_geoheight_changing_12();
  abs_geoheight_changing_12_ = value;
}

// optional int32 abs_geoheight_changing_24 = 12;
inline bool TempData_LevelData::has_abs_geoheight_changing_24() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TempData_LevelData::set_has_abs_geoheight_changing_24() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TempData_LevelData::clear_has_abs_geoheight_changing_24() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TempData_LevelData::clear_abs_geoheight_changing_24() {
  abs_geoheight_changing_24_ = 0;
  clear_has_abs_geoheight_changing_24();
}
inline ::google::protobuf::int32 TempData_LevelData::abs_geoheight_changing_24() const {
  return abs_geoheight_changing_24_;
}
inline void TempData_LevelData::set_abs_geoheight_changing_24(::google::protobuf::int32 value) {
  set_has_abs_geoheight_changing_24();
  abs_geoheight_changing_24_ = value;
}

// optional int32 pressure = 13;
inline bool TempData_LevelData::has_pressure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TempData_LevelData::set_has_pressure() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TempData_LevelData::clear_has_pressure() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TempData_LevelData::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline ::google::protobuf::int32 TempData_LevelData::pressure() const {
  return pressure_;
}
inline void TempData_LevelData::set_pressure(::google::protobuf::int32 value) {
  set_has_pressure();
  pressure_ = value;
}

// optional int32 vector_difference_above = 14;
inline bool TempData_LevelData::has_vector_difference_above() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TempData_LevelData::set_has_vector_difference_above() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TempData_LevelData::clear_has_vector_difference_above() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TempData_LevelData::clear_vector_difference_above() {
  vector_difference_above_ = 0;
  clear_has_vector_difference_above();
}
inline ::google::protobuf::int32 TempData_LevelData::vector_difference_above() const {
  return vector_difference_above_;
}
inline void TempData_LevelData::set_vector_difference_above(::google::protobuf::int32 value) {
  set_has_vector_difference_above();
  vector_difference_above_ = value;
}

// optional int32 vector_difference_below = 15;
inline bool TempData_LevelData::has_vector_difference_below() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TempData_LevelData::set_has_vector_difference_below() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TempData_LevelData::clear_has_vector_difference_below() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TempData_LevelData::clear_vector_difference_below() {
  vector_difference_below_ = 0;
  clear_has_vector_difference_below();
}
inline ::google::protobuf::int32 TempData_LevelData::vector_difference_below() const {
  return vector_difference_below_;
}
inline void TempData_LevelData::set_vector_difference_below(::google::protobuf::int32 value) {
  set_has_vector_difference_below();
  vector_difference_below_ = value;
}

// -------------------------------------------------------------------

// TempData

// optional uint32 uid_station = 1;
inline bool TempData::has_uid_station() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TempData::set_has_uid_station() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TempData::clear_has_uid_station() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TempData::clear_uid_station() {
  uid_station_ = 0u;
  clear_has_uid_station();
}
inline ::google::protobuf::uint32 TempData::uid_station() const {
  return uid_station_;
}
inline void TempData::set_uid_station(::google::protobuf::uint32 value) {
  set_has_uid_station();
  uid_station_ = value;
}

// required string day = 2;
inline bool TempData::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TempData::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TempData::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TempData::clear_day() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    day_->clear();
  }
  clear_has_day();
}
inline const ::std::string& TempData::day() const {
  return *day_;
}
inline void TempData::set_day(const ::std::string& value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void TempData::set_day(const char* value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void TempData::set_day(const char* value, size_t size) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TempData::mutable_day() {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  return day_;
}
inline ::std::string* TempData::release_day() {
  clear_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = day_;
    day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 hour = 3;
inline bool TempData::has_hour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TempData::set_has_hour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TempData::clear_has_hour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TempData::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 TempData::hour() const {
  return hour_;
}
inline void TempData::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
}

// required double station_latitude = 4;
inline bool TempData::has_station_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TempData::set_has_station_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TempData::clear_has_station_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TempData::clear_station_latitude() {
  station_latitude_ = 0;
  clear_has_station_latitude();
}
inline double TempData::station_latitude() const {
  return station_latitude_;
}
inline void TempData::set_station_latitude(double value) {
  set_has_station_latitude();
  station_latitude_ = value;
}

// required double station_longitude = 5;
inline bool TempData::has_station_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TempData::set_has_station_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TempData::clear_has_station_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TempData::clear_station_longitude() {
  station_longitude_ = 0;
  clear_has_station_longitude();
}
inline double TempData::station_longitude() const {
  return station_longitude_;
}
inline void TempData::set_station_longitude(double value) {
  set_has_station_longitude();
  station_longitude_ = value;
}

// optional bool wind_speed_in_knots = 6;
inline bool TempData::has_wind_speed_in_knots() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TempData::set_has_wind_speed_in_knots() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TempData::clear_has_wind_speed_in_knots() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TempData::clear_wind_speed_in_knots() {
  wind_speed_in_knots_ = false;
  clear_has_wind_speed_in_knots();
}
inline bool TempData::wind_speed_in_knots() const {
  return wind_speed_in_knots_;
}
inline void TempData::set_wind_speed_in_knots(bool value) {
  set_has_wind_speed_in_knots();
  wind_speed_in_knots_ = value;
}

// optional int32 marsden_square_number = 7;
inline bool TempData::has_marsden_square_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TempData::set_has_marsden_square_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TempData::clear_has_marsden_square_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TempData::clear_marsden_square_number() {
  marsden_square_number_ = 0;
  clear_has_marsden_square_number();
}
inline ::google::protobuf::int32 TempData::marsden_square_number() const {
  return marsden_square_number_;
}
inline void TempData::set_marsden_square_number(::google::protobuf::int32 value) {
  set_has_marsden_square_number();
  marsden_square_number_ = value;
}

// optional double mobile_land_station_elevation = 8;
inline bool TempData::has_mobile_land_station_elevation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TempData::set_has_mobile_land_station_elevation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TempData::clear_has_mobile_land_station_elevation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TempData::clear_mobile_land_station_elevation() {
  mobile_land_station_elevation_ = 0;
  clear_has_mobile_land_station_elevation();
}
inline double TempData::mobile_land_station_elevation() const {
  return mobile_land_station_elevation_;
}
inline void TempData::set_mobile_land_station_elevation(double value) {
  set_has_mobile_land_station_elevation();
  mobile_land_station_elevation_ = value;
}

// optional int32 confidence_factor = 9;
inline bool TempData::has_confidence_factor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TempData::set_has_confidence_factor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TempData::clear_has_confidence_factor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TempData::clear_confidence_factor() {
  confidence_factor_ = 0;
  clear_has_confidence_factor();
}
inline ::google::protobuf::int32 TempData::confidence_factor() const {
  return confidence_factor_;
}
inline void TempData::set_confidence_factor(::google::protobuf::int32 value) {
  set_has_confidence_factor();
  confidence_factor_ = value;
}

// required uint32 uid_transmet_raw_datum = 38;
inline bool TempData::has_uid_transmet_raw_datum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TempData::set_has_uid_transmet_raw_datum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TempData::clear_has_uid_transmet_raw_datum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TempData::clear_uid_transmet_raw_datum() {
  uid_transmet_raw_datum_ = 0u;
  clear_has_uid_transmet_raw_datum();
}
inline ::google::protobuf::uint32 TempData::uid_transmet_raw_datum() const {
  return uid_transmet_raw_datum_;
}
inline void TempData::set_uid_transmet_raw_datum(::google::protobuf::uint32 value) {
  set_has_uid_transmet_raw_datum();
  uid_transmet_raw_datum_ = value;
}

// optional uint32 cloud_amount_low_or_middle = 10;
inline bool TempData::has_cloud_amount_low_or_middle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TempData::set_has_cloud_amount_low_or_middle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TempData::clear_has_cloud_amount_low_or_middle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TempData::clear_cloud_amount_low_or_middle() {
  cloud_amount_low_or_middle_ = 0u;
  clear_has_cloud_amount_low_or_middle();
}
inline ::google::protobuf::uint32 TempData::cloud_amount_low_or_middle() const {
  return cloud_amount_low_or_middle_;
}
inline void TempData::set_cloud_amount_low_or_middle(::google::protobuf::uint32 value) {
  set_has_cloud_amount_low_or_middle();
  cloud_amount_low_or_middle_ = value;
}

// optional string cloud_high_type = 11;
inline bool TempData::has_cloud_high_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TempData::set_has_cloud_high_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TempData::clear_has_cloud_high_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TempData::clear_cloud_high_type() {
  if (cloud_high_type_ != &::google::protobuf::internal::kEmptyString) {
    cloud_high_type_->clear();
  }
  clear_has_cloud_high_type();
}
inline const ::std::string& TempData::cloud_high_type() const {
  return *cloud_high_type_;
}
inline void TempData::set_cloud_high_type(const ::std::string& value) {
  set_has_cloud_high_type();
  if (cloud_high_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_high_type_ = new ::std::string;
  }
  cloud_high_type_->assign(value);
}
inline void TempData::set_cloud_high_type(const char* value) {
  set_has_cloud_high_type();
  if (cloud_high_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_high_type_ = new ::std::string;
  }
  cloud_high_type_->assign(value);
}
inline void TempData::set_cloud_high_type(const char* value, size_t size) {
  set_has_cloud_high_type();
  if (cloud_high_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_high_type_ = new ::std::string;
  }
  cloud_high_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TempData::mutable_cloud_high_type() {
  set_has_cloud_high_type();
  if (cloud_high_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_high_type_ = new ::std::string;
  }
  return cloud_high_type_;
}
inline ::std::string* TempData::release_cloud_high_type() {
  clear_has_cloud_high_type();
  if (cloud_high_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cloud_high_type_;
    cloud_high_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cloud_lower_type = 12;
inline bool TempData::has_cloud_lower_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TempData::set_has_cloud_lower_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TempData::clear_has_cloud_lower_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TempData::clear_cloud_lower_type() {
  if (cloud_lower_type_ != &::google::protobuf::internal::kEmptyString) {
    cloud_lower_type_->clear();
  }
  clear_has_cloud_lower_type();
}
inline const ::std::string& TempData::cloud_lower_type() const {
  return *cloud_lower_type_;
}
inline void TempData::set_cloud_lower_type(const ::std::string& value) {
  set_has_cloud_lower_type();
  if (cloud_lower_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_lower_type_ = new ::std::string;
  }
  cloud_lower_type_->assign(value);
}
inline void TempData::set_cloud_lower_type(const char* value) {
  set_has_cloud_lower_type();
  if (cloud_lower_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_lower_type_ = new ::std::string;
  }
  cloud_lower_type_->assign(value);
}
inline void TempData::set_cloud_lower_type(const char* value, size_t size) {
  set_has_cloud_lower_type();
  if (cloud_lower_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_lower_type_ = new ::std::string;
  }
  cloud_lower_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TempData::mutable_cloud_lower_type() {
  set_has_cloud_lower_type();
  if (cloud_lower_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_lower_type_ = new ::std::string;
  }
  return cloud_lower_type_;
}
inline ::std::string* TempData::release_cloud_lower_type() {
  clear_has_cloud_lower_type();
  if (cloud_lower_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cloud_lower_type_;
    cloud_lower_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cloud_middle_type = 13;
inline bool TempData::has_cloud_middle_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TempData::set_has_cloud_middle_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TempData::clear_has_cloud_middle_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TempData::clear_cloud_middle_type() {
  if (cloud_middle_type_ != &::google::protobuf::internal::kEmptyString) {
    cloud_middle_type_->clear();
  }
  clear_has_cloud_middle_type();
}
inline const ::std::string& TempData::cloud_middle_type() const {
  return *cloud_middle_type_;
}
inline void TempData::set_cloud_middle_type(const ::std::string& value) {
  set_has_cloud_middle_type();
  if (cloud_middle_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_middle_type_ = new ::std::string;
  }
  cloud_middle_type_->assign(value);
}
inline void TempData::set_cloud_middle_type(const char* value) {
  set_has_cloud_middle_type();
  if (cloud_middle_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_middle_type_ = new ::std::string;
  }
  cloud_middle_type_->assign(value);
}
inline void TempData::set_cloud_middle_type(const char* value, size_t size) {
  set_has_cloud_middle_type();
  if (cloud_middle_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_middle_type_ = new ::std::string;
  }
  cloud_middle_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TempData::mutable_cloud_middle_type() {
  set_has_cloud_middle_type();
  if (cloud_middle_type_ == &::google::protobuf::internal::kEmptyString) {
    cloud_middle_type_ = new ::std::string;
  }
  return cloud_middle_type_;
}
inline ::std::string* TempData::release_cloud_middle_type() {
  clear_has_cloud_middle_type();
  if (cloud_middle_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cloud_middle_type_;
    cloud_middle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string launch_or_release_sonde_time = 14;
inline bool TempData::has_launch_or_release_sonde_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TempData::set_has_launch_or_release_sonde_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TempData::clear_has_launch_or_release_sonde_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TempData::clear_launch_or_release_sonde_time() {
  if (launch_or_release_sonde_time_ != &::google::protobuf::internal::kEmptyString) {
    launch_or_release_sonde_time_->clear();
  }
  clear_has_launch_or_release_sonde_time();
}
inline const ::std::string& TempData::launch_or_release_sonde_time() const {
  return *launch_or_release_sonde_time_;
}
inline void TempData::set_launch_or_release_sonde_time(const ::std::string& value) {
  set_has_launch_or_release_sonde_time();
  if (launch_or_release_sonde_time_ == &::google::protobuf::internal::kEmptyString) {
    launch_or_release_sonde_time_ = new ::std::string;
  }
  launch_or_release_sonde_time_->assign(value);
}
inline void TempData::set_launch_or_release_sonde_time(const char* value) {
  set_has_launch_or_release_sonde_time();
  if (launch_or_release_sonde_time_ == &::google::protobuf::internal::kEmptyString) {
    launch_or_release_sonde_time_ = new ::std::string;
  }
  launch_or_release_sonde_time_->assign(value);
}
inline void TempData::set_launch_or_release_sonde_time(const char* value, size_t size) {
  set_has_launch_or_release_sonde_time();
  if (launch_or_release_sonde_time_ == &::google::protobuf::internal::kEmptyString) {
    launch_or_release_sonde_time_ = new ::std::string;
  }
  launch_or_release_sonde_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TempData::mutable_launch_or_release_sonde_time() {
  set_has_launch_or_release_sonde_time();
  if (launch_or_release_sonde_time_ == &::google::protobuf::internal::kEmptyString) {
    launch_or_release_sonde_time_ = new ::std::string;
  }
  return launch_or_release_sonde_time_;
}
inline ::std::string* TempData::release_launch_or_release_sonde_time() {
  clear_has_launch_or_release_sonde_time();
  if (launch_or_release_sonde_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = launch_or_release_sonde_time_;
    launch_or_release_sonde_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lowest_clouds_height = 16;
inline bool TempData::has_lowest_clouds_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TempData::set_has_lowest_clouds_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TempData::clear_has_lowest_clouds_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TempData::clear_lowest_clouds_height() {
  lowest_clouds_height_ = 0;
  clear_has_lowest_clouds_height();
}
inline ::google::protobuf::int32 TempData::lowest_clouds_height() const {
  return lowest_clouds_height_;
}
inline void TempData::set_lowest_clouds_height(::google::protobuf::int32 value) {
  set_has_lowest_clouds_height();
  lowest_clouds_height_ = value;
}

// optional double max_wind_level_pressure = 17;
inline bool TempData::has_max_wind_level_pressure() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TempData::set_has_max_wind_level_pressure() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TempData::clear_has_max_wind_level_pressure() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TempData::clear_max_wind_level_pressure() {
  max_wind_level_pressure_ = 0;
  clear_has_max_wind_level_pressure();
}
inline double TempData::max_wind_level_pressure() const {
  return max_wind_level_pressure_;
}
inline void TempData::set_max_wind_level_pressure(double value) {
  set_has_max_wind_level_pressure();
  max_wind_level_pressure_ = value;
}

// optional int32 max_wind_level_wind_direction = 18;
inline bool TempData::has_max_wind_level_wind_direction() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TempData::set_has_max_wind_level_wind_direction() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TempData::clear_has_max_wind_level_wind_direction() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TempData::clear_max_wind_level_wind_direction() {
  max_wind_level_wind_direction_ = 0;
  clear_has_max_wind_level_wind_direction();
}
inline ::google::protobuf::int32 TempData::max_wind_level_wind_direction() const {
  return max_wind_level_wind_direction_;
}
inline void TempData::set_max_wind_level_wind_direction(::google::protobuf::int32 value) {
  set_has_max_wind_level_wind_direction();
  max_wind_level_wind_direction_ = value;
}

// optional double max_wind_level_wind_speed = 19;
inline bool TempData::has_max_wind_level_wind_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TempData::set_has_max_wind_level_wind_speed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TempData::clear_has_max_wind_level_wind_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TempData::clear_max_wind_level_wind_speed() {
  max_wind_level_wind_speed_ = 0;
  clear_has_max_wind_level_wind_speed();
}
inline double TempData::max_wind_level_wind_speed() const {
  return max_wind_level_wind_speed_;
}
inline void TempData::set_max_wind_level_wind_speed(double value) {
  set_has_max_wind_level_wind_speed();
  max_wind_level_wind_speed_ = value;
}

// optional uint32 radiation_correction = 20;
inline bool TempData::has_radiation_correction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TempData::set_has_radiation_correction() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TempData::clear_has_radiation_correction() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TempData::clear_radiation_correction() {
  radiation_correction_ = 0u;
  clear_has_radiation_correction();
}
inline ::google::protobuf::uint32 TempData::radiation_correction() const {
  return radiation_correction_;
}
inline void TempData::set_radiation_correction(::google::protobuf::uint32 value) {
  set_has_radiation_correction();
  radiation_correction_ = value;
}

// optional double sea_surface_temperature = 21;
inline bool TempData::has_sea_surface_temperature() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TempData::set_has_sea_surface_temperature() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TempData::clear_has_sea_surface_temperature() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TempData::clear_sea_surface_temperature() {
  sea_surface_temperature_ = 0;
  clear_has_sea_surface_temperature();
}
inline double TempData::sea_surface_temperature() const {
  return sea_surface_temperature_;
}
inline void TempData::set_sea_surface_temperature(double value) {
  set_has_sea_surface_temperature();
  sea_surface_temperature_ = value;
}

// repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
inline int TempData::significant_levels_respect_to_temperature_size() const {
  return significant_levels_respect_to_temperature_.size();
}
inline void TempData::clear_significant_levels_respect_to_temperature() {
  significant_levels_respect_to_temperature_.Clear();
}
inline const ::TempData_LevelData& TempData::significant_levels_respect_to_temperature(int index) const {
  return significant_levels_respect_to_temperature_.Get(index);
}
inline ::TempData_LevelData* TempData::mutable_significant_levels_respect_to_temperature(int index) {
  return significant_levels_respect_to_temperature_.Mutable(index);
}
inline ::TempData_LevelData* TempData::add_significant_levels_respect_to_temperature() {
  return significant_levels_respect_to_temperature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
TempData::significant_levels_respect_to_temperature() const {
  return significant_levels_respect_to_temperature_;
}
inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
TempData::mutable_significant_levels_respect_to_temperature() {
  return &significant_levels_respect_to_temperature_;
}

// repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
inline int TempData::significant_levels_respect_to_wind_size() const {
  return significant_levels_respect_to_wind_.size();
}
inline void TempData::clear_significant_levels_respect_to_wind() {
  significant_levels_respect_to_wind_.Clear();
}
inline const ::TempData_LevelData& TempData::significant_levels_respect_to_wind(int index) const {
  return significant_levels_respect_to_wind_.Get(index);
}
inline ::TempData_LevelData* TempData::mutable_significant_levels_respect_to_wind(int index) {
  return significant_levels_respect_to_wind_.Mutable(index);
}
inline ::TempData_LevelData* TempData::add_significant_levels_respect_to_wind() {
  return significant_levels_respect_to_wind_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
TempData::significant_levels_respect_to_wind() const {
  return significant_levels_respect_to_wind_;
}
inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
TempData::mutable_significant_levels_respect_to_wind() {
  return &significant_levels_respect_to_wind_;
}

// optional int32 sonde_system = 24;
inline bool TempData::has_sonde_system() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TempData::set_has_sonde_system() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TempData::clear_has_sonde_system() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TempData::clear_sonde_system() {
  sonde_system_ = 0;
  clear_has_sonde_system();
}
inline ::google::protobuf::int32 TempData::sonde_system() const {
  return sonde_system_;
}
inline void TempData::set_sonde_system(::google::protobuf::int32 value) {
  set_has_sonde_system();
  sonde_system_ = value;
}

// optional int32 sonde_tracking = 25;
inline bool TempData::has_sonde_tracking() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TempData::set_has_sonde_tracking() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TempData::clear_has_sonde_tracking() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TempData::clear_sonde_tracking() {
  sonde_tracking_ = 0;
  clear_has_sonde_tracking();
}
inline ::google::protobuf::int32 TempData::sonde_tracking() const {
  return sonde_tracking_;
}
inline void TempData::set_sonde_tracking(::google::protobuf::int32 value) {
  set_has_sonde_tracking();
  sonde_tracking_ = value;
}

// optional .TempData.LevelData surface_data = 26;
inline bool TempData::has_surface_data() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TempData::set_has_surface_data() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TempData::clear_has_surface_data() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TempData::clear_surface_data() {
  if (surface_data_ != NULL) surface_data_->::TempData_LevelData::Clear();
  clear_has_surface_data();
}
inline const ::TempData_LevelData& TempData::surface_data() const {
  return surface_data_ != NULL ? *surface_data_ : *default_instance_->surface_data_;
}
inline ::TempData_LevelData* TempData::mutable_surface_data() {
  set_has_surface_data();
  if (surface_data_ == NULL) surface_data_ = new ::TempData_LevelData;
  return surface_data_;
}
inline ::TempData_LevelData* TempData::release_surface_data() {
  clear_has_surface_data();
  ::TempData_LevelData* temp = surface_data_;
  surface_data_ = NULL;
  return temp;
}

// repeated .TempData.LevelData standard_isobaric_surfaces = 27;
inline int TempData::standard_isobaric_surfaces_size() const {
  return standard_isobaric_surfaces_.size();
}
inline void TempData::clear_standard_isobaric_surfaces() {
  standard_isobaric_surfaces_.Clear();
}
inline const ::TempData_LevelData& TempData::standard_isobaric_surfaces(int index) const {
  return standard_isobaric_surfaces_.Get(index);
}
inline ::TempData_LevelData* TempData::mutable_standard_isobaric_surfaces(int index) {
  return standard_isobaric_surfaces_.Mutable(index);
}
inline ::TempData_LevelData* TempData::add_standard_isobaric_surfaces() {
  return standard_isobaric_surfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
TempData::standard_isobaric_surfaces() const {
  return standard_isobaric_surfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
TempData::mutable_standard_isobaric_surfaces() {
  return &standard_isobaric_surfaces_;
}

// repeated .TempData.LevelData tropopause_data = 28;
inline int TempData::tropopause_data_size() const {
  return tropopause_data_.size();
}
inline void TempData::clear_tropopause_data() {
  tropopause_data_.Clear();
}
inline const ::TempData_LevelData& TempData::tropopause_data(int index) const {
  return tropopause_data_.Get(index);
}
inline ::TempData_LevelData* TempData::mutable_tropopause_data(int index) {
  return tropopause_data_.Mutable(index);
}
inline ::TempData_LevelData* TempData::add_tropopause_data() {
  return tropopause_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
TempData::tropopause_data() const {
  return tropopause_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
TempData::mutable_tropopause_data() {
  return &tropopause_data_;
}

// repeated .TempData.LevelData maximum_wind_data = 29;
inline int TempData::maximum_wind_data_size() const {
  return maximum_wind_data_.size();
}
inline void TempData::clear_maximum_wind_data() {
  maximum_wind_data_.Clear();
}
inline const ::TempData_LevelData& TempData::maximum_wind_data(int index) const {
  return maximum_wind_data_.Get(index);
}
inline ::TempData_LevelData* TempData::mutable_maximum_wind_data(int index) {
  return maximum_wind_data_.Mutable(index);
}
inline ::TempData_LevelData* TempData::add_maximum_wind_data() {
  return maximum_wind_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >&
TempData::maximum_wind_data() const {
  return maximum_wind_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::TempData_LevelData >*
TempData::mutable_maximum_wind_data() {
  return &maximum_wind_data_;
}

// optional bool level_wind_speed_is_greatest = 30;
inline bool TempData::has_level_wind_speed_is_greatest() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TempData::set_has_level_wind_speed_is_greatest() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TempData::clear_has_level_wind_speed_is_greatest() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TempData::clear_level_wind_speed_is_greatest() {
  level_wind_speed_is_greatest_ = false;
  clear_has_level_wind_speed_is_greatest();
}
inline bool TempData::level_wind_speed_is_greatest() const {
  return level_wind_speed_is_greatest_;
}
inline void TempData::set_level_wind_speed_is_greatest(bool value) {
  set_has_level_wind_speed_is_greatest();
  level_wind_speed_is_greatest_ = value;
}

// optional uint32 wmo_code = 31;
inline bool TempData::has_wmo_code() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TempData::set_has_wmo_code() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TempData::clear_has_wmo_code() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TempData::clear_wmo_code() {
  wmo_code_ = 0u;
  clear_has_wmo_code();
}
inline ::google::protobuf::uint32 TempData::wmo_code() const {
  return wmo_code_;
}
inline void TempData::set_wmo_code(::google::protobuf::uint32 value) {
  set_has_wmo_code();
  wmo_code_ = value;
}

// required int32 part_type = 41;
inline bool TempData::has_part_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TempData::set_has_part_type() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TempData::clear_has_part_type() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TempData::clear_part_type() {
  part_type_ = 0;
  clear_has_part_type();
}
inline ::google::protobuf::int32 TempData::part_type() const {
  return part_type_;
}
inline void TempData::set_part_type(::google::protobuf::int32 value) {
  set_has_part_type();
  part_type_ = value;
}

// optional .TempData.LevelData leveldata = 42;
inline bool TempData::has_leveldata() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TempData::set_has_leveldata() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TempData::clear_has_leveldata() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TempData::clear_leveldata() {
  if (leveldata_ != NULL) leveldata_->::TempData_LevelData::Clear();
  clear_has_leveldata();
}
inline const ::TempData_LevelData& TempData::leveldata() const {
  return leveldata_ != NULL ? *leveldata_ : *default_instance_->leveldata_;
}
inline ::TempData_LevelData* TempData::mutable_leveldata() {
  set_has_leveldata();
  if (leveldata_ == NULL) leveldata_ = new ::TempData_LevelData;
  return leveldata_;
}
inline ::TempData_LevelData* TempData::release_leveldata() {
  clear_has_leveldata();
  ::TempData_LevelData* temp = leveldata_;
  leveldata_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_temp_2ddata_2eproto__INCLUDED
