// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: synop-data.proto

#ifndef PROTOBUF_synop_2ddata_2eproto__INCLUDED
#define PROTOBUF_synop_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_synop_2ddata_2eproto();
void protobuf_AssignDesc_synop_2ddata_2eproto();
void protobuf_ShutdownFile_synop_2ddata_2eproto();

class SynopData;

// ===================================================================

class SynopData : public ::google::protobuf::Message {
 public:
  SynopData();
  virtual ~SynopData();
  
  SynopData(const SynopData& from);
  
  inline SynopData& operator=(const SynopData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SynopData& default_instance();
  
  void Swap(SynopData* other);
  
  // implements Message ----------------------------------------------
  
  SynopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynopData& from);
  void MergeFrom(const SynopData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 station_id = 1;
  inline bool has_station_id() const;
  inline void clear_station_id();
  static const int kStationIdFieldNumber = 1;
  inline ::google::protobuf::uint32 station_id() const;
  inline void set_station_id(::google::protobuf::uint32 value);
  
  // required string day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline const ::std::string& day() const;
  inline void set_day(const ::std::string& value);
  inline void set_day(const char* value);
  inline void set_day(const char* value, size_t size);
  inline ::std::string* mutable_day();
  inline ::std::string* release_day();
  
  // required uint32 hour = 3;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 3;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);
  
  // optional uint32 wmo_code = 4;
  inline bool has_wmo_code() const;
  inline void clear_wmo_code();
  static const int kWmoCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 wmo_code() const;
  inline void set_wmo_code(::google::protobuf::uint32 value);
  
  // optional int32 cloud_amount = 10;
  inline bool has_cloud_amount() const;
  inline void clear_cloud_amount();
  static const int kCloudAmountFieldNumber = 10;
  inline ::google::protobuf::int32 cloud_amount() const;
  inline void set_cloud_amount(::google::protobuf::int32 value);
  
  // optional int32 cloud_amount_low_or_middle = 11;
  inline bool has_cloud_amount_low_or_middle() const;
  inline void clear_cloud_amount_low_or_middle();
  static const int kCloudAmountLowOrMiddleFieldNumber = 11;
  inline ::google::protobuf::int32 cloud_amount_low_or_middle() const;
  inline void set_cloud_amount_low_or_middle(::google::protobuf::int32 value);
  
  // optional int32 cloud_high = 12;
  inline bool has_cloud_high() const;
  inline void clear_cloud_high();
  static const int kCloudHighFieldNumber = 12;
  inline ::google::protobuf::int32 cloud_high() const;
  inline void set_cloud_high(::google::protobuf::int32 value);
  
  // optional int32 cloud_lower_bound = 13;
  inline bool has_cloud_lower_bound() const;
  inline void clear_cloud_lower_bound();
  static const int kCloudLowerBoundFieldNumber = 13;
  inline ::google::protobuf::int32 cloud_lower_bound() const;
  inline void set_cloud_lower_bound(::google::protobuf::int32 value);
  
  // optional int32 cloud_middle = 14;
  inline bool has_cloud_middle() const;
  inline void clear_cloud_middle();
  static const int kCloudMiddleFieldNumber = 14;
  inline ::google::protobuf::int32 cloud_middle() const;
  inline void set_cloud_middle(::google::protobuf::int32 value);
  
  // optional int32 cloud_vertical_or_low = 15;
  inline bool has_cloud_vertical_or_low() const;
  inline void clear_cloud_vertical_or_low();
  static const int kCloudVerticalOrLowFieldNumber = 15;
  inline ::google::protobuf::int32 cloud_vertical_or_low() const;
  inline void set_cloud_vertical_or_low(::google::protobuf::int32 value);
  
  // optional double dew_point = 16;
  inline bool has_dew_point() const;
  inline void clear_dew_point();
  static const int kDewPointFieldNumber = 16;
  inline double dew_point() const;
  inline void set_dew_point(double value);
  
  // optional double precipitation_amount_last_24 = 17;
  inline bool has_precipitation_amount_last_24() const;
  inline void clear_precipitation_amount_last_24();
  static const int kPrecipitationAmountLast24FieldNumber = 17;
  inline double precipitation_amount_last_24() const;
  inline void set_precipitation_amount_last_24(double value);
  
  // optional int32 precipitation_code = 18;
  inline bool has_precipitation_code() const;
  inline void clear_precipitation_code();
  static const int kPrecipitationCodeFieldNumber = 18;
  inline ::google::protobuf::int32 precipitation_code() const;
  inline void set_precipitation_code(::google::protobuf::int32 value);
  
  // optional bool precipitation_is_auto = 19;
  inline bool has_precipitation_is_auto() const;
  inline void clear_precipitation_is_auto();
  static const int kPrecipitationIsAutoFieldNumber = 19;
  inline bool precipitation_is_auto() const;
  inline void set_precipitation_is_auto(bool value);
  
  // optional int32 precipitation_stat_1_period = 20;
  inline bool has_precipitation_stat_1_period() const;
  inline void clear_precipitation_stat_1_period();
  static const int kPrecipitationStat1PeriodFieldNumber = 20;
  inline ::google::protobuf::int32 precipitation_stat_1_period() const;
  inline void set_precipitation_stat_1_period(::google::protobuf::int32 value);
  
  // optional double precipitation_stat_1_value = 21;
  inline bool has_precipitation_stat_1_value() const;
  inline void clear_precipitation_stat_1_value();
  static const int kPrecipitationStat1ValueFieldNumber = 21;
  inline double precipitation_stat_1_value() const;
  inline void set_precipitation_stat_1_value(double value);
  
  // optional int32 precipitation_stat_3_period = 22;
  inline bool has_precipitation_stat_3_period() const;
  inline void clear_precipitation_stat_3_period();
  static const int kPrecipitationStat3PeriodFieldNumber = 22;
  inline ::google::protobuf::int32 precipitation_stat_3_period() const;
  inline void set_precipitation_stat_3_period(::google::protobuf::int32 value);
  
  // optional double precipitation_stat_3_value = 23;
  inline bool has_precipitation_stat_3_value() const;
  inline void clear_precipitation_stat_3_value();
  static const int kPrecipitationStat3ValueFieldNumber = 23;
  inline double precipitation_stat_3_value() const;
  inline void set_precipitation_stat_3_value(double value);
  
  // optional double pressure = 24;
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 24;
  inline double pressure() const;
  inline void set_pressure(double value);
  
  // optional double pressure_on_sea_level = 25;
  inline bool has_pressure_on_sea_level() const;
  inline void clear_pressure_on_sea_level();
  static const int kPressureOnSeaLevelFieldNumber = 25;
  inline double pressure_on_sea_level() const;
  inline void set_pressure_on_sea_level(double value);
  
  // optional int32 pressure_tendency = 26;
  inline bool has_pressure_tendency() const;
  inline void clear_pressure_tendency();
  static const int kPressureTendencyFieldNumber = 26;
  inline ::google::protobuf::int32 pressure_tendency() const;
  inline void set_pressure_tendency(::google::protobuf::int32 value);
  
  // optional double pressure_tendency_value = 27;
  inline bool has_pressure_tendency_value() const;
  inline void clear_pressure_tendency_value();
  static const int kPressureTendencyValueFieldNumber = 27;
  inline double pressure_tendency_value() const;
  inline void set_pressure_tendency_value(double value);
  
  // optional double relative_humidity = 28;
  inline bool has_relative_humidity() const;
  inline void clear_relative_humidity();
  static const int kRelativeHumidityFieldNumber = 28;
  inline double relative_humidity() const;
  inline void set_relative_humidity(double value);
  
  // optional double standart_isobar_geo_height = 29;
  inline bool has_standart_isobar_geo_height() const;
  inline void clear_standart_isobar_geo_height();
  static const int kStandartIsobarGeoHeightFieldNumber = 29;
  inline double standart_isobar_geo_height() const;
  inline void set_standart_isobar_geo_height(double value);
  
  // optional int32 standart_isobar_value = 30;
  inline bool has_standart_isobar_value() const;
  inline void clear_standart_isobar_value();
  static const int kStandartIsobarValueFieldNumber = 30;
  inline ::google::protobuf::int32 standart_isobar_value() const;
  inline void set_standart_isobar_value(::google::protobuf::int32 value);
  
  // optional double temperature = 31;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 31;
  inline double temperature() const;
  inline void set_temperature(double value);
  
  // optional double temperature_maximum = 32;
  inline bool has_temperature_maximum() const;
  inline void clear_temperature_maximum();
  static const int kTemperatureMaximumFieldNumber = 32;
  inline double temperature_maximum() const;
  inline void set_temperature_maximum(double value);
  
  // optional double temperature_mean_last_24h = 33;
  inline bool has_temperature_mean_last_24h() const;
  inline void clear_temperature_mean_last_24h();
  static const int kTemperatureMeanLast24HFieldNumber = 33;
  inline double temperature_mean_last_24h() const;
  inline void set_temperature_mean_last_24h(double value);
  
  // optional double temperature_minimum = 34;
  inline bool has_temperature_minimum() const;
  inline void clear_temperature_minimum();
  static const int kTemperatureMinimumFieldNumber = 34;
  inline double temperature_minimum() const;
  inline void set_temperature_minimum(double value);
  
  // optional double temperature_on_2cm_above_ground = 35;
  inline bool has_temperature_on_2cm_above_ground() const;
  inline void clear_temperature_on_2cm_above_ground();
  static const int kTemperatureOn2CmAboveGroundFieldNumber = 35;
  inline double temperature_on_2cm_above_ground() const;
  inline void set_temperature_on_2cm_above_ground(double value);
  
  // optional int32 uid_station = 36;
  inline bool has_uid_station() const;
  inline void clear_uid_station();
  static const int kUidStationFieldNumber = 36;
  inline ::google::protobuf::int32 uid_station() const;
  inline void set_uid_station(::google::protobuf::int32 value);
  
  // optional int32 uid_transmet_raw_datum = 37;
  inline bool has_uid_transmet_raw_datum() const;
  inline void clear_uid_transmet_raw_datum();
  static const int kUidTransmetRawDatumFieldNumber = 37;
  inline ::google::protobuf::int32 uid_transmet_raw_datum() const;
  inline void set_uid_transmet_raw_datum(::google::protobuf::int32 value);
  
  // optional int32 visibility_range = 38;
  inline bool has_visibility_range() const;
  inline void clear_visibility_range();
  static const int kVisibilityRangeFieldNumber = 38;
  inline ::google::protobuf::int32 visibility_range() const;
  inline void set_visibility_range(::google::protobuf::int32 value);
  
  // optional int32 weather_code = 39;
  inline bool has_weather_code() const;
  inline void clear_weather_code();
  static const int kWeatherCodeFieldNumber = 39;
  inline ::google::protobuf::int32 weather_code() const;
  inline void set_weather_code(::google::protobuf::int32 value);
  
  // optional int32 weather_current = 40;
  inline bool has_weather_current() const;
  inline void clear_weather_current();
  static const int kWeatherCurrentFieldNumber = 40;
  inline ::google::protobuf::int32 weather_current() const;
  inline void set_weather_current(::google::protobuf::int32 value);
  
  // optional int32 weather_past_1 = 41;
  inline bool has_weather_past_1() const;
  inline void clear_weather_past_1();
  static const int kWeatherPast1FieldNumber = 41;
  inline ::google::protobuf::int32 weather_past_1() const;
  inline void set_weather_past_1(::google::protobuf::int32 value);
  
  // optional int32 weather_past_2 = 42;
  inline bool has_weather_past_2() const;
  inline void clear_weather_past_2();
  static const int kWeatherPast2FieldNumber = 42;
  inline ::google::protobuf::int32 weather_past_2() const;
  inline void set_weather_past_2(::google::protobuf::int32 value);
  
  // optional bool wind_auto = 43;
  inline bool has_wind_auto() const;
  inline void clear_wind_auto();
  static const int kWindAutoFieldNumber = 43;
  inline bool wind_auto() const;
  inline void set_wind_auto(bool value);
  
  // optional int32 wind_direction_code = 44;
  inline bool has_wind_direction_code() const;
  inline void clear_wind_direction_code();
  static const int kWindDirectionCodeFieldNumber = 44;
  inline ::google::protobuf::int32 wind_direction_code() const;
  inline void set_wind_direction_code(::google::protobuf::int32 value);
  
  // optional double wind_speed = 45;
  inline bool has_wind_speed() const;
  inline void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 45;
  inline double wind_speed() const;
  inline void set_wind_speed(double value);
  
  // optional double wind_speed_mean_last_24h = 46;
  inline bool has_wind_speed_mean_last_24h() const;
  inline void clear_wind_speed_mean_last_24h();
  static const int kWindSpeedMeanLast24HFieldNumber = 46;
  inline double wind_speed_mean_last_24h() const;
  inline void set_wind_speed_mean_last_24h(double value);
  
  // required double station_latitude = 47;
  inline bool has_station_latitude() const;
  inline void clear_station_latitude();
  static const int kStationLatitudeFieldNumber = 47;
  inline double station_latitude() const;
  inline void set_station_latitude(double value);
  
  // required double station_longitude = 48;
  inline bool has_station_longitude() const;
  inline void clear_station_longitude();
  static const int kStationLongitudeFieldNumber = 48;
  inline double station_longitude() const;
  inline void set_station_longitude(double value);
  
  // optional double station_height = 49;
  inline bool has_station_height() const;
  inline void clear_station_height();
  static const int kStationHeightFieldNumber = 49;
  inline double station_height() const;
  inline void set_station_height(double value);
  
  // optional int32 confidence_factor = 50;
  inline bool has_confidence_factor() const;
  inline void clear_confidence_factor();
  static const int kConfidenceFactorFieldNumber = 50;
  inline ::google::protobuf::int32 confidence_factor() const;
  inline void set_confidence_factor(::google::protobuf::int32 value);
  
  // required int32 wind_type_indicator = 51;
  inline bool has_wind_type_indicator() const;
  inline void clear_wind_type_indicator();
  static const int kWindTypeIndicatorFieldNumber = 51;
  inline ::google::protobuf::int32 wind_type_indicator() const;
  inline void set_wind_type_indicator(::google::protobuf::int32 value);
  
  // optional double mobile_land_station_elevation = 53;
  inline bool has_mobile_land_station_elevation() const;
  inline void clear_mobile_land_station_elevation();
  static const int kMobileLandStationElevationFieldNumber = 53;
  inline double mobile_land_station_elevation() const;
  inline void set_mobile_land_station_elevation(double value);
  
  // @@protoc_insertion_point(class_scope:SynopData)
 private:
  inline void set_has_station_id();
  inline void clear_has_station_id();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_wmo_code();
  inline void clear_has_wmo_code();
  inline void set_has_cloud_amount();
  inline void clear_has_cloud_amount();
  inline void set_has_cloud_amount_low_or_middle();
  inline void clear_has_cloud_amount_low_or_middle();
  inline void set_has_cloud_high();
  inline void clear_has_cloud_high();
  inline void set_has_cloud_lower_bound();
  inline void clear_has_cloud_lower_bound();
  inline void set_has_cloud_middle();
  inline void clear_has_cloud_middle();
  inline void set_has_cloud_vertical_or_low();
  inline void clear_has_cloud_vertical_or_low();
  inline void set_has_dew_point();
  inline void clear_has_dew_point();
  inline void set_has_precipitation_amount_last_24();
  inline void clear_has_precipitation_amount_last_24();
  inline void set_has_precipitation_code();
  inline void clear_has_precipitation_code();
  inline void set_has_precipitation_is_auto();
  inline void clear_has_precipitation_is_auto();
  inline void set_has_precipitation_stat_1_period();
  inline void clear_has_precipitation_stat_1_period();
  inline void set_has_precipitation_stat_1_value();
  inline void clear_has_precipitation_stat_1_value();
  inline void set_has_precipitation_stat_3_period();
  inline void clear_has_precipitation_stat_3_period();
  inline void set_has_precipitation_stat_3_value();
  inline void clear_has_precipitation_stat_3_value();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_pressure_on_sea_level();
  inline void clear_has_pressure_on_sea_level();
  inline void set_has_pressure_tendency();
  inline void clear_has_pressure_tendency();
  inline void set_has_pressure_tendency_value();
  inline void clear_has_pressure_tendency_value();
  inline void set_has_relative_humidity();
  inline void clear_has_relative_humidity();
  inline void set_has_standart_isobar_geo_height();
  inline void clear_has_standart_isobar_geo_height();
  inline void set_has_standart_isobar_value();
  inline void clear_has_standart_isobar_value();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_temperature_maximum();
  inline void clear_has_temperature_maximum();
  inline void set_has_temperature_mean_last_24h();
  inline void clear_has_temperature_mean_last_24h();
  inline void set_has_temperature_minimum();
  inline void clear_has_temperature_minimum();
  inline void set_has_temperature_on_2cm_above_ground();
  inline void clear_has_temperature_on_2cm_above_ground();
  inline void set_has_uid_station();
  inline void clear_has_uid_station();
  inline void set_has_uid_transmet_raw_datum();
  inline void clear_has_uid_transmet_raw_datum();
  inline void set_has_visibility_range();
  inline void clear_has_visibility_range();
  inline void set_has_weather_code();
  inline void clear_has_weather_code();
  inline void set_has_weather_current();
  inline void clear_has_weather_current();
  inline void set_has_weather_past_1();
  inline void clear_has_weather_past_1();
  inline void set_has_weather_past_2();
  inline void clear_has_weather_past_2();
  inline void set_has_wind_auto();
  inline void clear_has_wind_auto();
  inline void set_has_wind_direction_code();
  inline void clear_has_wind_direction_code();
  inline void set_has_wind_speed();
  inline void clear_has_wind_speed();
  inline void set_has_wind_speed_mean_last_24h();
  inline void clear_has_wind_speed_mean_last_24h();
  inline void set_has_station_latitude();
  inline void clear_has_station_latitude();
  inline void set_has_station_longitude();
  inline void clear_has_station_longitude();
  inline void set_has_station_height();
  inline void clear_has_station_height();
  inline void set_has_confidence_factor();
  inline void clear_has_confidence_factor();
  inline void set_has_wind_type_indicator();
  inline void clear_has_wind_type_indicator();
  inline void set_has_mobile_land_station_elevation();
  inline void clear_has_mobile_land_station_elevation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 station_id_;
  ::google::protobuf::uint32 hour_;
  ::std::string* day_;
  ::google::protobuf::uint32 wmo_code_;
  ::google::protobuf::int32 cloud_amount_;
  ::google::protobuf::int32 cloud_amount_low_or_middle_;
  ::google::protobuf::int32 cloud_high_;
  ::google::protobuf::int32 cloud_lower_bound_;
  ::google::protobuf::int32 cloud_middle_;
  double dew_point_;
  ::google::protobuf::int32 cloud_vertical_or_low_;
  ::google::protobuf::int32 precipitation_code_;
  double precipitation_amount_last_24_;
  double precipitation_stat_1_value_;
  ::google::protobuf::int32 precipitation_stat_1_period_;
  ::google::protobuf::int32 precipitation_stat_3_period_;
  double precipitation_stat_3_value_;
  double pressure_;
  double pressure_on_sea_level_;
  double pressure_tendency_value_;
  double relative_humidity_;
  ::google::protobuf::int32 pressure_tendency_;
  ::google::protobuf::int32 standart_isobar_value_;
  double standart_isobar_geo_height_;
  double temperature_;
  double temperature_maximum_;
  bool precipitation_is_auto_;
  bool wind_auto_;
  ::google::protobuf::int32 uid_station_;
  double temperature_mean_last_24h_;
  double temperature_minimum_;
  double temperature_on_2cm_above_ground_;
  ::google::protobuf::int32 uid_transmet_raw_datum_;
  ::google::protobuf::int32 visibility_range_;
  ::google::protobuf::int32 weather_code_;
  ::google::protobuf::int32 weather_current_;
  ::google::protobuf::int32 weather_past_1_;
  ::google::protobuf::int32 weather_past_2_;
  double wind_speed_;
  double wind_speed_mean_last_24h_;
  ::google::protobuf::int32 wind_direction_code_;
  ::google::protobuf::int32 confidence_factor_;
  double station_latitude_;
  double station_longitude_;
  double station_height_;
  double mobile_land_station_elevation_;
  ::google::protobuf::int32 wind_type_indicator_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(47 + 31) / 32];
  
  friend void  protobuf_AddDesc_synop_2ddata_2eproto();
  friend void protobuf_AssignDesc_synop_2ddata_2eproto();
  friend void protobuf_ShutdownFile_synop_2ddata_2eproto();
  
  void InitAsDefaultInstance();
  static SynopData* default_instance_;
};
// ===================================================================


// ===================================================================

// SynopData

// optional uint32 station_id = 1;
inline bool SynopData::has_station_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynopData::set_has_station_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynopData::clear_has_station_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynopData::clear_station_id() {
  station_id_ = 0u;
  clear_has_station_id();
}
inline ::google::protobuf::uint32 SynopData::station_id() const {
  return station_id_;
}
inline void SynopData::set_station_id(::google::protobuf::uint32 value) {
  set_has_station_id();
  station_id_ = value;
}

// required string day = 2;
inline bool SynopData::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynopData::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynopData::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynopData::clear_day() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    day_->clear();
  }
  clear_has_day();
}
inline const ::std::string& SynopData::day() const {
  return *day_;
}
inline void SynopData::set_day(const ::std::string& value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void SynopData::set_day(const char* value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void SynopData::set_day(const char* value, size_t size) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynopData::mutable_day() {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  return day_;
}
inline ::std::string* SynopData::release_day() {
  clear_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = day_;
    day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 hour = 3;
inline bool SynopData::has_hour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynopData::set_has_hour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynopData::clear_has_hour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynopData::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 SynopData::hour() const {
  return hour_;
}
inline void SynopData::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
}

// optional uint32 wmo_code = 4;
inline bool SynopData::has_wmo_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynopData::set_has_wmo_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynopData::clear_has_wmo_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynopData::clear_wmo_code() {
  wmo_code_ = 0u;
  clear_has_wmo_code();
}
inline ::google::protobuf::uint32 SynopData::wmo_code() const {
  return wmo_code_;
}
inline void SynopData::set_wmo_code(::google::protobuf::uint32 value) {
  set_has_wmo_code();
  wmo_code_ = value;
}

// optional int32 cloud_amount = 10;
inline bool SynopData::has_cloud_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynopData::set_has_cloud_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynopData::clear_has_cloud_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynopData::clear_cloud_amount() {
  cloud_amount_ = 0;
  clear_has_cloud_amount();
}
inline ::google::protobuf::int32 SynopData::cloud_amount() const {
  return cloud_amount_;
}
inline void SynopData::set_cloud_amount(::google::protobuf::int32 value) {
  set_has_cloud_amount();
  cloud_amount_ = value;
}

// optional int32 cloud_amount_low_or_middle = 11;
inline bool SynopData::has_cloud_amount_low_or_middle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SynopData::set_has_cloud_amount_low_or_middle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SynopData::clear_has_cloud_amount_low_or_middle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SynopData::clear_cloud_amount_low_or_middle() {
  cloud_amount_low_or_middle_ = 0;
  clear_has_cloud_amount_low_or_middle();
}
inline ::google::protobuf::int32 SynopData::cloud_amount_low_or_middle() const {
  return cloud_amount_low_or_middle_;
}
inline void SynopData::set_cloud_amount_low_or_middle(::google::protobuf::int32 value) {
  set_has_cloud_amount_low_or_middle();
  cloud_amount_low_or_middle_ = value;
}

// optional int32 cloud_high = 12;
inline bool SynopData::has_cloud_high() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SynopData::set_has_cloud_high() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SynopData::clear_has_cloud_high() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SynopData::clear_cloud_high() {
  cloud_high_ = 0;
  clear_has_cloud_high();
}
inline ::google::protobuf::int32 SynopData::cloud_high() const {
  return cloud_high_;
}
inline void SynopData::set_cloud_high(::google::protobuf::int32 value) {
  set_has_cloud_high();
  cloud_high_ = value;
}

// optional int32 cloud_lower_bound = 13;
inline bool SynopData::has_cloud_lower_bound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SynopData::set_has_cloud_lower_bound() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SynopData::clear_has_cloud_lower_bound() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SynopData::clear_cloud_lower_bound() {
  cloud_lower_bound_ = 0;
  clear_has_cloud_lower_bound();
}
inline ::google::protobuf::int32 SynopData::cloud_lower_bound() const {
  return cloud_lower_bound_;
}
inline void SynopData::set_cloud_lower_bound(::google::protobuf::int32 value) {
  set_has_cloud_lower_bound();
  cloud_lower_bound_ = value;
}

// optional int32 cloud_middle = 14;
inline bool SynopData::has_cloud_middle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SynopData::set_has_cloud_middle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SynopData::clear_has_cloud_middle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SynopData::clear_cloud_middle() {
  cloud_middle_ = 0;
  clear_has_cloud_middle();
}
inline ::google::protobuf::int32 SynopData::cloud_middle() const {
  return cloud_middle_;
}
inline void SynopData::set_cloud_middle(::google::protobuf::int32 value) {
  set_has_cloud_middle();
  cloud_middle_ = value;
}

// optional int32 cloud_vertical_or_low = 15;
inline bool SynopData::has_cloud_vertical_or_low() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SynopData::set_has_cloud_vertical_or_low() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SynopData::clear_has_cloud_vertical_or_low() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SynopData::clear_cloud_vertical_or_low() {
  cloud_vertical_or_low_ = 0;
  clear_has_cloud_vertical_or_low();
}
inline ::google::protobuf::int32 SynopData::cloud_vertical_or_low() const {
  return cloud_vertical_or_low_;
}
inline void SynopData::set_cloud_vertical_or_low(::google::protobuf::int32 value) {
  set_has_cloud_vertical_or_low();
  cloud_vertical_or_low_ = value;
}

// optional double dew_point = 16;
inline bool SynopData::has_dew_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SynopData::set_has_dew_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SynopData::clear_has_dew_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SynopData::clear_dew_point() {
  dew_point_ = 0;
  clear_has_dew_point();
}
inline double SynopData::dew_point() const {
  return dew_point_;
}
inline void SynopData::set_dew_point(double value) {
  set_has_dew_point();
  dew_point_ = value;
}

// optional double precipitation_amount_last_24 = 17;
inline bool SynopData::has_precipitation_amount_last_24() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SynopData::set_has_precipitation_amount_last_24() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SynopData::clear_has_precipitation_amount_last_24() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SynopData::clear_precipitation_amount_last_24() {
  precipitation_amount_last_24_ = 0;
  clear_has_precipitation_amount_last_24();
}
inline double SynopData::precipitation_amount_last_24() const {
  return precipitation_amount_last_24_;
}
inline void SynopData::set_precipitation_amount_last_24(double value) {
  set_has_precipitation_amount_last_24();
  precipitation_amount_last_24_ = value;
}

// optional int32 precipitation_code = 18;
inline bool SynopData::has_precipitation_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SynopData::set_has_precipitation_code() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SynopData::clear_has_precipitation_code() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SynopData::clear_precipitation_code() {
  precipitation_code_ = 0;
  clear_has_precipitation_code();
}
inline ::google::protobuf::int32 SynopData::precipitation_code() const {
  return precipitation_code_;
}
inline void SynopData::set_precipitation_code(::google::protobuf::int32 value) {
  set_has_precipitation_code();
  precipitation_code_ = value;
}

// optional bool precipitation_is_auto = 19;
inline bool SynopData::has_precipitation_is_auto() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SynopData::set_has_precipitation_is_auto() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SynopData::clear_has_precipitation_is_auto() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SynopData::clear_precipitation_is_auto() {
  precipitation_is_auto_ = false;
  clear_has_precipitation_is_auto();
}
inline bool SynopData::precipitation_is_auto() const {
  return precipitation_is_auto_;
}
inline void SynopData::set_precipitation_is_auto(bool value) {
  set_has_precipitation_is_auto();
  precipitation_is_auto_ = value;
}

// optional int32 precipitation_stat_1_period = 20;
inline bool SynopData::has_precipitation_stat_1_period() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SynopData::set_has_precipitation_stat_1_period() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SynopData::clear_has_precipitation_stat_1_period() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SynopData::clear_precipitation_stat_1_period() {
  precipitation_stat_1_period_ = 0;
  clear_has_precipitation_stat_1_period();
}
inline ::google::protobuf::int32 SynopData::precipitation_stat_1_period() const {
  return precipitation_stat_1_period_;
}
inline void SynopData::set_precipitation_stat_1_period(::google::protobuf::int32 value) {
  set_has_precipitation_stat_1_period();
  precipitation_stat_1_period_ = value;
}

// optional double precipitation_stat_1_value = 21;
inline bool SynopData::has_precipitation_stat_1_value() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SynopData::set_has_precipitation_stat_1_value() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SynopData::clear_has_precipitation_stat_1_value() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SynopData::clear_precipitation_stat_1_value() {
  precipitation_stat_1_value_ = 0;
  clear_has_precipitation_stat_1_value();
}
inline double SynopData::precipitation_stat_1_value() const {
  return precipitation_stat_1_value_;
}
inline void SynopData::set_precipitation_stat_1_value(double value) {
  set_has_precipitation_stat_1_value();
  precipitation_stat_1_value_ = value;
}

// optional int32 precipitation_stat_3_period = 22;
inline bool SynopData::has_precipitation_stat_3_period() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SynopData::set_has_precipitation_stat_3_period() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SynopData::clear_has_precipitation_stat_3_period() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SynopData::clear_precipitation_stat_3_period() {
  precipitation_stat_3_period_ = 0;
  clear_has_precipitation_stat_3_period();
}
inline ::google::protobuf::int32 SynopData::precipitation_stat_3_period() const {
  return precipitation_stat_3_period_;
}
inline void SynopData::set_precipitation_stat_3_period(::google::protobuf::int32 value) {
  set_has_precipitation_stat_3_period();
  precipitation_stat_3_period_ = value;
}

// optional double precipitation_stat_3_value = 23;
inline bool SynopData::has_precipitation_stat_3_value() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SynopData::set_has_precipitation_stat_3_value() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SynopData::clear_has_precipitation_stat_3_value() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SynopData::clear_precipitation_stat_3_value() {
  precipitation_stat_3_value_ = 0;
  clear_has_precipitation_stat_3_value();
}
inline double SynopData::precipitation_stat_3_value() const {
  return precipitation_stat_3_value_;
}
inline void SynopData::set_precipitation_stat_3_value(double value) {
  set_has_precipitation_stat_3_value();
  precipitation_stat_3_value_ = value;
}

// optional double pressure = 24;
inline bool SynopData::has_pressure() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SynopData::set_has_pressure() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SynopData::clear_has_pressure() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SynopData::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline double SynopData::pressure() const {
  return pressure_;
}
inline void SynopData::set_pressure(double value) {
  set_has_pressure();
  pressure_ = value;
}

// optional double pressure_on_sea_level = 25;
inline bool SynopData::has_pressure_on_sea_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SynopData::set_has_pressure_on_sea_level() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SynopData::clear_has_pressure_on_sea_level() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SynopData::clear_pressure_on_sea_level() {
  pressure_on_sea_level_ = 0;
  clear_has_pressure_on_sea_level();
}
inline double SynopData::pressure_on_sea_level() const {
  return pressure_on_sea_level_;
}
inline void SynopData::set_pressure_on_sea_level(double value) {
  set_has_pressure_on_sea_level();
  pressure_on_sea_level_ = value;
}

// optional int32 pressure_tendency = 26;
inline bool SynopData::has_pressure_tendency() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SynopData::set_has_pressure_tendency() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SynopData::clear_has_pressure_tendency() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SynopData::clear_pressure_tendency() {
  pressure_tendency_ = 0;
  clear_has_pressure_tendency();
}
inline ::google::protobuf::int32 SynopData::pressure_tendency() const {
  return pressure_tendency_;
}
inline void SynopData::set_pressure_tendency(::google::protobuf::int32 value) {
  set_has_pressure_tendency();
  pressure_tendency_ = value;
}

// optional double pressure_tendency_value = 27;
inline bool SynopData::has_pressure_tendency_value() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SynopData::set_has_pressure_tendency_value() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SynopData::clear_has_pressure_tendency_value() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SynopData::clear_pressure_tendency_value() {
  pressure_tendency_value_ = 0;
  clear_has_pressure_tendency_value();
}
inline double SynopData::pressure_tendency_value() const {
  return pressure_tendency_value_;
}
inline void SynopData::set_pressure_tendency_value(double value) {
  set_has_pressure_tendency_value();
  pressure_tendency_value_ = value;
}

// optional double relative_humidity = 28;
inline bool SynopData::has_relative_humidity() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SynopData::set_has_relative_humidity() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SynopData::clear_has_relative_humidity() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SynopData::clear_relative_humidity() {
  relative_humidity_ = 0;
  clear_has_relative_humidity();
}
inline double SynopData::relative_humidity() const {
  return relative_humidity_;
}
inline void SynopData::set_relative_humidity(double value) {
  set_has_relative_humidity();
  relative_humidity_ = value;
}

// optional double standart_isobar_geo_height = 29;
inline bool SynopData::has_standart_isobar_geo_height() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SynopData::set_has_standart_isobar_geo_height() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SynopData::clear_has_standart_isobar_geo_height() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SynopData::clear_standart_isobar_geo_height() {
  standart_isobar_geo_height_ = 0;
  clear_has_standart_isobar_geo_height();
}
inline double SynopData::standart_isobar_geo_height() const {
  return standart_isobar_geo_height_;
}
inline void SynopData::set_standart_isobar_geo_height(double value) {
  set_has_standart_isobar_geo_height();
  standart_isobar_geo_height_ = value;
}

// optional int32 standart_isobar_value = 30;
inline bool SynopData::has_standart_isobar_value() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SynopData::set_has_standart_isobar_value() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SynopData::clear_has_standart_isobar_value() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SynopData::clear_standart_isobar_value() {
  standart_isobar_value_ = 0;
  clear_has_standart_isobar_value();
}
inline ::google::protobuf::int32 SynopData::standart_isobar_value() const {
  return standart_isobar_value_;
}
inline void SynopData::set_standart_isobar_value(::google::protobuf::int32 value) {
  set_has_standart_isobar_value();
  standart_isobar_value_ = value;
}

// optional double temperature = 31;
inline bool SynopData::has_temperature() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SynopData::set_has_temperature() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SynopData::clear_has_temperature() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SynopData::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline double SynopData::temperature() const {
  return temperature_;
}
inline void SynopData::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
}

// optional double temperature_maximum = 32;
inline bool SynopData::has_temperature_maximum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SynopData::set_has_temperature_maximum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SynopData::clear_has_temperature_maximum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SynopData::clear_temperature_maximum() {
  temperature_maximum_ = 0;
  clear_has_temperature_maximum();
}
inline double SynopData::temperature_maximum() const {
  return temperature_maximum_;
}
inline void SynopData::set_temperature_maximum(double value) {
  set_has_temperature_maximum();
  temperature_maximum_ = value;
}

// optional double temperature_mean_last_24h = 33;
inline bool SynopData::has_temperature_mean_last_24h() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SynopData::set_has_temperature_mean_last_24h() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SynopData::clear_has_temperature_mean_last_24h() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SynopData::clear_temperature_mean_last_24h() {
  temperature_mean_last_24h_ = 0;
  clear_has_temperature_mean_last_24h();
}
inline double SynopData::temperature_mean_last_24h() const {
  return temperature_mean_last_24h_;
}
inline void SynopData::set_temperature_mean_last_24h(double value) {
  set_has_temperature_mean_last_24h();
  temperature_mean_last_24h_ = value;
}

// optional double temperature_minimum = 34;
inline bool SynopData::has_temperature_minimum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SynopData::set_has_temperature_minimum() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SynopData::clear_has_temperature_minimum() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SynopData::clear_temperature_minimum() {
  temperature_minimum_ = 0;
  clear_has_temperature_minimum();
}
inline double SynopData::temperature_minimum() const {
  return temperature_minimum_;
}
inline void SynopData::set_temperature_minimum(double value) {
  set_has_temperature_minimum();
  temperature_minimum_ = value;
}

// optional double temperature_on_2cm_above_ground = 35;
inline bool SynopData::has_temperature_on_2cm_above_ground() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SynopData::set_has_temperature_on_2cm_above_ground() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SynopData::clear_has_temperature_on_2cm_above_ground() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SynopData::clear_temperature_on_2cm_above_ground() {
  temperature_on_2cm_above_ground_ = 0;
  clear_has_temperature_on_2cm_above_ground();
}
inline double SynopData::temperature_on_2cm_above_ground() const {
  return temperature_on_2cm_above_ground_;
}
inline void SynopData::set_temperature_on_2cm_above_ground(double value) {
  set_has_temperature_on_2cm_above_ground();
  temperature_on_2cm_above_ground_ = value;
}

// optional int32 uid_station = 36;
inline bool SynopData::has_uid_station() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SynopData::set_has_uid_station() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SynopData::clear_has_uid_station() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SynopData::clear_uid_station() {
  uid_station_ = 0;
  clear_has_uid_station();
}
inline ::google::protobuf::int32 SynopData::uid_station() const {
  return uid_station_;
}
inline void SynopData::set_uid_station(::google::protobuf::int32 value) {
  set_has_uid_station();
  uid_station_ = value;
}

// optional int32 uid_transmet_raw_datum = 37;
inline bool SynopData::has_uid_transmet_raw_datum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SynopData::set_has_uid_transmet_raw_datum() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SynopData::clear_has_uid_transmet_raw_datum() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SynopData::clear_uid_transmet_raw_datum() {
  uid_transmet_raw_datum_ = 0;
  clear_has_uid_transmet_raw_datum();
}
inline ::google::protobuf::int32 SynopData::uid_transmet_raw_datum() const {
  return uid_transmet_raw_datum_;
}
inline void SynopData::set_uid_transmet_raw_datum(::google::protobuf::int32 value) {
  set_has_uid_transmet_raw_datum();
  uid_transmet_raw_datum_ = value;
}

// optional int32 visibility_range = 38;
inline bool SynopData::has_visibility_range() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SynopData::set_has_visibility_range() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SynopData::clear_has_visibility_range() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SynopData::clear_visibility_range() {
  visibility_range_ = 0;
  clear_has_visibility_range();
}
inline ::google::protobuf::int32 SynopData::visibility_range() const {
  return visibility_range_;
}
inline void SynopData::set_visibility_range(::google::protobuf::int32 value) {
  set_has_visibility_range();
  visibility_range_ = value;
}

// optional int32 weather_code = 39;
inline bool SynopData::has_weather_code() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SynopData::set_has_weather_code() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SynopData::clear_has_weather_code() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SynopData::clear_weather_code() {
  weather_code_ = 0;
  clear_has_weather_code();
}
inline ::google::protobuf::int32 SynopData::weather_code() const {
  return weather_code_;
}
inline void SynopData::set_weather_code(::google::protobuf::int32 value) {
  set_has_weather_code();
  weather_code_ = value;
}

// optional int32 weather_current = 40;
inline bool SynopData::has_weather_current() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SynopData::set_has_weather_current() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SynopData::clear_has_weather_current() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SynopData::clear_weather_current() {
  weather_current_ = 0;
  clear_has_weather_current();
}
inline ::google::protobuf::int32 SynopData::weather_current() const {
  return weather_current_;
}
inline void SynopData::set_weather_current(::google::protobuf::int32 value) {
  set_has_weather_current();
  weather_current_ = value;
}

// optional int32 weather_past_1 = 41;
inline bool SynopData::has_weather_past_1() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SynopData::set_has_weather_past_1() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SynopData::clear_has_weather_past_1() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SynopData::clear_weather_past_1() {
  weather_past_1_ = 0;
  clear_has_weather_past_1();
}
inline ::google::protobuf::int32 SynopData::weather_past_1() const {
  return weather_past_1_;
}
inline void SynopData::set_weather_past_1(::google::protobuf::int32 value) {
  set_has_weather_past_1();
  weather_past_1_ = value;
}

// optional int32 weather_past_2 = 42;
inline bool SynopData::has_weather_past_2() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SynopData::set_has_weather_past_2() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SynopData::clear_has_weather_past_2() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SynopData::clear_weather_past_2() {
  weather_past_2_ = 0;
  clear_has_weather_past_2();
}
inline ::google::protobuf::int32 SynopData::weather_past_2() const {
  return weather_past_2_;
}
inline void SynopData::set_weather_past_2(::google::protobuf::int32 value) {
  set_has_weather_past_2();
  weather_past_2_ = value;
}

// optional bool wind_auto = 43;
inline bool SynopData::has_wind_auto() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SynopData::set_has_wind_auto() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SynopData::clear_has_wind_auto() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SynopData::clear_wind_auto() {
  wind_auto_ = false;
  clear_has_wind_auto();
}
inline bool SynopData::wind_auto() const {
  return wind_auto_;
}
inline void SynopData::set_wind_auto(bool value) {
  set_has_wind_auto();
  wind_auto_ = value;
}

// optional int32 wind_direction_code = 44;
inline bool SynopData::has_wind_direction_code() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SynopData::set_has_wind_direction_code() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SynopData::clear_has_wind_direction_code() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SynopData::clear_wind_direction_code() {
  wind_direction_code_ = 0;
  clear_has_wind_direction_code();
}
inline ::google::protobuf::int32 SynopData::wind_direction_code() const {
  return wind_direction_code_;
}
inline void SynopData::set_wind_direction_code(::google::protobuf::int32 value) {
  set_has_wind_direction_code();
  wind_direction_code_ = value;
}

// optional double wind_speed = 45;
inline bool SynopData::has_wind_speed() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SynopData::set_has_wind_speed() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SynopData::clear_has_wind_speed() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SynopData::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline double SynopData::wind_speed() const {
  return wind_speed_;
}
inline void SynopData::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
}

// optional double wind_speed_mean_last_24h = 46;
inline bool SynopData::has_wind_speed_mean_last_24h() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SynopData::set_has_wind_speed_mean_last_24h() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SynopData::clear_has_wind_speed_mean_last_24h() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SynopData::clear_wind_speed_mean_last_24h() {
  wind_speed_mean_last_24h_ = 0;
  clear_has_wind_speed_mean_last_24h();
}
inline double SynopData::wind_speed_mean_last_24h() const {
  return wind_speed_mean_last_24h_;
}
inline void SynopData::set_wind_speed_mean_last_24h(double value) {
  set_has_wind_speed_mean_last_24h();
  wind_speed_mean_last_24h_ = value;
}

// required double station_latitude = 47;
inline bool SynopData::has_station_latitude() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SynopData::set_has_station_latitude() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SynopData::clear_has_station_latitude() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SynopData::clear_station_latitude() {
  station_latitude_ = 0;
  clear_has_station_latitude();
}
inline double SynopData::station_latitude() const {
  return station_latitude_;
}
inline void SynopData::set_station_latitude(double value) {
  set_has_station_latitude();
  station_latitude_ = value;
}

// required double station_longitude = 48;
inline bool SynopData::has_station_longitude() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SynopData::set_has_station_longitude() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SynopData::clear_has_station_longitude() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SynopData::clear_station_longitude() {
  station_longitude_ = 0;
  clear_has_station_longitude();
}
inline double SynopData::station_longitude() const {
  return station_longitude_;
}
inline void SynopData::set_station_longitude(double value) {
  set_has_station_longitude();
  station_longitude_ = value;
}

// optional double station_height = 49;
inline bool SynopData::has_station_height() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SynopData::set_has_station_height() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SynopData::clear_has_station_height() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SynopData::clear_station_height() {
  station_height_ = 0;
  clear_has_station_height();
}
inline double SynopData::station_height() const {
  return station_height_;
}
inline void SynopData::set_station_height(double value) {
  set_has_station_height();
  station_height_ = value;
}

// optional int32 confidence_factor = 50;
inline bool SynopData::has_confidence_factor() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SynopData::set_has_confidence_factor() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SynopData::clear_has_confidence_factor() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SynopData::clear_confidence_factor() {
  confidence_factor_ = 0;
  clear_has_confidence_factor();
}
inline ::google::protobuf::int32 SynopData::confidence_factor() const {
  return confidence_factor_;
}
inline void SynopData::set_confidence_factor(::google::protobuf::int32 value) {
  set_has_confidence_factor();
  confidence_factor_ = value;
}

// required int32 wind_type_indicator = 51;
inline bool SynopData::has_wind_type_indicator() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SynopData::set_has_wind_type_indicator() {
  _has_bits_[1] |= 0x00002000u;
}
inline void SynopData::clear_has_wind_type_indicator() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void SynopData::clear_wind_type_indicator() {
  wind_type_indicator_ = 0;
  clear_has_wind_type_indicator();
}
inline ::google::protobuf::int32 SynopData::wind_type_indicator() const {
  return wind_type_indicator_;
}
inline void SynopData::set_wind_type_indicator(::google::protobuf::int32 value) {
  set_has_wind_type_indicator();
  wind_type_indicator_ = value;
}

// optional double mobile_land_station_elevation = 53;
inline bool SynopData::has_mobile_land_station_elevation() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SynopData::set_has_mobile_land_station_elevation() {
  _has_bits_[1] |= 0x00004000u;
}
inline void SynopData::clear_has_mobile_land_station_elevation() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void SynopData::clear_mobile_land_station_elevation() {
  mobile_land_station_elevation_ = 0;
  clear_has_mobile_land_station_elevation();
}
inline double SynopData::mobile_land_station_elevation() const {
  return mobile_land_station_elevation_;
}
inline void SynopData::set_mobile_land_station_elevation(double value) {
  set_has_mobile_land_station_elevation();
  mobile_land_station_elevation_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_synop_2ddata_2eproto__INCLUDED
