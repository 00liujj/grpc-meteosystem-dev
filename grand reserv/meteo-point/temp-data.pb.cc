// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "temp-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TempData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TempData_LevelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempData_LevelData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_temp_2ddata_2eproto() {
  protobuf_AddDesc_temp_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "temp-data.proto");
  GOOGLE_CHECK(file != NULL);
  TempData_descriptor_ = file->message_type(0);
  static const int TempData_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, uid_station_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, station_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, station_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, wind_speed_in_knots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, marsden_square_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, mobile_land_station_elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, confidence_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, uid_transmet_raw_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, cloud_amount_low_or_middle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, cloud_high_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, cloud_lower_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, cloud_middle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, launch_or_release_sonde_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, lowest_clouds_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, max_wind_level_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, max_wind_level_wind_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, max_wind_level_wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, radiation_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, sea_surface_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, significant_levels_respect_to_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, significant_levels_respect_to_wind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, sonde_system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, sonde_tracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, surface_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, standard_isobaric_surfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, tropopause_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, maximum_wind_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, level_wind_speed_is_greatest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, wmo_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, part_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, leveldata_),
  };
  TempData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TempData_descriptor_,
      TempData::default_instance_,
      TempData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TempData));
  TempData_LevelData_descriptor_ = TempData_descriptor_->nested_type(0);
  static const int TempData_LevelData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, geoheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, temperature_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, dew_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, wind_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, is_relative_topography_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, isobaric_height_500_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, isobaric_height_1000_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, abs_geoheight_changing_12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, abs_geoheight_changing_24_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, vector_difference_above_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, vector_difference_below_),
  };
  TempData_LevelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TempData_LevelData_descriptor_,
      TempData_LevelData::default_instance_,
      TempData_LevelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempData_LevelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TempData_LevelData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_temp_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TempData_descriptor_, &TempData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TempData_LevelData_descriptor_, &TempData_LevelData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_temp_2ddata_2eproto() {
  delete TempData::default_instance_;
  delete TempData_reflection_;
  delete TempData_LevelData::default_instance_;
  delete TempData_LevelData_reflection_;
}

void protobuf_AddDesc_temp_2ddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017temp-data.proto\"\360\013\n\010TempData\022\023\n\013uid_st"
    "ation\030\001 \001(\r\022\013\n\003day\030\002 \002(\t\022\014\n\004hour\030\003 \002(\r\022\030"
    "\n\020station_latitude\030\004 \002(\001\022\031\n\021station_long"
    "itude\030\005 \002(\001\022\033\n\023wind_speed_in_knots\030\006 \001(\010"
    "\022\035\n\025marsden_square_number\030\007 \001(\005\022%\n\035mobil"
    "e_land_station_elevation\030\010 \001(\001\022\031\n\021confid"
    "ence_factor\030\t \001(\005\022\036\n\026uid_transmet_raw_da"
    "tum\030& \002(\r\022\"\n\032cloud_amount_low_or_middle\030"
    "\n \001(\r\022\027\n\017cloud_high_type\030\013 \001(\t\022\030\n\020cloud_"
    "lower_type\030\014 \001(\t\022\031\n\021cloud_middle_type\030\r "
    "\001(\t\022$\n\034launch_or_release_sonde_time\030\016 \001("
    "\t\022\034\n\024lowest_clouds_height\030\020 \001(\005\022\037\n\027max_w"
    "ind_level_pressure\030\021 \001(\001\022%\n\035max_wind_lev"
    "el_wind_direction\030\022 \001(\005\022!\n\031max_wind_leve"
    "l_wind_speed\030\023 \001(\001\022\034\n\024radiation_correcti"
    "on\030\024 \001(\r\022\037\n\027sea_surface_temperature\030\025 \001("
    "\001\022F\n)significant_levels_respect_to_tempe"
    "rature\030\026 \003(\0132\023.TempData.LevelData\022\?\n\"sig"
    "nificant_levels_respect_to_wind\030\027 \003(\0132\023."
    "TempData.LevelData\022\024\n\014sonde_system\030\030 \001(\005"
    "\022\026\n\016sonde_tracking\030\031 \001(\005\022)\n\014surface_data"
    "\030\032 \001(\0132\023.TempData.LevelData\0227\n\032standard_"
    "isobaric_surfaces\030\033 \003(\0132\023.TempData.Level"
    "Data\022,\n\017tropopause_data\030\034 \003(\0132\023.TempData"
    ".LevelData\022.\n\021maximum_wind_data\030\035 \003(\0132\023."
    "TempData.LevelData\022$\n\034level_wind_speed_i"
    "s_greatest\030\036 \001(\010\022\020\n\010wmo_code\030\037 \001(\r\022\021\n\tpa"
    "rt_type\030) \002(\005\022&\n\tleveldata\030* \001(\0132\023.TempD"
    "ata.LevelData\032\224\003\n\tLevelData\022\r\n\005level\030\007 \001"
    "(\005\022\021\n\tgeoheight\030\001 \001(\005\022\023\n\013temperature\030\002 \001"
    "(\001\022\030\n\020temperature_sign\030\006 \001(\005\022\021\n\tdew_poin"
    "t\030\003 \001(\001\022\026\n\016wind_direction\030\004 \001(\005\022\022\n\nwind_"
    "speed\030\005 \001(\005\022\"\n\032is_relative_topography_ma"
    "p\030\010 \001(\010\022\033\n\023isobaric_height_500\030\t \001(\005\022\034\n\024"
    "isobaric_height_1000\030\n \001(\005\022!\n\031abs_geohei"
    "ght_changing_12\030\013 \001(\005\022!\n\031abs_geoheight_c"
    "hanging_24\030\014 \001(\005\022\020\n\010pressure\030\r \001(\005\022\037\n\027ve"
    "ctor_difference_above\030\016 \001(\005\022\037\n\027vector_di"
    "fference_below\030\017 \001(\005", 1540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "temp-data.proto", &protobuf_RegisterTypes);
  TempData::default_instance_ = new TempData();
  TempData_LevelData::default_instance_ = new TempData_LevelData();
  TempData::default_instance_->InitAsDefaultInstance();
  TempData_LevelData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_temp_2ddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_temp_2ddata_2eproto {
  StaticDescriptorInitializer_temp_2ddata_2eproto() {
    protobuf_AddDesc_temp_2ddata_2eproto();
  }
} static_descriptor_initializer_temp_2ddata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TempData_LevelData::kLevelFieldNumber;
const int TempData_LevelData::kGeoheightFieldNumber;
const int TempData_LevelData::kTemperatureFieldNumber;
const int TempData_LevelData::kTemperatureSignFieldNumber;
const int TempData_LevelData::kDewPointFieldNumber;
const int TempData_LevelData::kWindDirectionFieldNumber;
const int TempData_LevelData::kWindSpeedFieldNumber;
const int TempData_LevelData::kIsRelativeTopographyMapFieldNumber;
const int TempData_LevelData::kIsobaricHeight500FieldNumber;
const int TempData_LevelData::kIsobaricHeight1000FieldNumber;
const int TempData_LevelData::kAbsGeoheightChanging12FieldNumber;
const int TempData_LevelData::kAbsGeoheightChanging24FieldNumber;
const int TempData_LevelData::kPressureFieldNumber;
const int TempData_LevelData::kVectorDifferenceAboveFieldNumber;
const int TempData_LevelData::kVectorDifferenceBelowFieldNumber;
#endif  // !_MSC_VER

TempData_LevelData::TempData_LevelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TempData_LevelData::InitAsDefaultInstance() {
}

TempData_LevelData::TempData_LevelData(const TempData_LevelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TempData_LevelData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  geoheight_ = 0;
  temperature_ = 0;
  temperature_sign_ = 0;
  dew_point_ = 0;
  wind_direction_ = 0;
  wind_speed_ = 0;
  is_relative_topography_map_ = false;
  isobaric_height_500_ = 0;
  isobaric_height_1000_ = 0;
  abs_geoheight_changing_12_ = 0;
  abs_geoheight_changing_24_ = 0;
  pressure_ = 0;
  vector_difference_above_ = 0;
  vector_difference_below_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TempData_LevelData::~TempData_LevelData() {
  SharedDtor();
}

void TempData_LevelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TempData_LevelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempData_LevelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempData_LevelData_descriptor_;
}

const TempData_LevelData& TempData_LevelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_temp_2ddata_2eproto();  return *default_instance_;
}

TempData_LevelData* TempData_LevelData::default_instance_ = NULL;

TempData_LevelData* TempData_LevelData::New() const {
  return new TempData_LevelData;
}

void TempData_LevelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    geoheight_ = 0;
    temperature_ = 0;
    temperature_sign_ = 0;
    dew_point_ = 0;
    wind_direction_ = 0;
    wind_speed_ = 0;
    is_relative_topography_map_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isobaric_height_500_ = 0;
    isobaric_height_1000_ = 0;
    abs_geoheight_changing_12_ = 0;
    abs_geoheight_changing_24_ = 0;
    pressure_ = 0;
    vector_difference_above_ = 0;
    vector_difference_below_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TempData_LevelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 geoheight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geoheight_)));
          set_has_geoheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_temperature;
        break;
      }
      
      // optional double temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dew_point;
        break;
      }
      
      // optional double dew_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dew_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dew_point_)));
          set_has_dew_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wind_direction;
        break;
      }
      
      // optional int32 wind_direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_direction_)));
          set_has_wind_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wind_speed;
        break;
      }
      
      // optional int32 wind_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_speed_)));
          set_has_wind_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_temperature_sign;
        break;
      }
      
      // optional int32 temperature_sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temperature_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_sign_)));
          set_has_temperature_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_relative_topography_map;
        break;
      }
      
      // optional bool is_relative_topography_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_relative_topography_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_relative_topography_map_)));
          set_has_is_relative_topography_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isobaric_height_500;
        break;
      }
      
      // optional int32 isobaric_height_500 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isobaric_height_500:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isobaric_height_500_)));
          set_has_isobaric_height_500();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isobaric_height_1000;
        break;
      }
      
      // optional int32 isobaric_height_1000 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isobaric_height_1000:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isobaric_height_1000_)));
          set_has_isobaric_height_1000();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_abs_geoheight_changing_12;
        break;
      }
      
      // optional int32 abs_geoheight_changing_12 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_geoheight_changing_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_geoheight_changing_12_)));
          set_has_abs_geoheight_changing_12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_abs_geoheight_changing_24;
        break;
      }
      
      // optional int32 abs_geoheight_changing_24 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abs_geoheight_changing_24:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_geoheight_changing_24_)));
          set_has_abs_geoheight_changing_24();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pressure;
        break;
      }
      
      // optional int32 pressure = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vector_difference_above;
        break;
      }
      
      // optional int32 vector_difference_above = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vector_difference_above:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vector_difference_above_)));
          set_has_vector_difference_above();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_vector_difference_below;
        break;
      }
      
      // optional int32 vector_difference_below = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vector_difference_below:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vector_difference_below_)));
          set_has_vector_difference_below();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TempData_LevelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 geoheight = 1;
  if (has_geoheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->geoheight(), output);
  }
  
  // optional double temperature = 2;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temperature(), output);
  }
  
  // optional double dew_point = 3;
  if (has_dew_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dew_point(), output);
  }
  
  // optional int32 wind_direction = 4;
  if (has_wind_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wind_direction(), output);
  }
  
  // optional int32 wind_speed = 5;
  if (has_wind_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wind_speed(), output);
  }
  
  // optional int32 temperature_sign = 6;
  if (has_temperature_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->temperature_sign(), output);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }
  
  // optional bool is_relative_topography_map = 8;
  if (has_is_relative_topography_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_relative_topography_map(), output);
  }
  
  // optional int32 isobaric_height_500 = 9;
  if (has_isobaric_height_500()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isobaric_height_500(), output);
  }
  
  // optional int32 isobaric_height_1000 = 10;
  if (has_isobaric_height_1000()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isobaric_height_1000(), output);
  }
  
  // optional int32 abs_geoheight_changing_12 = 11;
  if (has_abs_geoheight_changing_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->abs_geoheight_changing_12(), output);
  }
  
  // optional int32 abs_geoheight_changing_24 = 12;
  if (has_abs_geoheight_changing_24()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->abs_geoheight_changing_24(), output);
  }
  
  // optional int32 pressure = 13;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pressure(), output);
  }
  
  // optional int32 vector_difference_above = 14;
  if (has_vector_difference_above()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vector_difference_above(), output);
  }
  
  // optional int32 vector_difference_below = 15;
  if (has_vector_difference_below()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->vector_difference_below(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TempData_LevelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 geoheight = 1;
  if (has_geoheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->geoheight(), target);
  }
  
  // optional double temperature = 2;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temperature(), target);
  }
  
  // optional double dew_point = 3;
  if (has_dew_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dew_point(), target);
  }
  
  // optional int32 wind_direction = 4;
  if (has_wind_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wind_direction(), target);
  }
  
  // optional int32 wind_speed = 5;
  if (has_wind_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wind_speed(), target);
  }
  
  // optional int32 temperature_sign = 6;
  if (has_temperature_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->temperature_sign(), target);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }
  
  // optional bool is_relative_topography_map = 8;
  if (has_is_relative_topography_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_relative_topography_map(), target);
  }
  
  // optional int32 isobaric_height_500 = 9;
  if (has_isobaric_height_500()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isobaric_height_500(), target);
  }
  
  // optional int32 isobaric_height_1000 = 10;
  if (has_isobaric_height_1000()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isobaric_height_1000(), target);
  }
  
  // optional int32 abs_geoheight_changing_12 = 11;
  if (has_abs_geoheight_changing_12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->abs_geoheight_changing_12(), target);
  }
  
  // optional int32 abs_geoheight_changing_24 = 12;
  if (has_abs_geoheight_changing_24()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->abs_geoheight_changing_24(), target);
  }
  
  // optional int32 pressure = 13;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pressure(), target);
  }
  
  // optional int32 vector_difference_above = 14;
  if (has_vector_difference_above()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vector_difference_above(), target);
  }
  
  // optional int32 vector_difference_below = 15;
  if (has_vector_difference_below()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->vector_difference_below(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TempData_LevelData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 geoheight = 1;
    if (has_geoheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geoheight());
    }
    
    // optional double temperature = 2;
    if (has_temperature()) {
      total_size += 1 + 8;
    }
    
    // optional int32 temperature_sign = 6;
    if (has_temperature_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature_sign());
    }
    
    // optional double dew_point = 3;
    if (has_dew_point()) {
      total_size += 1 + 8;
    }
    
    // optional int32 wind_direction = 4;
    if (has_wind_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_direction());
    }
    
    // optional int32 wind_speed = 5;
    if (has_wind_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_speed());
    }
    
    // optional bool is_relative_topography_map = 8;
    if (has_is_relative_topography_map()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isobaric_height_500 = 9;
    if (has_isobaric_height_500()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isobaric_height_500());
    }
    
    // optional int32 isobaric_height_1000 = 10;
    if (has_isobaric_height_1000()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isobaric_height_1000());
    }
    
    // optional int32 abs_geoheight_changing_12 = 11;
    if (has_abs_geoheight_changing_12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_geoheight_changing_12());
    }
    
    // optional int32 abs_geoheight_changing_24 = 12;
    if (has_abs_geoheight_changing_24()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_geoheight_changing_24());
    }
    
    // optional int32 pressure = 13;
    if (has_pressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pressure());
    }
    
    // optional int32 vector_difference_above = 14;
    if (has_vector_difference_above()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vector_difference_above());
    }
    
    // optional int32 vector_difference_below = 15;
    if (has_vector_difference_below()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vector_difference_below());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempData_LevelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TempData_LevelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TempData_LevelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TempData_LevelData::MergeFrom(const TempData_LevelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_geoheight()) {
      set_geoheight(from.geoheight());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_temperature_sign()) {
      set_temperature_sign(from.temperature_sign());
    }
    if (from.has_dew_point()) {
      set_dew_point(from.dew_point());
    }
    if (from.has_wind_direction()) {
      set_wind_direction(from.wind_direction());
    }
    if (from.has_wind_speed()) {
      set_wind_speed(from.wind_speed());
    }
    if (from.has_is_relative_topography_map()) {
      set_is_relative_topography_map(from.is_relative_topography_map());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isobaric_height_500()) {
      set_isobaric_height_500(from.isobaric_height_500());
    }
    if (from.has_isobaric_height_1000()) {
      set_isobaric_height_1000(from.isobaric_height_1000());
    }
    if (from.has_abs_geoheight_changing_12()) {
      set_abs_geoheight_changing_12(from.abs_geoheight_changing_12());
    }
    if (from.has_abs_geoheight_changing_24()) {
      set_abs_geoheight_changing_24(from.abs_geoheight_changing_24());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_vector_difference_above()) {
      set_vector_difference_above(from.vector_difference_above());
    }
    if (from.has_vector_difference_below()) {
      set_vector_difference_below(from.vector_difference_below());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TempData_LevelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempData_LevelData::CopyFrom(const TempData_LevelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempData_LevelData::IsInitialized() const {
  
  return true;
}

void TempData_LevelData::Swap(TempData_LevelData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(geoheight_, other->geoheight_);
    std::swap(temperature_, other->temperature_);
    std::swap(temperature_sign_, other->temperature_sign_);
    std::swap(dew_point_, other->dew_point_);
    std::swap(wind_direction_, other->wind_direction_);
    std::swap(wind_speed_, other->wind_speed_);
    std::swap(is_relative_topography_map_, other->is_relative_topography_map_);
    std::swap(isobaric_height_500_, other->isobaric_height_500_);
    std::swap(isobaric_height_1000_, other->isobaric_height_1000_);
    std::swap(abs_geoheight_changing_12_, other->abs_geoheight_changing_12_);
    std::swap(abs_geoheight_changing_24_, other->abs_geoheight_changing_24_);
    std::swap(pressure_, other->pressure_);
    std::swap(vector_difference_above_, other->vector_difference_above_);
    std::swap(vector_difference_below_, other->vector_difference_below_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TempData_LevelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempData_LevelData_descriptor_;
  metadata.reflection = TempData_LevelData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TempData::kUidStationFieldNumber;
const int TempData::kDayFieldNumber;
const int TempData::kHourFieldNumber;
const int TempData::kStationLatitudeFieldNumber;
const int TempData::kStationLongitudeFieldNumber;
const int TempData::kWindSpeedInKnotsFieldNumber;
const int TempData::kMarsdenSquareNumberFieldNumber;
const int TempData::kMobileLandStationElevationFieldNumber;
const int TempData::kConfidenceFactorFieldNumber;
const int TempData::kUidTransmetRawDatumFieldNumber;
const int TempData::kCloudAmountLowOrMiddleFieldNumber;
const int TempData::kCloudHighTypeFieldNumber;
const int TempData::kCloudLowerTypeFieldNumber;
const int TempData::kCloudMiddleTypeFieldNumber;
const int TempData::kLaunchOrReleaseSondeTimeFieldNumber;
const int TempData::kLowestCloudsHeightFieldNumber;
const int TempData::kMaxWindLevelPressureFieldNumber;
const int TempData::kMaxWindLevelWindDirectionFieldNumber;
const int TempData::kMaxWindLevelWindSpeedFieldNumber;
const int TempData::kRadiationCorrectionFieldNumber;
const int TempData::kSeaSurfaceTemperatureFieldNumber;
const int TempData::kSignificantLevelsRespectToTemperatureFieldNumber;
const int TempData::kSignificantLevelsRespectToWindFieldNumber;
const int TempData::kSondeSystemFieldNumber;
const int TempData::kSondeTrackingFieldNumber;
const int TempData::kSurfaceDataFieldNumber;
const int TempData::kStandardIsobaricSurfacesFieldNumber;
const int TempData::kTropopauseDataFieldNumber;
const int TempData::kMaximumWindDataFieldNumber;
const int TempData::kLevelWindSpeedIsGreatestFieldNumber;
const int TempData::kWmoCodeFieldNumber;
const int TempData::kPartTypeFieldNumber;
const int TempData::kLeveldataFieldNumber;
#endif  // !_MSC_VER

TempData::TempData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TempData::InitAsDefaultInstance() {
  surface_data_ = const_cast< ::TempData_LevelData*>(&::TempData_LevelData::default_instance());
  leveldata_ = const_cast< ::TempData_LevelData*>(&::TempData_LevelData::default_instance());
}

TempData::TempData(const TempData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TempData::SharedCtor() {
  _cached_size_ = 0;
  uid_station_ = 0u;
  day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hour_ = 0u;
  station_latitude_ = 0;
  station_longitude_ = 0;
  wind_speed_in_knots_ = false;
  marsden_square_number_ = 0;
  mobile_land_station_elevation_ = 0;
  confidence_factor_ = 0;
  uid_transmet_raw_datum_ = 0u;
  cloud_amount_low_or_middle_ = 0u;
  cloud_high_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cloud_lower_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cloud_middle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  launch_or_release_sonde_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lowest_clouds_height_ = 0;
  max_wind_level_pressure_ = 0;
  max_wind_level_wind_direction_ = 0;
  max_wind_level_wind_speed_ = 0;
  radiation_correction_ = 0u;
  sea_surface_temperature_ = 0;
  sonde_system_ = 0;
  sonde_tracking_ = 0;
  surface_data_ = NULL;
  level_wind_speed_is_greatest_ = false;
  wmo_code_ = 0u;
  part_type_ = 0;
  leveldata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TempData::~TempData() {
  SharedDtor();
}

void TempData::SharedDtor() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    delete day_;
  }
  if (cloud_high_type_ != &::google::protobuf::internal::kEmptyString) {
    delete cloud_high_type_;
  }
  if (cloud_lower_type_ != &::google::protobuf::internal::kEmptyString) {
    delete cloud_lower_type_;
  }
  if (cloud_middle_type_ != &::google::protobuf::internal::kEmptyString) {
    delete cloud_middle_type_;
  }
  if (launch_or_release_sonde_time_ != &::google::protobuf::internal::kEmptyString) {
    delete launch_or_release_sonde_time_;
  }
  if (this != default_instance_) {
    delete surface_data_;
    delete leveldata_;
  }
}

void TempData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempData_descriptor_;
}

const TempData& TempData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_temp_2ddata_2eproto();  return *default_instance_;
}

TempData* TempData::default_instance_ = NULL;

TempData* TempData::New() const {
  return new TempData;
}

void TempData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_station_ = 0u;
    if (has_day()) {
      if (day_ != &::google::protobuf::internal::kEmptyString) {
        day_->clear();
      }
    }
    hour_ = 0u;
    station_latitude_ = 0;
    station_longitude_ = 0;
    wind_speed_in_knots_ = false;
    marsden_square_number_ = 0;
    mobile_land_station_elevation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    confidence_factor_ = 0;
    uid_transmet_raw_datum_ = 0u;
    cloud_amount_low_or_middle_ = 0u;
    if (has_cloud_high_type()) {
      if (cloud_high_type_ != &::google::protobuf::internal::kEmptyString) {
        cloud_high_type_->clear();
      }
    }
    if (has_cloud_lower_type()) {
      if (cloud_lower_type_ != &::google::protobuf::internal::kEmptyString) {
        cloud_lower_type_->clear();
      }
    }
    if (has_cloud_middle_type()) {
      if (cloud_middle_type_ != &::google::protobuf::internal::kEmptyString) {
        cloud_middle_type_->clear();
      }
    }
    if (has_launch_or_release_sonde_time()) {
      if (launch_or_release_sonde_time_ != &::google::protobuf::internal::kEmptyString) {
        launch_or_release_sonde_time_->clear();
      }
    }
    lowest_clouds_height_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_wind_level_pressure_ = 0;
    max_wind_level_wind_direction_ = 0;
    max_wind_level_wind_speed_ = 0;
    radiation_correction_ = 0u;
    sea_surface_temperature_ = 0;
    sonde_system_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sonde_tracking_ = 0;
    if (has_surface_data()) {
      if (surface_data_ != NULL) surface_data_->::TempData_LevelData::Clear();
    }
    level_wind_speed_is_greatest_ = false;
    wmo_code_ = 0u;
    part_type_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_leveldata()) {
      if (leveldata_ != NULL) leveldata_->::TempData_LevelData::Clear();
    }
  }
  significant_levels_respect_to_temperature_.Clear();
  significant_levels_respect_to_wind_.Clear();
  standard_isobaric_surfaces_.Clear();
  tropopause_data_.Clear();
  maximum_wind_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TempData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid_station = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_station_)));
          set_has_uid_station();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_day;
        break;
      }
      
      // required string day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hour;
        break;
      }
      
      // required uint32 hour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_station_latitude;
        break;
      }
      
      // required double station_latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_station_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_latitude_)));
          set_has_station_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_station_longitude;
        break;
      }
      
      // required double station_longitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_station_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_longitude_)));
          set_has_station_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wind_speed_in_knots;
        break;
      }
      
      // optional bool wind_speed_in_knots = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wind_speed_in_knots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wind_speed_in_knots_)));
          set_has_wind_speed_in_knots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_marsden_square_number;
        break;
      }
      
      // optional int32 marsden_square_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marsden_square_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marsden_square_number_)));
          set_has_marsden_square_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_mobile_land_station_elevation;
        break;
      }
      
      // optional double mobile_land_station_elevation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mobile_land_station_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mobile_land_station_elevation_)));
          set_has_mobile_land_station_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_confidence_factor;
        break;
      }
      
      // optional int32 confidence_factor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confidence_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_factor_)));
          set_has_confidence_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cloud_amount_low_or_middle;
        break;
      }
      
      // optional uint32 cloud_amount_low_or_middle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_amount_low_or_middle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_amount_low_or_middle_)));
          set_has_cloud_amount_low_or_middle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cloud_high_type;
        break;
      }
      
      // optional string cloud_high_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloud_high_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_high_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cloud_high_type().data(), this->cloud_high_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cloud_lower_type;
        break;
      }
      
      // optional string cloud_lower_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloud_lower_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_lower_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cloud_lower_type().data(), this->cloud_lower_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cloud_middle_type;
        break;
      }
      
      // optional string cloud_middle_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloud_middle_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_middle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cloud_middle_type().data(), this->cloud_middle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_launch_or_release_sonde_time;
        break;
      }
      
      // optional string launch_or_release_sonde_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_launch_or_release_sonde_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_launch_or_release_sonde_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->launch_or_release_sonde_time().data(), this->launch_or_release_sonde_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lowest_clouds_height;
        break;
      }
      
      // optional int32 lowest_clouds_height = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowest_clouds_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowest_clouds_height_)));
          set_has_lowest_clouds_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_max_wind_level_pressure;
        break;
      }
      
      // optional double max_wind_level_pressure = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_wind_level_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_wind_level_pressure_)));
          set_has_max_wind_level_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_max_wind_level_wind_direction;
        break;
      }
      
      // optional int32 max_wind_level_wind_direction = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_wind_level_wind_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_wind_level_wind_direction_)));
          set_has_max_wind_level_wind_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_max_wind_level_wind_speed;
        break;
      }
      
      // optional double max_wind_level_wind_speed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_wind_level_wind_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_wind_level_wind_speed_)));
          set_has_max_wind_level_wind_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_radiation_correction;
        break;
      }
      
      // optional uint32 radiation_correction = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radiation_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiation_correction_)));
          set_has_radiation_correction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_sea_surface_temperature;
        break;
      }
      
      // optional double sea_surface_temperature = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sea_surface_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sea_surface_temperature_)));
          set_has_sea_surface_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_significant_levels_respect_to_temperature;
        break;
      }
      
      // repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_significant_levels_respect_to_temperature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_significant_levels_respect_to_temperature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_significant_levels_respect_to_temperature;
        if (input->ExpectTag(186)) goto parse_significant_levels_respect_to_wind;
        break;
      }
      
      // repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_significant_levels_respect_to_wind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_significant_levels_respect_to_wind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_significant_levels_respect_to_wind;
        if (input->ExpectTag(192)) goto parse_sonde_system;
        break;
      }
      
      // optional int32 sonde_system = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sonde_system:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sonde_system_)));
          set_has_sonde_system();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sonde_tracking;
        break;
      }
      
      // optional int32 sonde_tracking = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sonde_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sonde_tracking_)));
          set_has_sonde_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_surface_data;
        break;
      }
      
      // optional .TempData.LevelData surface_data = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surface_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_standard_isobaric_surfaces;
        break;
      }
      
      // repeated .TempData.LevelData standard_isobaric_surfaces = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_isobaric_surfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_standard_isobaric_surfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_standard_isobaric_surfaces;
        if (input->ExpectTag(226)) goto parse_tropopause_data;
        break;
      }
      
      // repeated .TempData.LevelData tropopause_data = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tropopause_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tropopause_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_tropopause_data;
        if (input->ExpectTag(234)) goto parse_maximum_wind_data;
        break;
      }
      
      // repeated .TempData.LevelData maximum_wind_data = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maximum_wind_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maximum_wind_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_maximum_wind_data;
        if (input->ExpectTag(240)) goto parse_level_wind_speed_is_greatest;
        break;
      }
      
      // optional bool level_wind_speed_is_greatest = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_wind_speed_is_greatest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &level_wind_speed_is_greatest_)));
          set_has_level_wind_speed_is_greatest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_wmo_code;
        break;
      }
      
      // optional uint32 wmo_code = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wmo_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wmo_code_)));
          set_has_wmo_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_uid_transmet_raw_datum;
        break;
      }
      
      // required uint32 uid_transmet_raw_datum = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid_transmet_raw_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_transmet_raw_datum_)));
          set_has_uid_transmet_raw_datum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_part_type;
        break;
      }
      
      // required int32 part_type = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_type_)));
          set_has_part_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_leveldata;
        break;
      }
      
      // optional .TempData.LevelData leveldata = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leveldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leveldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TempData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid_station = 1;
  if (has_uid_station()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid_station(), output);
  }
  
  // required string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->day(), output);
  }
  
  // required uint32 hour = 3;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hour(), output);
  }
  
  // required double station_latitude = 4;
  if (has_station_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->station_latitude(), output);
  }
  
  // required double station_longitude = 5;
  if (has_station_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_longitude(), output);
  }
  
  // optional bool wind_speed_in_knots = 6;
  if (has_wind_speed_in_knots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->wind_speed_in_knots(), output);
  }
  
  // optional int32 marsden_square_number = 7;
  if (has_marsden_square_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->marsden_square_number(), output);
  }
  
  // optional double mobile_land_station_elevation = 8;
  if (has_mobile_land_station_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mobile_land_station_elevation(), output);
  }
  
  // optional int32 confidence_factor = 9;
  if (has_confidence_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->confidence_factor(), output);
  }
  
  // optional uint32 cloud_amount_low_or_middle = 10;
  if (has_cloud_amount_low_or_middle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cloud_amount_low_or_middle(), output);
  }
  
  // optional string cloud_high_type = 11;
  if (has_cloud_high_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_high_type().data(), this->cloud_high_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cloud_high_type(), output);
  }
  
  // optional string cloud_lower_type = 12;
  if (has_cloud_lower_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_lower_type().data(), this->cloud_lower_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cloud_lower_type(), output);
  }
  
  // optional string cloud_middle_type = 13;
  if (has_cloud_middle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_middle_type().data(), this->cloud_middle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->cloud_middle_type(), output);
  }
  
  // optional string launch_or_release_sonde_time = 14;
  if (has_launch_or_release_sonde_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->launch_or_release_sonde_time().data(), this->launch_or_release_sonde_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->launch_or_release_sonde_time(), output);
  }
  
  // optional int32 lowest_clouds_height = 16;
  if (has_lowest_clouds_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lowest_clouds_height(), output);
  }
  
  // optional double max_wind_level_pressure = 17;
  if (has_max_wind_level_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->max_wind_level_pressure(), output);
  }
  
  // optional int32 max_wind_level_wind_direction = 18;
  if (has_max_wind_level_wind_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_wind_level_wind_direction(), output);
  }
  
  // optional double max_wind_level_wind_speed = 19;
  if (has_max_wind_level_wind_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->max_wind_level_wind_speed(), output);
  }
  
  // optional uint32 radiation_correction = 20;
  if (has_radiation_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiation_correction(), output);
  }
  
  // optional double sea_surface_temperature = 21;
  if (has_sea_surface_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->sea_surface_temperature(), output);
  }
  
  // repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
  for (int i = 0; i < this->significant_levels_respect_to_temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->significant_levels_respect_to_temperature(i), output);
  }
  
  // repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
  for (int i = 0; i < this->significant_levels_respect_to_wind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->significant_levels_respect_to_wind(i), output);
  }
  
  // optional int32 sonde_system = 24;
  if (has_sonde_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->sonde_system(), output);
  }
  
  // optional int32 sonde_tracking = 25;
  if (has_sonde_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->sonde_tracking(), output);
  }
  
  // optional .TempData.LevelData surface_data = 26;
  if (has_surface_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->surface_data(), output);
  }
  
  // repeated .TempData.LevelData standard_isobaric_surfaces = 27;
  for (int i = 0; i < this->standard_isobaric_surfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->standard_isobaric_surfaces(i), output);
  }
  
  // repeated .TempData.LevelData tropopause_data = 28;
  for (int i = 0; i < this->tropopause_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->tropopause_data(i), output);
  }
  
  // repeated .TempData.LevelData maximum_wind_data = 29;
  for (int i = 0; i < this->maximum_wind_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->maximum_wind_data(i), output);
  }
  
  // optional bool level_wind_speed_is_greatest = 30;
  if (has_level_wind_speed_is_greatest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->level_wind_speed_is_greatest(), output);
  }
  
  // optional uint32 wmo_code = 31;
  if (has_wmo_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->wmo_code(), output);
  }
  
  // required uint32 uid_transmet_raw_datum = 38;
  if (has_uid_transmet_raw_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->uid_transmet_raw_datum(), output);
  }
  
  // required int32 part_type = 41;
  if (has_part_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->part_type(), output);
  }
  
  // optional .TempData.LevelData leveldata = 42;
  if (has_leveldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->leveldata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TempData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid_station = 1;
  if (has_uid_station()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid_station(), target);
  }
  
  // required string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->day(), target);
  }
  
  // required uint32 hour = 3;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hour(), target);
  }
  
  // required double station_latitude = 4;
  if (has_station_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->station_latitude(), target);
  }
  
  // required double station_longitude = 5;
  if (has_station_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_longitude(), target);
  }
  
  // optional bool wind_speed_in_knots = 6;
  if (has_wind_speed_in_knots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->wind_speed_in_knots(), target);
  }
  
  // optional int32 marsden_square_number = 7;
  if (has_marsden_square_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->marsden_square_number(), target);
  }
  
  // optional double mobile_land_station_elevation = 8;
  if (has_mobile_land_station_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mobile_land_station_elevation(), target);
  }
  
  // optional int32 confidence_factor = 9;
  if (has_confidence_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->confidence_factor(), target);
  }
  
  // optional uint32 cloud_amount_low_or_middle = 10;
  if (has_cloud_amount_low_or_middle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cloud_amount_low_or_middle(), target);
  }
  
  // optional string cloud_high_type = 11;
  if (has_cloud_high_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_high_type().data(), this->cloud_high_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cloud_high_type(), target);
  }
  
  // optional string cloud_lower_type = 12;
  if (has_cloud_lower_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_lower_type().data(), this->cloud_lower_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cloud_lower_type(), target);
  }
  
  // optional string cloud_middle_type = 13;
  if (has_cloud_middle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cloud_middle_type().data(), this->cloud_middle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cloud_middle_type(), target);
  }
  
  // optional string launch_or_release_sonde_time = 14;
  if (has_launch_or_release_sonde_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->launch_or_release_sonde_time().data(), this->launch_or_release_sonde_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->launch_or_release_sonde_time(), target);
  }
  
  // optional int32 lowest_clouds_height = 16;
  if (has_lowest_clouds_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lowest_clouds_height(), target);
  }
  
  // optional double max_wind_level_pressure = 17;
  if (has_max_wind_level_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->max_wind_level_pressure(), target);
  }
  
  // optional int32 max_wind_level_wind_direction = 18;
  if (has_max_wind_level_wind_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_wind_level_wind_direction(), target);
  }
  
  // optional double max_wind_level_wind_speed = 19;
  if (has_max_wind_level_wind_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->max_wind_level_wind_speed(), target);
  }
  
  // optional uint32 radiation_correction = 20;
  if (has_radiation_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiation_correction(), target);
  }
  
  // optional double sea_surface_temperature = 21;
  if (has_sea_surface_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->sea_surface_temperature(), target);
  }
  
  // repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
  for (int i = 0; i < this->significant_levels_respect_to_temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->significant_levels_respect_to_temperature(i), target);
  }
  
  // repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
  for (int i = 0; i < this->significant_levels_respect_to_wind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->significant_levels_respect_to_wind(i), target);
  }
  
  // optional int32 sonde_system = 24;
  if (has_sonde_system()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->sonde_system(), target);
  }
  
  // optional int32 sonde_tracking = 25;
  if (has_sonde_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->sonde_tracking(), target);
  }
  
  // optional .TempData.LevelData surface_data = 26;
  if (has_surface_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->surface_data(), target);
  }
  
  // repeated .TempData.LevelData standard_isobaric_surfaces = 27;
  for (int i = 0; i < this->standard_isobaric_surfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->standard_isobaric_surfaces(i), target);
  }
  
  // repeated .TempData.LevelData tropopause_data = 28;
  for (int i = 0; i < this->tropopause_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->tropopause_data(i), target);
  }
  
  // repeated .TempData.LevelData maximum_wind_data = 29;
  for (int i = 0; i < this->maximum_wind_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->maximum_wind_data(i), target);
  }
  
  // optional bool level_wind_speed_is_greatest = 30;
  if (has_level_wind_speed_is_greatest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->level_wind_speed_is_greatest(), target);
  }
  
  // optional uint32 wmo_code = 31;
  if (has_wmo_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->wmo_code(), target);
  }
  
  // required uint32 uid_transmet_raw_datum = 38;
  if (has_uid_transmet_raw_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->uid_transmet_raw_datum(), target);
  }
  
  // required int32 part_type = 41;
  if (has_part_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->part_type(), target);
  }
  
  // optional .TempData.LevelData leveldata = 42;
  if (has_leveldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->leveldata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TempData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid_station = 1;
    if (has_uid_station()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid_station());
    }
    
    // required string day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }
    
    // required uint32 hour = 3;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }
    
    // required double station_latitude = 4;
    if (has_station_latitude()) {
      total_size += 1 + 8;
    }
    
    // required double station_longitude = 5;
    if (has_station_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional bool wind_speed_in_knots = 6;
    if (has_wind_speed_in_knots()) {
      total_size += 1 + 1;
    }
    
    // optional int32 marsden_square_number = 7;
    if (has_marsden_square_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marsden_square_number());
    }
    
    // optional double mobile_land_station_elevation = 8;
    if (has_mobile_land_station_elevation()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 confidence_factor = 9;
    if (has_confidence_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence_factor());
    }
    
    // required uint32 uid_transmet_raw_datum = 38;
    if (has_uid_transmet_raw_datum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid_transmet_raw_datum());
    }
    
    // optional uint32 cloud_amount_low_or_middle = 10;
    if (has_cloud_amount_low_or_middle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloud_amount_low_or_middle());
    }
    
    // optional string cloud_high_type = 11;
    if (has_cloud_high_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloud_high_type());
    }
    
    // optional string cloud_lower_type = 12;
    if (has_cloud_lower_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloud_lower_type());
    }
    
    // optional string cloud_middle_type = 13;
    if (has_cloud_middle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloud_middle_type());
    }
    
    // optional string launch_or_release_sonde_time = 14;
    if (has_launch_or_release_sonde_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->launch_or_release_sonde_time());
    }
    
    // optional int32 lowest_clouds_height = 16;
    if (has_lowest_clouds_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowest_clouds_height());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double max_wind_level_pressure = 17;
    if (has_max_wind_level_pressure()) {
      total_size += 2 + 8;
    }
    
    // optional int32 max_wind_level_wind_direction = 18;
    if (has_max_wind_level_wind_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_wind_level_wind_direction());
    }
    
    // optional double max_wind_level_wind_speed = 19;
    if (has_max_wind_level_wind_speed()) {
      total_size += 2 + 8;
    }
    
    // optional uint32 radiation_correction = 20;
    if (has_radiation_correction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiation_correction());
    }
    
    // optional double sea_surface_temperature = 21;
    if (has_sea_surface_temperature()) {
      total_size += 2 + 8;
    }
    
    // optional int32 sonde_system = 24;
    if (has_sonde_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sonde_system());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 sonde_tracking = 25;
    if (has_sonde_tracking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sonde_tracking());
    }
    
    // optional .TempData.LevelData surface_data = 26;
    if (has_surface_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface_data());
    }
    
    // optional bool level_wind_speed_is_greatest = 30;
    if (has_level_wind_speed_is_greatest()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 wmo_code = 31;
    if (has_wmo_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wmo_code());
    }
    
    // required int32 part_type = 41;
    if (has_part_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_type());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TempData.LevelData leveldata = 42;
    if (has_leveldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leveldata());
    }
    
  }
  // repeated .TempData.LevelData significant_levels_respect_to_temperature = 22;
  total_size += 2 * this->significant_levels_respect_to_temperature_size();
  for (int i = 0; i < this->significant_levels_respect_to_temperature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->significant_levels_respect_to_temperature(i));
  }
  
  // repeated .TempData.LevelData significant_levels_respect_to_wind = 23;
  total_size += 2 * this->significant_levels_respect_to_wind_size();
  for (int i = 0; i < this->significant_levels_respect_to_wind_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->significant_levels_respect_to_wind(i));
  }
  
  // repeated .TempData.LevelData standard_isobaric_surfaces = 27;
  total_size += 2 * this->standard_isobaric_surfaces_size();
  for (int i = 0; i < this->standard_isobaric_surfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->standard_isobaric_surfaces(i));
  }
  
  // repeated .TempData.LevelData tropopause_data = 28;
  total_size += 2 * this->tropopause_data_size();
  for (int i = 0; i < this->tropopause_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tropopause_data(i));
  }
  
  // repeated .TempData.LevelData maximum_wind_data = 29;
  total_size += 2 * this->maximum_wind_data_size();
  for (int i = 0; i < this->maximum_wind_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maximum_wind_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TempData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TempData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TempData::MergeFrom(const TempData& from) {
  GOOGLE_CHECK_NE(&from, this);
  significant_levels_respect_to_temperature_.MergeFrom(from.significant_levels_respect_to_temperature_);
  significant_levels_respect_to_wind_.MergeFrom(from.significant_levels_respect_to_wind_);
  standard_isobaric_surfaces_.MergeFrom(from.standard_isobaric_surfaces_);
  tropopause_data_.MergeFrom(from.tropopause_data_);
  maximum_wind_data_.MergeFrom(from.maximum_wind_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid_station()) {
      set_uid_station(from.uid_station());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_station_latitude()) {
      set_station_latitude(from.station_latitude());
    }
    if (from.has_station_longitude()) {
      set_station_longitude(from.station_longitude());
    }
    if (from.has_wind_speed_in_knots()) {
      set_wind_speed_in_knots(from.wind_speed_in_knots());
    }
    if (from.has_marsden_square_number()) {
      set_marsden_square_number(from.marsden_square_number());
    }
    if (from.has_mobile_land_station_elevation()) {
      set_mobile_land_station_elevation(from.mobile_land_station_elevation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_confidence_factor()) {
      set_confidence_factor(from.confidence_factor());
    }
    if (from.has_uid_transmet_raw_datum()) {
      set_uid_transmet_raw_datum(from.uid_transmet_raw_datum());
    }
    if (from.has_cloud_amount_low_or_middle()) {
      set_cloud_amount_low_or_middle(from.cloud_amount_low_or_middle());
    }
    if (from.has_cloud_high_type()) {
      set_cloud_high_type(from.cloud_high_type());
    }
    if (from.has_cloud_lower_type()) {
      set_cloud_lower_type(from.cloud_lower_type());
    }
    if (from.has_cloud_middle_type()) {
      set_cloud_middle_type(from.cloud_middle_type());
    }
    if (from.has_launch_or_release_sonde_time()) {
      set_launch_or_release_sonde_time(from.launch_or_release_sonde_time());
    }
    if (from.has_lowest_clouds_height()) {
      set_lowest_clouds_height(from.lowest_clouds_height());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_wind_level_pressure()) {
      set_max_wind_level_pressure(from.max_wind_level_pressure());
    }
    if (from.has_max_wind_level_wind_direction()) {
      set_max_wind_level_wind_direction(from.max_wind_level_wind_direction());
    }
    if (from.has_max_wind_level_wind_speed()) {
      set_max_wind_level_wind_speed(from.max_wind_level_wind_speed());
    }
    if (from.has_radiation_correction()) {
      set_radiation_correction(from.radiation_correction());
    }
    if (from.has_sea_surface_temperature()) {
      set_sea_surface_temperature(from.sea_surface_temperature());
    }
    if (from.has_sonde_system()) {
      set_sonde_system(from.sonde_system());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sonde_tracking()) {
      set_sonde_tracking(from.sonde_tracking());
    }
    if (from.has_surface_data()) {
      mutable_surface_data()->::TempData_LevelData::MergeFrom(from.surface_data());
    }
    if (from.has_level_wind_speed_is_greatest()) {
      set_level_wind_speed_is_greatest(from.level_wind_speed_is_greatest());
    }
    if (from.has_wmo_code()) {
      set_wmo_code(from.wmo_code());
    }
    if (from.has_part_type()) {
      set_part_type(from.part_type());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_leveldata()) {
      mutable_leveldata()->::TempData_LevelData::MergeFrom(from.leveldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TempData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempData::CopyFrom(const TempData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempData::IsInitialized() const {
  if ((_has_bits_[0] & 0x8000021e) != 0x8000021e) return false;
  
  return true;
}

void TempData::Swap(TempData* other) {
  if (other != this) {
    std::swap(uid_station_, other->uid_station_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(station_latitude_, other->station_latitude_);
    std::swap(station_longitude_, other->station_longitude_);
    std::swap(wind_speed_in_knots_, other->wind_speed_in_knots_);
    std::swap(marsden_square_number_, other->marsden_square_number_);
    std::swap(mobile_land_station_elevation_, other->mobile_land_station_elevation_);
    std::swap(confidence_factor_, other->confidence_factor_);
    std::swap(uid_transmet_raw_datum_, other->uid_transmet_raw_datum_);
    std::swap(cloud_amount_low_or_middle_, other->cloud_amount_low_or_middle_);
    std::swap(cloud_high_type_, other->cloud_high_type_);
    std::swap(cloud_lower_type_, other->cloud_lower_type_);
    std::swap(cloud_middle_type_, other->cloud_middle_type_);
    std::swap(launch_or_release_sonde_time_, other->launch_or_release_sonde_time_);
    std::swap(lowest_clouds_height_, other->lowest_clouds_height_);
    std::swap(max_wind_level_pressure_, other->max_wind_level_pressure_);
    std::swap(max_wind_level_wind_direction_, other->max_wind_level_wind_direction_);
    std::swap(max_wind_level_wind_speed_, other->max_wind_level_wind_speed_);
    std::swap(radiation_correction_, other->radiation_correction_);
    std::swap(sea_surface_temperature_, other->sea_surface_temperature_);
    significant_levels_respect_to_temperature_.Swap(&other->significant_levels_respect_to_temperature_);
    significant_levels_respect_to_wind_.Swap(&other->significant_levels_respect_to_wind_);
    std::swap(sonde_system_, other->sonde_system_);
    std::swap(sonde_tracking_, other->sonde_tracking_);
    std::swap(surface_data_, other->surface_data_);
    standard_isobaric_surfaces_.Swap(&other->standard_isobaric_surfaces_);
    tropopause_data_.Swap(&other->tropopause_data_);
    maximum_wind_data_.Swap(&other->maximum_wind_data_);
    std::swap(level_wind_speed_is_greatest_, other->level_wind_speed_is_greatest_);
    std::swap(wmo_code_, other->wmo_code_);
    std::swap(part_type_, other->part_type_);
    std::swap(leveldata_, other->leveldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TempData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempData_descriptor_;
  metadata.reflection = TempData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
