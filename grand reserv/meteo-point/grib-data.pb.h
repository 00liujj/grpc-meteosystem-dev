// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grib-data.proto

#ifndef PROTOBUF_grib_2ddata_2eproto__INCLUDED
#define PROTOBUF_grib_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_grib_2ddata_2eproto();
void protobuf_AssignDesc_grib_2ddata_2eproto();
void protobuf_ShutdownFile_grib_2ddata_2eproto();

class GribData;
class GribData_lat_long_gauss_grid_t;

// ===================================================================

class GribData_lat_long_gauss_grid_t : public ::google::protobuf::Message {
 public:
  GribData_lat_long_gauss_grid_t();
  virtual ~GribData_lat_long_gauss_grid_t();
  
  GribData_lat_long_gauss_grid_t(const GribData_lat_long_gauss_grid_t& from);
  
  inline GribData_lat_long_gauss_grid_t& operator=(const GribData_lat_long_gauss_grid_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GribData_lat_long_gauss_grid_t& default_instance();
  
  void Swap(GribData_lat_long_gauss_grid_t* other);
  
  // implements Message ----------------------------------------------
  
  GribData_lat_long_gauss_grid_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GribData_lat_long_gauss_grid_t& from);
  void MergeFrom(const GribData_lat_long_gauss_grid_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 points_along_latitude_circle = 33;
  inline bool has_points_along_latitude_circle() const;
  inline void clear_points_along_latitude_circle();
  static const int kPointsAlongLatitudeCircleFieldNumber = 33;
  inline ::google::protobuf::uint32 points_along_latitude_circle() const;
  inline void set_points_along_latitude_circle(::google::protobuf::uint32 value);
  
  // optional uint32 points_along_longitude_meridian = 34;
  inline bool has_points_along_longitude_meridian() const;
  inline void clear_points_along_longitude_meridian();
  static const int kPointsAlongLongitudeMeridianFieldNumber = 34;
  inline ::google::protobuf::uint32 points_along_longitude_meridian() const;
  inline void set_points_along_longitude_meridian(::google::protobuf::uint32 value);
  
  // optional sint32 first_point_latitude = 35;
  inline bool has_first_point_latitude() const;
  inline void clear_first_point_latitude();
  static const int kFirstPointLatitudeFieldNumber = 35;
  inline ::google::protobuf::int32 first_point_latitude() const;
  inline void set_first_point_latitude(::google::protobuf::int32 value);
  
  // optional sint32 first_point_longitude = 36;
  inline bool has_first_point_longitude() const;
  inline void clear_first_point_longitude();
  static const int kFirstPointLongitudeFieldNumber = 36;
  inline ::google::protobuf::int32 first_point_longitude() const;
  inline void set_first_point_longitude(::google::protobuf::int32 value);
  
  // optional sint32 last_point_latitude = 37;
  inline bool has_last_point_latitude() const;
  inline void clear_last_point_latitude();
  static const int kLastPointLatitudeFieldNumber = 37;
  inline ::google::protobuf::int32 last_point_latitude() const;
  inline void set_last_point_latitude(::google::protobuf::int32 value);
  
  // optional sint32 last_point_longitude = 38;
  inline bool has_last_point_longitude() const;
  inline void clear_last_point_longitude();
  static const int kLastPointLongitudeFieldNumber = 38;
  inline ::google::protobuf::int32 last_point_longitude() const;
  inline void set_last_point_longitude(::google::protobuf::int32 value);
  
  // optional sint32 longitude_direction_increment = 39;
  inline bool has_longitude_direction_increment() const;
  inline void clear_longitude_direction_increment();
  static const int kLongitudeDirectionIncrementFieldNumber = 39;
  inline ::google::protobuf::int32 longitude_direction_increment() const;
  inline void set_longitude_direction_increment(::google::protobuf::int32 value);
  
  // optional sint32 latitude_direction_increment = 40;
  inline bool has_latitude_direction_increment() const;
  inline void clear_latitude_direction_increment();
  static const int kLatitudeDirectionIncrementFieldNumber = 40;
  inline ::google::protobuf::int32 latitude_direction_increment() const;
  inline void set_latitude_direction_increment(::google::protobuf::int32 value);
  
  // optional bool scan_i_positive = 41;
  inline bool has_scan_i_positive() const;
  inline void clear_scan_i_positive();
  static const int kScanIPositiveFieldNumber = 41;
  inline bool scan_i_positive() const;
  inline void set_scan_i_positive(bool value);
  
  // optional bool scan_j_positive = 42;
  inline bool has_scan_j_positive() const;
  inline void clear_scan_j_positive();
  static const int kScanJPositiveFieldNumber = 42;
  inline bool scan_j_positive() const;
  inline void set_scan_j_positive(bool value);
  
  // optional bool adjacent_i = 43;
  inline bool has_adjacent_i() const;
  inline void clear_adjacent_i();
  static const int kAdjacentIFieldNumber = 43;
  inline bool adjacent_i() const;
  inline void set_adjacent_i(bool value);
  
  // repeated uint32 points_along_parallel = 50;
  inline int points_along_parallel_size() const;
  inline void clear_points_along_parallel();
  static const int kPointsAlongParallelFieldNumber = 50;
  inline ::google::protobuf::uint32 points_along_parallel(int index) const;
  inline void set_points_along_parallel(int index, ::google::protobuf::uint32 value);
  inline void add_points_along_parallel(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      points_along_parallel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_points_along_parallel();
  
  // @@protoc_insertion_point(class_scope:GribData.lat_long_gauss_grid_t)
 private:
  inline void set_has_points_along_latitude_circle();
  inline void clear_has_points_along_latitude_circle();
  inline void set_has_points_along_longitude_meridian();
  inline void clear_has_points_along_longitude_meridian();
  inline void set_has_first_point_latitude();
  inline void clear_has_first_point_latitude();
  inline void set_has_first_point_longitude();
  inline void clear_has_first_point_longitude();
  inline void set_has_last_point_latitude();
  inline void clear_has_last_point_latitude();
  inline void set_has_last_point_longitude();
  inline void clear_has_last_point_longitude();
  inline void set_has_longitude_direction_increment();
  inline void clear_has_longitude_direction_increment();
  inline void set_has_latitude_direction_increment();
  inline void clear_has_latitude_direction_increment();
  inline void set_has_scan_i_positive();
  inline void clear_has_scan_i_positive();
  inline void set_has_scan_j_positive();
  inline void clear_has_scan_j_positive();
  inline void set_has_adjacent_i();
  inline void clear_has_adjacent_i();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 points_along_latitude_circle_;
  ::google::protobuf::uint32 points_along_longitude_meridian_;
  ::google::protobuf::int32 first_point_latitude_;
  ::google::protobuf::int32 first_point_longitude_;
  ::google::protobuf::int32 last_point_latitude_;
  ::google::protobuf::int32 last_point_longitude_;
  ::google::protobuf::int32 longitude_direction_increment_;
  ::google::protobuf::int32 latitude_direction_increment_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > points_along_parallel_;
  bool scan_i_positive_;
  bool scan_j_positive_;
  bool adjacent_i_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_grib_2ddata_2eproto();
  friend void protobuf_AssignDesc_grib_2ddata_2eproto();
  friend void protobuf_ShutdownFile_grib_2ddata_2eproto();
  
  void InitAsDefaultInstance();
  static GribData_lat_long_gauss_grid_t* default_instance_;
};
// -------------------------------------------------------------------

class GribData : public ::google::protobuf::Message {
 public:
  GribData();
  virtual ~GribData();
  
  GribData(const GribData& from);
  
  inline GribData& operator=(const GribData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GribData& default_instance();
  
  void Swap(GribData* other);
  
  // implements Message ----------------------------------------------
  
  GribData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GribData& from);
  void MergeFrom(const GribData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GribData_lat_long_gauss_grid_t lat_long_gauss_grid_t;
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid_transmet_raw_datum = 1;
  inline bool has_uid_transmet_raw_datum() const;
  inline void clear_uid_transmet_raw_datum();
  static const int kUidTransmetRawDatumFieldNumber = 1;
  inline ::google::protobuf::uint32 uid_transmet_raw_datum() const;
  inline void set_uid_transmet_raw_datum(::google::protobuf::uint32 value);
  
  // required uint32 identification_of_center = 2;
  inline bool has_identification_of_center() const;
  inline void clear_identification_of_center();
  static const int kIdentificationOfCenterFieldNumber = 2;
  inline ::google::protobuf::uint32 identification_of_center() const;
  inline void set_identification_of_center(::google::protobuf::uint32 value);
  
  // optional uint32 data_model = 3;
  inline bool has_data_model() const;
  inline void clear_data_model();
  static const int kDataModelFieldNumber = 3;
  inline ::google::protobuf::uint32 data_model() const;
  inline void set_data_model(::google::protobuf::uint32 value);
  
  // required uint32 grid_identification = 4;
  inline bool has_grid_identification() const;
  inline void clear_grid_identification();
  static const int kGridIdentificationFieldNumber = 4;
  inline ::google::protobuf::uint32 grid_identification() const;
  inline void set_grid_identification(::google::protobuf::uint32 value);
  
  // required uint32 indicator_of_parameter_and_units = 5;
  inline bool has_indicator_of_parameter_and_units() const;
  inline void clear_indicator_of_parameter_and_units();
  static const int kIndicatorOfParameterAndUnitsFieldNumber = 5;
  inline ::google::protobuf::uint32 indicator_of_parameter_and_units() const;
  inline void set_indicator_of_parameter_and_units(::google::protobuf::uint32 value);
  
  // required uint32 indicator_of_type_of_level = 6;
  inline bool has_indicator_of_type_of_level() const;
  inline void clear_indicator_of_type_of_level();
  static const int kIndicatorOfTypeOfLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 indicator_of_type_of_level() const;
  inline void set_indicator_of_type_of_level(::google::protobuf::uint32 value);
  
  // optional uint32 parameters_of_level = 7;
  inline bool has_parameters_of_level() const;
  inline void clear_parameters_of_level();
  static const int kParametersOfLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 parameters_of_level() const;
  inline void set_parameters_of_level(::google::protobuf::uint32 value);
  
  // required string day = 8;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 8;
  inline const ::std::string& day() const;
  inline void set_day(const ::std::string& value);
  inline void set_day(const char* value);
  inline void set_day(const char* value, size_t size);
  inline ::std::string* mutable_day();
  inline ::std::string* release_day();
  
  // required uint32 hour = 9;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 9;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);
  
  // required uint32 minute = 10;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 10;
  inline ::google::protobuf::uint32 minute() const;
  inline void set_minute(::google::protobuf::uint32 value);
  
  // optional sint32 decimal_scale_factor = 11;
  inline bool has_decimal_scale_factor() const;
  inline void clear_decimal_scale_factor();
  static const int kDecimalScaleFactorFieldNumber = 11;
  inline ::google::protobuf::int32 decimal_scale_factor() const;
  inline void set_decimal_scale_factor(::google::protobuf::int32 value);
  
  // optional uint32 grib_edition = 12;
  inline bool has_grib_edition() const;
  inline void clear_grib_edition();
  static const int kGribEditionFieldNumber = 12;
  inline ::google::protobuf::uint32 grib_edition() const;
  inline void set_grib_edition(::google::protobuf::uint32 value);
  
  // optional uint32 forecast_time_units = 13;
  inline bool has_forecast_time_units() const;
  inline void clear_forecast_time_units();
  static const int kForecastTimeUnitsFieldNumber = 13;
  inline ::google::protobuf::uint32 forecast_time_units() const;
  inline void set_forecast_time_units(::google::protobuf::uint32 value);
  
  // optional uint32 time_period_1 = 14;
  inline bool has_time_period_1() const;
  inline void clear_time_period_1();
  static const int kTimePeriod1FieldNumber = 14;
  inline ::google::protobuf::uint32 time_period_1() const;
  inline void set_time_period_1(::google::protobuf::uint32 value);
  
  // optional uint32 time_period_2 = 15;
  inline bool has_time_period_2() const;
  inline void clear_time_period_2();
  static const int kTimePeriod2FieldNumber = 15;
  inline ::google::protobuf::uint32 time_period_2() const;
  inline void set_time_period_2(::google::protobuf::uint32 value);
  
  // optional uint32 time_range_indicator = 16;
  inline bool has_time_range_indicator() const;
  inline void clear_time_range_indicator();
  static const int kTimeRangeIndicatorFieldNumber = 16;
  inline ::google::protobuf::uint32 time_range_indicator() const;
  inline void set_time_range_indicator(::google::protobuf::uint32 value);
  
  // optional uint32 forecast_delta_time = 17;
  inline bool has_forecast_delta_time() const;
  inline void clear_forecast_delta_time();
  static const int kForecastDeltaTimeFieldNumber = 17;
  inline ::google::protobuf::uint32 forecast_delta_time() const;
  inline void set_forecast_delta_time(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_vertical_coordinate_param = 30;
  inline bool has_number_of_vertical_coordinate_param() const;
  inline void clear_number_of_vertical_coordinate_param();
  static const int kNumberOfVerticalCoordinateParamFieldNumber = 30;
  inline ::google::protobuf::uint32 number_of_vertical_coordinate_param() const;
  inline void set_number_of_vertical_coordinate_param(::google::protobuf::uint32 value);
  
  // optional uint32 pv_or_pl_octet_number = 31;
  inline bool has_pv_or_pl_octet_number() const;
  inline void clear_pv_or_pl_octet_number();
  static const int kPvOrPlOctetNumberFieldNumber = 31;
  inline ::google::protobuf::uint32 pv_or_pl_octet_number() const;
  inline void set_pv_or_pl_octet_number(::google::protobuf::uint32 value);
  
  // optional uint32 data_representation_type = 32;
  inline bool has_data_representation_type() const;
  inline void clear_data_representation_type();
  static const int kDataRepresentationTypeFieldNumber = 32;
  inline ::google::protobuf::uint32 data_representation_type() const;
  inline void set_data_representation_type(::google::protobuf::uint32 value);
  
  // optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
  inline bool has_lat_long_gauss_grid() const;
  inline void clear_lat_long_gauss_grid();
  static const int kLatLongGaussGridFieldNumber = 33;
  inline const ::GribData_lat_long_gauss_grid_t& lat_long_gauss_grid() const;
  inline ::GribData_lat_long_gauss_grid_t* mutable_lat_long_gauss_grid();
  inline ::GribData_lat_long_gauss_grid_t* release_lat_long_gauss_grid();
  
  // repeated bool bit_map = 50;
  inline int bit_map_size() const;
  inline void clear_bit_map();
  static const int kBitMapFieldNumber = 50;
  inline bool bit_map(int index) const;
  inline void set_bit_map(int index, bool value);
  inline void add_bit_map(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bit_map() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bit_map();
  
  // optional sint32 binary_scale_factor = 71;
  inline bool has_binary_scale_factor() const;
  inline void clear_binary_scale_factor();
  static const int kBinaryScaleFactorFieldNumber = 71;
  inline ::google::protobuf::int32 binary_scale_factor() const;
  inline void set_binary_scale_factor(::google::protobuf::int32 value);
  
  // optional float reference_value = 72;
  inline bool has_reference_value() const;
  inline void clear_reference_value();
  static const int kReferenceValueFieldNumber = 72;
  inline float reference_value() const;
  inline void set_reference_value(float value);
  
  // optional uint32 bits_per_point = 73;
  inline bool has_bits_per_point() const;
  inline void clear_bits_per_point();
  static const int kBitsPerPointFieldNumber = 73;
  inline ::google::protobuf::uint32 bits_per_point() const;
  inline void set_bits_per_point(::google::protobuf::uint32 value);
  
  // optional uint32 pack_method = 74;
  inline bool has_pack_method() const;
  inline void clear_pack_method();
  static const int kPackMethodFieldNumber = 74;
  inline ::google::protobuf::uint32 pack_method() const;
  inline void set_pack_method(::google::protobuf::uint32 value);
  
  // repeated float grid_point_data = 75;
  inline int grid_point_data_size() const;
  inline void clear_grid_point_data();
  static const int kGridPointDataFieldNumber = 75;
  inline float grid_point_data(int index) const;
  inline void set_grid_point_data(int index, float value);
  inline void add_grid_point_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      grid_point_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_grid_point_data();
  
  // @@protoc_insertion_point(class_scope:GribData)
 private:
  inline void set_has_uid_transmet_raw_datum();
  inline void clear_has_uid_transmet_raw_datum();
  inline void set_has_identification_of_center();
  inline void clear_has_identification_of_center();
  inline void set_has_data_model();
  inline void clear_has_data_model();
  inline void set_has_grid_identification();
  inline void clear_has_grid_identification();
  inline void set_has_indicator_of_parameter_and_units();
  inline void clear_has_indicator_of_parameter_and_units();
  inline void set_has_indicator_of_type_of_level();
  inline void clear_has_indicator_of_type_of_level();
  inline void set_has_parameters_of_level();
  inline void clear_has_parameters_of_level();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  inline void set_has_decimal_scale_factor();
  inline void clear_has_decimal_scale_factor();
  inline void set_has_grib_edition();
  inline void clear_has_grib_edition();
  inline void set_has_forecast_time_units();
  inline void clear_has_forecast_time_units();
  inline void set_has_time_period_1();
  inline void clear_has_time_period_1();
  inline void set_has_time_period_2();
  inline void clear_has_time_period_2();
  inline void set_has_time_range_indicator();
  inline void clear_has_time_range_indicator();
  inline void set_has_forecast_delta_time();
  inline void clear_has_forecast_delta_time();
  inline void set_has_number_of_vertical_coordinate_param();
  inline void clear_has_number_of_vertical_coordinate_param();
  inline void set_has_pv_or_pl_octet_number();
  inline void clear_has_pv_or_pl_octet_number();
  inline void set_has_data_representation_type();
  inline void clear_has_data_representation_type();
  inline void set_has_lat_long_gauss_grid();
  inline void clear_has_lat_long_gauss_grid();
  inline void set_has_binary_scale_factor();
  inline void clear_has_binary_scale_factor();
  inline void set_has_reference_value();
  inline void clear_has_reference_value();
  inline void set_has_bits_per_point();
  inline void clear_has_bits_per_point();
  inline void set_has_pack_method();
  inline void clear_has_pack_method();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_transmet_raw_datum_;
  ::google::protobuf::uint32 identification_of_center_;
  ::google::protobuf::uint32 data_model_;
  ::google::protobuf::uint32 grid_identification_;
  ::google::protobuf::uint32 indicator_of_parameter_and_units_;
  ::google::protobuf::uint32 indicator_of_type_of_level_;
  ::std::string* day_;
  ::google::protobuf::uint32 parameters_of_level_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::int32 decimal_scale_factor_;
  ::google::protobuf::uint32 grib_edition_;
  ::google::protobuf::uint32 forecast_time_units_;
  ::google::protobuf::uint32 time_period_1_;
  ::google::protobuf::uint32 time_period_2_;
  ::google::protobuf::uint32 time_range_indicator_;
  ::google::protobuf::uint32 forecast_delta_time_;
  ::google::protobuf::uint32 number_of_vertical_coordinate_param_;
  ::google::protobuf::uint32 pv_or_pl_octet_number_;
  ::GribData_lat_long_gauss_grid_t* lat_long_gauss_grid_;
  ::google::protobuf::uint32 data_representation_type_;
  ::google::protobuf::int32 binary_scale_factor_;
  ::google::protobuf::RepeatedField< bool > bit_map_;
  float reference_value_;
  ::google::protobuf::uint32 bits_per_point_;
  ::google::protobuf::RepeatedField< float > grid_point_data_;
  ::google::protobuf::uint32 pack_method_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_grib_2ddata_2eproto();
  friend void protobuf_AssignDesc_grib_2ddata_2eproto();
  friend void protobuf_ShutdownFile_grib_2ddata_2eproto();
  
  void InitAsDefaultInstance();
  static GribData* default_instance_;
};
// ===================================================================


// ===================================================================

// GribData_lat_long_gauss_grid_t

// optional uint32 points_along_latitude_circle = 33;
inline bool GribData_lat_long_gauss_grid_t::has_points_along_latitude_circle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_points_along_latitude_circle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_points_along_latitude_circle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GribData_lat_long_gauss_grid_t::clear_points_along_latitude_circle() {
  points_along_latitude_circle_ = 0u;
  clear_has_points_along_latitude_circle();
}
inline ::google::protobuf::uint32 GribData_lat_long_gauss_grid_t::points_along_latitude_circle() const {
  return points_along_latitude_circle_;
}
inline void GribData_lat_long_gauss_grid_t::set_points_along_latitude_circle(::google::protobuf::uint32 value) {
  set_has_points_along_latitude_circle();
  points_along_latitude_circle_ = value;
}

// optional uint32 points_along_longitude_meridian = 34;
inline bool GribData_lat_long_gauss_grid_t::has_points_along_longitude_meridian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_points_along_longitude_meridian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_points_along_longitude_meridian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GribData_lat_long_gauss_grid_t::clear_points_along_longitude_meridian() {
  points_along_longitude_meridian_ = 0u;
  clear_has_points_along_longitude_meridian();
}
inline ::google::protobuf::uint32 GribData_lat_long_gauss_grid_t::points_along_longitude_meridian() const {
  return points_along_longitude_meridian_;
}
inline void GribData_lat_long_gauss_grid_t::set_points_along_longitude_meridian(::google::protobuf::uint32 value) {
  set_has_points_along_longitude_meridian();
  points_along_longitude_meridian_ = value;
}

// optional sint32 first_point_latitude = 35;
inline bool GribData_lat_long_gauss_grid_t::has_first_point_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_first_point_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_first_point_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GribData_lat_long_gauss_grid_t::clear_first_point_latitude() {
  first_point_latitude_ = 0;
  clear_has_first_point_latitude();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::first_point_latitude() const {
  return first_point_latitude_;
}
inline void GribData_lat_long_gauss_grid_t::set_first_point_latitude(::google::protobuf::int32 value) {
  set_has_first_point_latitude();
  first_point_latitude_ = value;
}

// optional sint32 first_point_longitude = 36;
inline bool GribData_lat_long_gauss_grid_t::has_first_point_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_first_point_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_first_point_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GribData_lat_long_gauss_grid_t::clear_first_point_longitude() {
  first_point_longitude_ = 0;
  clear_has_first_point_longitude();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::first_point_longitude() const {
  return first_point_longitude_;
}
inline void GribData_lat_long_gauss_grid_t::set_first_point_longitude(::google::protobuf::int32 value) {
  set_has_first_point_longitude();
  first_point_longitude_ = value;
}

// optional sint32 last_point_latitude = 37;
inline bool GribData_lat_long_gauss_grid_t::has_last_point_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_last_point_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_last_point_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GribData_lat_long_gauss_grid_t::clear_last_point_latitude() {
  last_point_latitude_ = 0;
  clear_has_last_point_latitude();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::last_point_latitude() const {
  return last_point_latitude_;
}
inline void GribData_lat_long_gauss_grid_t::set_last_point_latitude(::google::protobuf::int32 value) {
  set_has_last_point_latitude();
  last_point_latitude_ = value;
}

// optional sint32 last_point_longitude = 38;
inline bool GribData_lat_long_gauss_grid_t::has_last_point_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_last_point_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_last_point_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GribData_lat_long_gauss_grid_t::clear_last_point_longitude() {
  last_point_longitude_ = 0;
  clear_has_last_point_longitude();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::last_point_longitude() const {
  return last_point_longitude_;
}
inline void GribData_lat_long_gauss_grid_t::set_last_point_longitude(::google::protobuf::int32 value) {
  set_has_last_point_longitude();
  last_point_longitude_ = value;
}

// optional sint32 longitude_direction_increment = 39;
inline bool GribData_lat_long_gauss_grid_t::has_longitude_direction_increment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_longitude_direction_increment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_longitude_direction_increment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GribData_lat_long_gauss_grid_t::clear_longitude_direction_increment() {
  longitude_direction_increment_ = 0;
  clear_has_longitude_direction_increment();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::longitude_direction_increment() const {
  return longitude_direction_increment_;
}
inline void GribData_lat_long_gauss_grid_t::set_longitude_direction_increment(::google::protobuf::int32 value) {
  set_has_longitude_direction_increment();
  longitude_direction_increment_ = value;
}

// optional sint32 latitude_direction_increment = 40;
inline bool GribData_lat_long_gauss_grid_t::has_latitude_direction_increment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_latitude_direction_increment() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_latitude_direction_increment() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GribData_lat_long_gauss_grid_t::clear_latitude_direction_increment() {
  latitude_direction_increment_ = 0;
  clear_has_latitude_direction_increment();
}
inline ::google::protobuf::int32 GribData_lat_long_gauss_grid_t::latitude_direction_increment() const {
  return latitude_direction_increment_;
}
inline void GribData_lat_long_gauss_grid_t::set_latitude_direction_increment(::google::protobuf::int32 value) {
  set_has_latitude_direction_increment();
  latitude_direction_increment_ = value;
}

// optional bool scan_i_positive = 41;
inline bool GribData_lat_long_gauss_grid_t::has_scan_i_positive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_scan_i_positive() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_scan_i_positive() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GribData_lat_long_gauss_grid_t::clear_scan_i_positive() {
  scan_i_positive_ = false;
  clear_has_scan_i_positive();
}
inline bool GribData_lat_long_gauss_grid_t::scan_i_positive() const {
  return scan_i_positive_;
}
inline void GribData_lat_long_gauss_grid_t::set_scan_i_positive(bool value) {
  set_has_scan_i_positive();
  scan_i_positive_ = value;
}

// optional bool scan_j_positive = 42;
inline bool GribData_lat_long_gauss_grid_t::has_scan_j_positive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_scan_j_positive() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_scan_j_positive() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GribData_lat_long_gauss_grid_t::clear_scan_j_positive() {
  scan_j_positive_ = false;
  clear_has_scan_j_positive();
}
inline bool GribData_lat_long_gauss_grid_t::scan_j_positive() const {
  return scan_j_positive_;
}
inline void GribData_lat_long_gauss_grid_t::set_scan_j_positive(bool value) {
  set_has_scan_j_positive();
  scan_j_positive_ = value;
}

// optional bool adjacent_i = 43;
inline bool GribData_lat_long_gauss_grid_t::has_adjacent_i() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GribData_lat_long_gauss_grid_t::set_has_adjacent_i() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GribData_lat_long_gauss_grid_t::clear_has_adjacent_i() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GribData_lat_long_gauss_grid_t::clear_adjacent_i() {
  adjacent_i_ = false;
  clear_has_adjacent_i();
}
inline bool GribData_lat_long_gauss_grid_t::adjacent_i() const {
  return adjacent_i_;
}
inline void GribData_lat_long_gauss_grid_t::set_adjacent_i(bool value) {
  set_has_adjacent_i();
  adjacent_i_ = value;
}

// repeated uint32 points_along_parallel = 50;
inline int GribData_lat_long_gauss_grid_t::points_along_parallel_size() const {
  return points_along_parallel_.size();
}
inline void GribData_lat_long_gauss_grid_t::clear_points_along_parallel() {
  points_along_parallel_.Clear();
}
inline ::google::protobuf::uint32 GribData_lat_long_gauss_grid_t::points_along_parallel(int index) const {
  return points_along_parallel_.Get(index);
}
inline void GribData_lat_long_gauss_grid_t::set_points_along_parallel(int index, ::google::protobuf::uint32 value) {
  points_along_parallel_.Set(index, value);
}
inline void GribData_lat_long_gauss_grid_t::add_points_along_parallel(::google::protobuf::uint32 value) {
  points_along_parallel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GribData_lat_long_gauss_grid_t::points_along_parallel() const {
  return points_along_parallel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GribData_lat_long_gauss_grid_t::mutable_points_along_parallel() {
  return &points_along_parallel_;
}

// -------------------------------------------------------------------

// GribData

// required uint32 uid_transmet_raw_datum = 1;
inline bool GribData::has_uid_transmet_raw_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GribData::set_has_uid_transmet_raw_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GribData::clear_has_uid_transmet_raw_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GribData::clear_uid_transmet_raw_datum() {
  uid_transmet_raw_datum_ = 0u;
  clear_has_uid_transmet_raw_datum();
}
inline ::google::protobuf::uint32 GribData::uid_transmet_raw_datum() const {
  return uid_transmet_raw_datum_;
}
inline void GribData::set_uid_transmet_raw_datum(::google::protobuf::uint32 value) {
  set_has_uid_transmet_raw_datum();
  uid_transmet_raw_datum_ = value;
}

// required uint32 identification_of_center = 2;
inline bool GribData::has_identification_of_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GribData::set_has_identification_of_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GribData::clear_has_identification_of_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GribData::clear_identification_of_center() {
  identification_of_center_ = 0u;
  clear_has_identification_of_center();
}
inline ::google::protobuf::uint32 GribData::identification_of_center() const {
  return identification_of_center_;
}
inline void GribData::set_identification_of_center(::google::protobuf::uint32 value) {
  set_has_identification_of_center();
  identification_of_center_ = value;
}

// optional uint32 data_model = 3;
inline bool GribData::has_data_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GribData::set_has_data_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GribData::clear_has_data_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GribData::clear_data_model() {
  data_model_ = 0u;
  clear_has_data_model();
}
inline ::google::protobuf::uint32 GribData::data_model() const {
  return data_model_;
}
inline void GribData::set_data_model(::google::protobuf::uint32 value) {
  set_has_data_model();
  data_model_ = value;
}

// required uint32 grid_identification = 4;
inline bool GribData::has_grid_identification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GribData::set_has_grid_identification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GribData::clear_has_grid_identification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GribData::clear_grid_identification() {
  grid_identification_ = 0u;
  clear_has_grid_identification();
}
inline ::google::protobuf::uint32 GribData::grid_identification() const {
  return grid_identification_;
}
inline void GribData::set_grid_identification(::google::protobuf::uint32 value) {
  set_has_grid_identification();
  grid_identification_ = value;
}

// required uint32 indicator_of_parameter_and_units = 5;
inline bool GribData::has_indicator_of_parameter_and_units() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GribData::set_has_indicator_of_parameter_and_units() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GribData::clear_has_indicator_of_parameter_and_units() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GribData::clear_indicator_of_parameter_and_units() {
  indicator_of_parameter_and_units_ = 0u;
  clear_has_indicator_of_parameter_and_units();
}
inline ::google::protobuf::uint32 GribData::indicator_of_parameter_and_units() const {
  return indicator_of_parameter_and_units_;
}
inline void GribData::set_indicator_of_parameter_and_units(::google::protobuf::uint32 value) {
  set_has_indicator_of_parameter_and_units();
  indicator_of_parameter_and_units_ = value;
}

// required uint32 indicator_of_type_of_level = 6;
inline bool GribData::has_indicator_of_type_of_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GribData::set_has_indicator_of_type_of_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GribData::clear_has_indicator_of_type_of_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GribData::clear_indicator_of_type_of_level() {
  indicator_of_type_of_level_ = 0u;
  clear_has_indicator_of_type_of_level();
}
inline ::google::protobuf::uint32 GribData::indicator_of_type_of_level() const {
  return indicator_of_type_of_level_;
}
inline void GribData::set_indicator_of_type_of_level(::google::protobuf::uint32 value) {
  set_has_indicator_of_type_of_level();
  indicator_of_type_of_level_ = value;
}

// optional uint32 parameters_of_level = 7;
inline bool GribData::has_parameters_of_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GribData::set_has_parameters_of_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GribData::clear_has_parameters_of_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GribData::clear_parameters_of_level() {
  parameters_of_level_ = 0u;
  clear_has_parameters_of_level();
}
inline ::google::protobuf::uint32 GribData::parameters_of_level() const {
  return parameters_of_level_;
}
inline void GribData::set_parameters_of_level(::google::protobuf::uint32 value) {
  set_has_parameters_of_level();
  parameters_of_level_ = value;
}

// required string day = 8;
inline bool GribData::has_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GribData::set_has_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GribData::clear_has_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GribData::clear_day() {
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    day_->clear();
  }
  clear_has_day();
}
inline const ::std::string& GribData::day() const {
  return *day_;
}
inline void GribData::set_day(const ::std::string& value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void GribData::set_day(const char* value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(value);
}
inline void GribData::set_day(const char* value, size_t size) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  day_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GribData::mutable_day() {
  set_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    day_ = new ::std::string;
  }
  return day_;
}
inline ::std::string* GribData::release_day() {
  clear_has_day();
  if (day_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = day_;
    day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 hour = 9;
inline bool GribData::has_hour() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GribData::set_has_hour() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GribData::clear_has_hour() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GribData::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 GribData::hour() const {
  return hour_;
}
inline void GribData::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
}

// required uint32 minute = 10;
inline bool GribData::has_minute() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GribData::set_has_minute() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GribData::clear_has_minute() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GribData::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
inline ::google::protobuf::uint32 GribData::minute() const {
  return minute_;
}
inline void GribData::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
}

// optional sint32 decimal_scale_factor = 11;
inline bool GribData::has_decimal_scale_factor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GribData::set_has_decimal_scale_factor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GribData::clear_has_decimal_scale_factor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GribData::clear_decimal_scale_factor() {
  decimal_scale_factor_ = 0;
  clear_has_decimal_scale_factor();
}
inline ::google::protobuf::int32 GribData::decimal_scale_factor() const {
  return decimal_scale_factor_;
}
inline void GribData::set_decimal_scale_factor(::google::protobuf::int32 value) {
  set_has_decimal_scale_factor();
  decimal_scale_factor_ = value;
}

// optional uint32 grib_edition = 12;
inline bool GribData::has_grib_edition() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GribData::set_has_grib_edition() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GribData::clear_has_grib_edition() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GribData::clear_grib_edition() {
  grib_edition_ = 0u;
  clear_has_grib_edition();
}
inline ::google::protobuf::uint32 GribData::grib_edition() const {
  return grib_edition_;
}
inline void GribData::set_grib_edition(::google::protobuf::uint32 value) {
  set_has_grib_edition();
  grib_edition_ = value;
}

// optional uint32 forecast_time_units = 13;
inline bool GribData::has_forecast_time_units() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GribData::set_has_forecast_time_units() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GribData::clear_has_forecast_time_units() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GribData::clear_forecast_time_units() {
  forecast_time_units_ = 0u;
  clear_has_forecast_time_units();
}
inline ::google::protobuf::uint32 GribData::forecast_time_units() const {
  return forecast_time_units_;
}
inline void GribData::set_forecast_time_units(::google::protobuf::uint32 value) {
  set_has_forecast_time_units();
  forecast_time_units_ = value;
}

// optional uint32 time_period_1 = 14;
inline bool GribData::has_time_period_1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GribData::set_has_time_period_1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GribData::clear_has_time_period_1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GribData::clear_time_period_1() {
  time_period_1_ = 0u;
  clear_has_time_period_1();
}
inline ::google::protobuf::uint32 GribData::time_period_1() const {
  return time_period_1_;
}
inline void GribData::set_time_period_1(::google::protobuf::uint32 value) {
  set_has_time_period_1();
  time_period_1_ = value;
}

// optional uint32 time_period_2 = 15;
inline bool GribData::has_time_period_2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GribData::set_has_time_period_2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GribData::clear_has_time_period_2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GribData::clear_time_period_2() {
  time_period_2_ = 0u;
  clear_has_time_period_2();
}
inline ::google::protobuf::uint32 GribData::time_period_2() const {
  return time_period_2_;
}
inline void GribData::set_time_period_2(::google::protobuf::uint32 value) {
  set_has_time_period_2();
  time_period_2_ = value;
}

// optional uint32 time_range_indicator = 16;
inline bool GribData::has_time_range_indicator() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GribData::set_has_time_range_indicator() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GribData::clear_has_time_range_indicator() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GribData::clear_time_range_indicator() {
  time_range_indicator_ = 0u;
  clear_has_time_range_indicator();
}
inline ::google::protobuf::uint32 GribData::time_range_indicator() const {
  return time_range_indicator_;
}
inline void GribData::set_time_range_indicator(::google::protobuf::uint32 value) {
  set_has_time_range_indicator();
  time_range_indicator_ = value;
}

// optional uint32 forecast_delta_time = 17;
inline bool GribData::has_forecast_delta_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GribData::set_has_forecast_delta_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GribData::clear_has_forecast_delta_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GribData::clear_forecast_delta_time() {
  forecast_delta_time_ = 0u;
  clear_has_forecast_delta_time();
}
inline ::google::protobuf::uint32 GribData::forecast_delta_time() const {
  return forecast_delta_time_;
}
inline void GribData::set_forecast_delta_time(::google::protobuf::uint32 value) {
  set_has_forecast_delta_time();
  forecast_delta_time_ = value;
}

// optional uint32 number_of_vertical_coordinate_param = 30;
inline bool GribData::has_number_of_vertical_coordinate_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GribData::set_has_number_of_vertical_coordinate_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GribData::clear_has_number_of_vertical_coordinate_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GribData::clear_number_of_vertical_coordinate_param() {
  number_of_vertical_coordinate_param_ = 0u;
  clear_has_number_of_vertical_coordinate_param();
}
inline ::google::protobuf::uint32 GribData::number_of_vertical_coordinate_param() const {
  return number_of_vertical_coordinate_param_;
}
inline void GribData::set_number_of_vertical_coordinate_param(::google::protobuf::uint32 value) {
  set_has_number_of_vertical_coordinate_param();
  number_of_vertical_coordinate_param_ = value;
}

// optional uint32 pv_or_pl_octet_number = 31;
inline bool GribData::has_pv_or_pl_octet_number() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GribData::set_has_pv_or_pl_octet_number() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GribData::clear_has_pv_or_pl_octet_number() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GribData::clear_pv_or_pl_octet_number() {
  pv_or_pl_octet_number_ = 0u;
  clear_has_pv_or_pl_octet_number();
}
inline ::google::protobuf::uint32 GribData::pv_or_pl_octet_number() const {
  return pv_or_pl_octet_number_;
}
inline void GribData::set_pv_or_pl_octet_number(::google::protobuf::uint32 value) {
  set_has_pv_or_pl_octet_number();
  pv_or_pl_octet_number_ = value;
}

// optional uint32 data_representation_type = 32;
inline bool GribData::has_data_representation_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GribData::set_has_data_representation_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GribData::clear_has_data_representation_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GribData::clear_data_representation_type() {
  data_representation_type_ = 0u;
  clear_has_data_representation_type();
}
inline ::google::protobuf::uint32 GribData::data_representation_type() const {
  return data_representation_type_;
}
inline void GribData::set_data_representation_type(::google::protobuf::uint32 value) {
  set_has_data_representation_type();
  data_representation_type_ = value;
}

// optional .GribData.lat_long_gauss_grid_t lat_long_gauss_grid = 33;
inline bool GribData::has_lat_long_gauss_grid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GribData::set_has_lat_long_gauss_grid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GribData::clear_has_lat_long_gauss_grid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GribData::clear_lat_long_gauss_grid() {
  if (lat_long_gauss_grid_ != NULL) lat_long_gauss_grid_->::GribData_lat_long_gauss_grid_t::Clear();
  clear_has_lat_long_gauss_grid();
}
inline const ::GribData_lat_long_gauss_grid_t& GribData::lat_long_gauss_grid() const {
  return lat_long_gauss_grid_ != NULL ? *lat_long_gauss_grid_ : *default_instance_->lat_long_gauss_grid_;
}
inline ::GribData_lat_long_gauss_grid_t* GribData::mutable_lat_long_gauss_grid() {
  set_has_lat_long_gauss_grid();
  if (lat_long_gauss_grid_ == NULL) lat_long_gauss_grid_ = new ::GribData_lat_long_gauss_grid_t;
  return lat_long_gauss_grid_;
}
inline ::GribData_lat_long_gauss_grid_t* GribData::release_lat_long_gauss_grid() {
  clear_has_lat_long_gauss_grid();
  ::GribData_lat_long_gauss_grid_t* temp = lat_long_gauss_grid_;
  lat_long_gauss_grid_ = NULL;
  return temp;
}

// repeated bool bit_map = 50;
inline int GribData::bit_map_size() const {
  return bit_map_.size();
}
inline void GribData::clear_bit_map() {
  bit_map_.Clear();
}
inline bool GribData::bit_map(int index) const {
  return bit_map_.Get(index);
}
inline void GribData::set_bit_map(int index, bool value) {
  bit_map_.Set(index, value);
}
inline void GribData::add_bit_map(bool value) {
  bit_map_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GribData::bit_map() const {
  return bit_map_;
}
inline ::google::protobuf::RepeatedField< bool >*
GribData::mutable_bit_map() {
  return &bit_map_;
}

// optional sint32 binary_scale_factor = 71;
inline bool GribData::has_binary_scale_factor() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GribData::set_has_binary_scale_factor() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GribData::clear_has_binary_scale_factor() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GribData::clear_binary_scale_factor() {
  binary_scale_factor_ = 0;
  clear_has_binary_scale_factor();
}
inline ::google::protobuf::int32 GribData::binary_scale_factor() const {
  return binary_scale_factor_;
}
inline void GribData::set_binary_scale_factor(::google::protobuf::int32 value) {
  set_has_binary_scale_factor();
  binary_scale_factor_ = value;
}

// optional float reference_value = 72;
inline bool GribData::has_reference_value() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GribData::set_has_reference_value() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GribData::clear_has_reference_value() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GribData::clear_reference_value() {
  reference_value_ = 0;
  clear_has_reference_value();
}
inline float GribData::reference_value() const {
  return reference_value_;
}
inline void GribData::set_reference_value(float value) {
  set_has_reference_value();
  reference_value_ = value;
}

// optional uint32 bits_per_point = 73;
inline bool GribData::has_bits_per_point() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GribData::set_has_bits_per_point() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GribData::clear_has_bits_per_point() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GribData::clear_bits_per_point() {
  bits_per_point_ = 0u;
  clear_has_bits_per_point();
}
inline ::google::protobuf::uint32 GribData::bits_per_point() const {
  return bits_per_point_;
}
inline void GribData::set_bits_per_point(::google::protobuf::uint32 value) {
  set_has_bits_per_point();
  bits_per_point_ = value;
}

// optional uint32 pack_method = 74;
inline bool GribData::has_pack_method() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GribData::set_has_pack_method() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GribData::clear_has_pack_method() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GribData::clear_pack_method() {
  pack_method_ = 0u;
  clear_has_pack_method();
}
inline ::google::protobuf::uint32 GribData::pack_method() const {
  return pack_method_;
}
inline void GribData::set_pack_method(::google::protobuf::uint32 value) {
  set_has_pack_method();
  pack_method_ = value;
}

// repeated float grid_point_data = 75;
inline int GribData::grid_point_data_size() const {
  return grid_point_data_.size();
}
inline void GribData::clear_grid_point_data() {
  grid_point_data_.Clear();
}
inline float GribData::grid_point_data(int index) const {
  return grid_point_data_.Get(index);
}
inline void GribData::set_grid_point_data(int index, float value) {
  grid_point_data_.Set(index, value);
}
inline void GribData::add_grid_point_data(float value) {
  grid_point_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
GribData::grid_point_data() const {
  return grid_point_data_;
}
inline ::google::protobuf::RepeatedField< float >*
GribData::mutable_grid_point_data() {
  return &grid_point_data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grib_2ddata_2eproto__INCLUDED
