// -*- coding: UTF-8 -*-
//
// Модуль разбора аргументов командной строки.
//
// ВНИМАНИЕ! Этот модуль создан генератором кода ODF.
// Настоятельно не рекомендуется вносить в него какие-либо изменения
// вручную!
//

#ifndef _ODF_bc640134b904bc3317919c0c1d90d2b8_
#define _ODF_bc640134b904bc3317919c0c1d90d2b8_

#define ODF_BOOL    int

#ifdef __cplusplus
# define EXTERN     extern "C"
#else
# define EXTERN     extern
#endif



/** @addtogroup grp_options Разбор командной строки */
/// @{

/// Запуск в режиме приложения. Соответствует опции @ref ss_opt_app
EXTERN ODF_BOOL opt_app;
/// Не устанавливать заголовок консольного окна в режиме приложения. Соответствует опции @ref ss_opt_no_console_title
EXTERN ODF_BOOL opt_no_console_title;
/// Установить программу в качестве службы ОС. Соответствует опции @ref ss_opt_install
EXTERN ODF_BOOL opt_install;
/// Удалить службу ОС, соответствующую программе. Соответствует опции @ref ss_opt_uninstall
EXTERN ODF_BOOL opt_uninstall;
/// Системное имя службы. Соответствует опции @ref ss_opt_servicename
EXTERN const char * opt_servicename;
/// Отображаемое имя службы. Соответствует опции @ref ss_opt_displayname
EXTERN const char * opt_displayname;
/// Аргументы командной строки исполняемого файла. Соответствует опции @ref ss_opt_args
EXTERN const char * opt_args;
/// Отключить журналирование на консоль. Соответствует опции @ref ss_opt_log_no_con
EXTERN ODF_BOOL opt_log_no_con;
/// Отключить журналирование в текстовые файлы. Соответствует опции @ref ss_opt_log_no_txt
EXTERN ODF_BOOL opt_log_no_txt;
/// Отключить журналирование в двоичные файлы. Соответствует опции @ref ss_opt_log_no_bin
EXTERN ODF_BOOL opt_log_no_bin;
/// Осуществлять журналирование в собственный каталог двоичных файлов. Соответствует опции @ref ss_opt_log_bin_exclusive
EXTERN ODF_BOOL opt_log_bin_exclusive;
/// Установить максимальный уровень важности журналируемых сообщений (debug, info, notice, warn, error). Соответствует опции @ref ss_opt_log_maxlevel
EXTERN const char * opt_log_maxlevel;
/// Отключить раскраску консольного вывода. Соответствует опции @ref ss_opt_log_no_color
EXTERN ODF_BOOL opt_log_no_color;
/// Установить кодировку консоли. Соответствует опции @ref ss_opt_log_con_encoding
EXTERN const char * opt_log_con_encoding;
/// Вывести справку по параметрам запуска и завершить работу. Соответствует опции @ref ss_opt_help
EXTERN ODF_BOOL opt_help;
/// Вывести информацию о версии программы и завершить работу. Соответствует опции @ref ss_opt_version
EXTERN int opt_version;

/// Массив строк, содержащий все возможные параметры программы.
EXTERN char* help [];

/// Функция разбора командной строки и наполнения структуры настроек.
///
/// @param[in] argc количество аргументов командной строки в массиве \e argv
///
/// @param[in] argv массив аргументов командной строки, переданный в \e main()
///
/// @return Если переданный массив аргументов был успешно разобран, функция
///         возвращает 0. Если разобрать массив аргументов не удалось
///         (например, из-за того, что в массиве встретилась неизвестная
///         опция, или опция, требующая обязательного параметра, задана без
///         него), функция возвращает индекс элемента в массиве \e argv.
///
/// @warning Эта функция создана генератором кода ODF.
EXTERN int check_options(int argc, char* argv[]);

/// Новая функция разбора командной строки и наполнения структуры настроек.
///
/// Получает на вход УКАЗАТЕЛИ на argc, argv и МЕНЯЕТ их значения в соответствии
/// с логикой getopt_long (переставляет аргументы таким образом, что параметры,
/// классифицированные как опции или их значения, исключаются из argv и
/// соответствующим образом модифицируется argc).
///
/// @param[in,out] argc на входе в функцию в параметр должен быть передан
///                     указатель на количество аргументов командной строки
///                     в массиве \e argv; после выхода из функции значение по
///                     переданному указателю модифицируется так, чтобы
///                     содержать количество только позиционных параметров
///                     (без \e argv[0], опций и их аргументов)
///
/// @param[in,out] argv на входе в функцию в параметр должен быть передан
///                     указатель на массив аргументов командной строки;
///                     после выхода из функции элементы массива
///                     переупорядочиваются так, чтобы первые \e argc элементов
///                     соответствовали только позиционным параметрам (без
///                     \e argv[0], опций и их аргументов)
///
/// @return Если переданный массив аргументов был успешно разобран, функция
///         возвращает 0. Если разобрать массив аргументов не удалось
///         (например, из-за того, что в массиве встретилась неизвестная
///         опция, или опция, требующая обязательного параметра, задана без
///         него), функция возвращает индекс элемента в массиве \e argv.
///
/// @warning Эта функция создана генератором кода ODF.
EXTERN int check_options_ex(int * argc, char ** argv[]);

/// @}


#endif
